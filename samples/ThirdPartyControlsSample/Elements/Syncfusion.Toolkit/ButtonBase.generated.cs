// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMT = Syncfusion.Maui.Toolkit;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit
{
    /// <summary>
    /// Represents the <see cref="T:Syncfusion.Maui.Toolkit.ButtonBase" /> class.
    /// </summary>
    public abstract partial class ButtonBase : SfView
    {
        static ButtonBase()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the value of the BackgroundImageSource. This property can be used to set an image as the background of ButtonBase.
        /// </summary>
        /// <value>
        /// Specifies the background image source.The default value is null.
        /// </value>
        [Parameter] public MC.ImageSource BackgroundImageSource { get; set; }
        /// <summary>
        /// Gets or sets the value of corner radius.This property can be used to customize the corners of ButtonBase control.
        /// </summary>
        /// <value>
        /// Specifies the corner radius.The default value is cornerradius(8).
        /// </value>
        [Parameter] public CornerRadius? CornerRadius { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the ripple effect of ButtonBase is enabled or not.
        /// </summary>
        /// <value>
        /// Specifies the Enable ripple effect property. The default value is true.
        /// </value>
        [Parameter] public bool? EnableRippleEffect { get; set; }
        /// <summary>
        /// Gets or sets the value of FontAttributes. This property can be used to change the font of text in either bold or italic.
        /// </summary>
        /// <value>
        /// Specifies the font attributes.The default value is <see cref="F:Microsoft.Maui.Controls.FontAttributes.None" />
        /// </value>
        [Parameter] public MC.FontAttributes? FontAttributes { get; set; }
        /// <summary>
        /// Enables automatic font size adjustment based on device settings.
        /// </summary>
        [Parameter] public bool? FontAutoScalingEnabled { get; set; }
        /// <summary>
        /// Gets or sets the value of the FontFamily. This property can be used to change the font family of the text in ButtonBase.
        /// </summary>
        /// <value>
        /// Specifies the font family.The default value is string.empty.
        /// </value>
        [Parameter] public string FontFamily { get; set; }
        /// <summary>
        /// Gets or sets the value of FontSize.This property can be used to give FontSize to the Text in ButtonBase control.
        /// </summary>
        /// <value>
        /// Specifies the font size.The default value is 14d.
        /// </value>
        [Parameter] public double? FontSize { get; set; }
        /// <summary>
        /// Gets or sets the value of HorizontalTextAlignment.This property can be used to give HorizontalTextAlignment to the Text in ButtonBase control.
        /// </summary>
        /// <value>
        /// Specifies the text alignment.The default value is <see cref="F:Microsoft.Maui.TextAlignment.Center" />.
        /// </value>
        [Parameter] public TextAlignment? HorizontalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets the ImageAlignment for the Image.
        /// </summary>
        /// <value>
        /// Specifies the image alignment.The default value is <see cref="F:Syncfusion.Maui.Toolkit.Chips.Alignment.Start" />.
        /// </value>
        [Parameter] public SMT.Chips.Alignment? ImageAlignment { get; set; }
        /// <summary>
        /// Gets or sets a value for the Image width
        /// </summary>
        /// <value>
        /// Specifies the image width.The default value is 18.
        /// </value>
        [Parameter] public double? ImageSize { get; set; }
        /// <summary>
        /// Gets or sets a value of the ImageSoure. This property can be used to set the source to an image.
        /// </summary>
        /// <value>
        /// Specifies the image source.The default value is null.
        /// </value>
        [Parameter] public MC.ImageSource ImageSource { get; set; }
        /// <summary>
        /// Gets or sets the value of Padding. This property can be used to set padding to the sides of ButtonBase.
        /// </summary>
        /// <value>
        /// Specifies the padding.The default value is 2 for Android platform and 0 for other platform.
        /// </value>
        [Parameter] public new Thickness? Padding { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the image icon of SfButton is visible or not. The icon is in visible state when this property is set to true.
        /// </summary>
        /// <value>
        /// Specifies the show icon property.The default value is false.
        /// </value>
        [Parameter] public bool? ShowIcon { get; set; }
        /// <summary>
        /// Gets or sets the value of stroke.This property can be used to give border Color to ButtonBase control.
        /// </summary>
        /// <value>
        /// Specifies the stroke.The default value is Color.FromArgb("#79747E").
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets the value of BorderThickness.This property can be used to give border thickness to ButtonBase control
        /// </summary>
        /// <value>
        /// Specifies the stroke thickness.The default value is 1f.
        /// </value>
        [Parameter] public double? StrokeThickness { get; set; }
        /// <summary>
        /// Gets or sets the value of Text.This property can be used to give Text to the ButtonBase control.
        /// </summary>
        /// <value>
        /// Specifies the text.The default value is string.Empty.
        /// </value>
        [Parameter] public string Text { get; set; }
        /// <summary>
        /// Gets or sets the value of Text Color.This property can be used to give Text Color to the text in Buttonbase control.
        /// </summary>
        /// <value>
        /// Specifies the text color.The default value is Color.FromArgb("#1C1B1F").
        /// </value>
        [Parameter] public Color TextColor { get; set; }
        /// <summary>
        /// Gets or sets the value of VerticalTextAlignment.This property can be used to give VerticalTextAlignment to the Text in ButtonBase control.
        /// </summary>
        /// <value>
        /// Specifies the text alignment.The default value is <see cref="F:Microsoft.Maui.TextAlignment.Center" />.
        /// </value>
        [Parameter] public TextAlignment? VerticalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets the value of BackgroundColor.This property can be used to give Background Color to the ButtonBase control.
        /// </summary>
        /// <value>
        /// Specifies the background color.The default value is null .
        /// </value>
        [Parameter] public new RenderFragment Background { get; set; }
        /// <summary>
        /// Gets or sets the value of stroke.This property can be used to give border Color to ButtonBase control.
        /// </summary>
        /// <value>
        /// Specifies the stroke.The default value is Color.FromArgb("#79747E").
        /// </value>
        [Parameter] public RenderFragment Stroke { get; set; }
        /// <summary>
        /// It represents the Clicked event handler. This clicked event is hooked when clicking the ButtonBase control.
        /// </summary>
        [Parameter] public EventCallback OnClick { get; set; }

        public new SMT.ButtonBase NativeControl => (SMT.ButtonBase)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundImageSource):
                    if (!Equals(BackgroundImageSource, value))
                    {
                        BackgroundImageSource = (MC.ImageSource)value;
                        NativeControl.BackgroundImageSource = BackgroundImageSource;
                    }
                    break;
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (CornerRadius?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (CornerRadius)SMT.ButtonBase.CornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableRippleEffect):
                    if (!Equals(EnableRippleEffect, value))
                    {
                        EnableRippleEffect = (bool?)value;
                        NativeControl.EnableRippleEffect = EnableRippleEffect ?? (bool)SMT.ButtonBase.EnableRippleEffectProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAttributes):
                    if (!Equals(FontAttributes, value))
                    {
                        FontAttributes = (MC.FontAttributes?)value;
                        NativeControl.FontAttributes = FontAttributes ?? (MC.FontAttributes)SMT.ButtonBase.FontAttributesProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAutoScalingEnabled):
                    if (!Equals(FontAutoScalingEnabled, value))
                    {
                        FontAutoScalingEnabled = (bool?)value;
                        NativeControl.FontAutoScalingEnabled = FontAutoScalingEnabled ?? (bool)SMT.ButtonBase.FontAutoScalingEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(FontFamily):
                    if (!Equals(FontFamily, value))
                    {
                        FontFamily = (string)value;
                        NativeControl.FontFamily = FontFamily;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (double?)value;
                        NativeControl.FontSize = FontSize ?? (double)SMT.ButtonBase.FontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalTextAlignment):
                    if (!Equals(HorizontalTextAlignment, value))
                    {
                        HorizontalTextAlignment = (TextAlignment?)value;
                        NativeControl.HorizontalTextAlignment = HorizontalTextAlignment ?? (TextAlignment)SMT.ButtonBase.HorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(ImageAlignment):
                    if (!Equals(ImageAlignment, value))
                    {
                        ImageAlignment = (SMT.Chips.Alignment?)value;
                        NativeControl.ImageAlignment = ImageAlignment ?? (SMT.Chips.Alignment)SMT.ButtonBase.ImageAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(ImageSize):
                    if (!Equals(ImageSize, value))
                    {
                        ImageSize = (double?)value;
                        NativeControl.ImageSize = ImageSize ?? (double)SMT.ButtonBase.ImageSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(ImageSource):
                    if (!Equals(ImageSource, value))
                    {
                        ImageSource = (MC.ImageSource)value;
                        NativeControl.ImageSource = ImageSource;
                    }
                    break;
                case nameof(Padding):
                    if (!Equals(Padding, value))
                    {
                        Padding = (Thickness?)value;
                        NativeControl.Padding = Padding ?? (Thickness)SMT.ButtonBase.PaddingProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowIcon):
                    if (!Equals(ShowIcon, value))
                    {
                        ShowIcon = (bool?)value;
                        NativeControl.ShowIcon = ShowIcon ?? (bool)SMT.ButtonBase.ShowIconProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(StrokeThickness):
                    if (!Equals(StrokeThickness, value))
                    {
                        StrokeThickness = (double?)value;
                        NativeControl.StrokeThickness = StrokeThickness ?? (double)SMT.ButtonBase.StrokeThicknessProperty.DefaultValue;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(TextColor):
                    if (!Equals(TextColor, value))
                    {
                        TextColor = (Color)value;
                        NativeControl.TextColor = TextColor;
                    }
                    break;
                case nameof(VerticalTextAlignment):
                    if (!Equals(VerticalTextAlignment, value))
                    {
                        VerticalTextAlignment = (TextAlignment?)value;
                        NativeControl.VerticalTextAlignment = VerticalTextAlignment ?? (TextAlignment)SMT.ButtonBase.VerticalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;
                case nameof(OnClick):
                    if (!Equals(OnClick, value))
                    {
                        void NativeControlClicked(object sender, EventArgs e) => InvokeEventCallback(OnClick);

                        OnClick = (EventCallback)value;
                        NativeControl.Clicked -= NativeControlClicked;
                        NativeControl.Clicked += NativeControlClicked;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMT.ButtonBase>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMT.ButtonBase>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
