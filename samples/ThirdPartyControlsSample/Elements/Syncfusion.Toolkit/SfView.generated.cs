// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using SMT = Syncfusion.Maui.Toolkit;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit
{
    /// <summary>
    /// Represents an abstract base class for custom views. This class provides common functionality and serves as a foundation for building custom drawable layouts, and visual tree elements.
    /// </summary>
    public abstract partial class SfView : BlazorBindings.Maui.Elements.View
    {
        static SfView()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether the content of this view is clipped to its bounds.
        /// </summary>
        [Parameter] public bool? ClipToBounds { get; set; }
        /// <summary>
        /// Gets or sets the padding for the view.
        /// </summary>
        [Parameter] public Thickness? Padding { get; set; }
        /// <summary>
        /// Gets the collection of child views contained within this view.
        /// </summary>
        /// <remarks>
        /// Accepts one or more IView elements.
        /// </remarks>
        [Parameter] public RenderFragment Children { get; set; }
        /// <remarks>
        /// Accepts one or more IView elements.
        /// </remarks>
        [Parameter] public RenderFragment ChildContent { get; set; }

        public new SMT.SfView NativeControl => (SMT.SfView)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ClipToBounds):
                    if (!Equals(ClipToBounds, value))
                    {
                        ClipToBounds = (bool?)value;
                        NativeControl.ClipToBounds = ClipToBounds ?? default;
                    }
                    break;
                case nameof(Padding):
                    if (!Equals(Padding, value))
                    {
                        Padding = (Thickness?)value;
                        NativeControl.Padding = Padding ?? default;
                    }
                    break;
                case nameof(Children):
                    Children = (RenderFragment)value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddListContentProperty<SMT.SfView, IView>(builder, sequence++, Children, x => x.Children);
            RenderTreeBuilderHelper.AddListContentProperty<SMT.SfView, IView>(builder, sequence++, ChildContent, x => x);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
