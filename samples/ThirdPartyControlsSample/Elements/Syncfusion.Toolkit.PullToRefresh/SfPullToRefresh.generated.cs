// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTP = Syncfusion.Maui.Toolkit.PullToRefresh;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.PullToRefresh
{
    /// <summary>
    /// <see cref="T:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh" /> enables interaction to refresh the loaded view. This control allows users to trigger a refresh action by performing the pull-to-refresh gesture.
    /// </summary>
    public partial class SfPullToRefresh : BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Internals.PullToRefreshBase
    {
        static SfPullToRefresh()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether <see cref="P:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.PullableContent" /> touch interactions should be allowed or not.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Boolean" />. The default value is false.
        /// </value>
        [Parameter] public bool? CanRestrictChildTouch { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether <see cref="T:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh" /> is in refreshing state.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Boolean" />. The default value is false.
        /// </value>
        [Parameter] public bool? IsRefreshing { get; set; }
        /// <summary>
        /// Gets or sets the background of the <see cref="P:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.ProgressCircleView" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" />. The default background is Color.FromArgb("#F3EDF7").
        /// </value>
        [Parameter] public Color ProgressBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the color of the <see cref="P:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.ProgressCircleView" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Graphics.Color" />. The default color is Color.FromArgb("6750A4").
        /// </value>
        [Parameter] public Color ProgressColor { get; set; }
        /// <summary>
        /// Gets or sets the thickness of the <see cref="P:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.ProgressCircleView" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" />. The default value is 3d.
        /// </value>
        [Parameter] public double? ProgressThickness { get; set; }
        /// <summary>
        /// Gets or sets the maximum pulling Y position of the <see cref="P:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.ProgressCircleView" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" />. The default value is 200d.
        /// </value>
        [Parameter] public double? PullingThreshold { get; set; }
        /// <summary>
        /// Gets or sets the height of the <see cref="P:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.ProgressCircleView" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" />. The default value is 48d.
        /// </value>
        [Parameter] public double? RefreshViewHeight { get; set; }
        /// <summary>
        /// Gets or sets the starting position of the progress circle view in <see cref="F:Syncfusion.Maui.Toolkit.PullToRefresh.PullToRefreshTransitionType.SlideOnTop" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" />. The default value is 50d.
        /// </value>
        [Parameter] public double? RefreshViewThreshold { get; set; }
        /// <summary>
        /// Gets or sets the width of the <see cref="P:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.ProgressCircleView" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" />. The default value is 48d.
        /// </value>
        [Parameter] public double? RefreshViewWidth { get; set; }
        /// <summary>
        /// Gets or sets the transition mode of <see cref="T:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.PullToRefresh.PullToRefreshTransitionType" />. The default is <see cref="F:Syncfusion.Maui.Toolkit.PullToRefresh.PullToRefreshTransitionType.SlideOnTop" />.
        /// </value>
        [Parameter] public SMTP.PullToRefreshTransitionType? TransitionMode { get; set; }
        /// <summary>
        /// Gets or sets the background of the <see cref="P:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.ProgressCircleView" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" />. The default background is Color.FromArgb("#F3EDF7").
        /// </value>
        [Parameter] public RenderFragment ProgressBackground { get; set; }
        /// <summary>
        /// Gets or sets the pullable content of <see cref="T:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.View" />. The default value is null.
        /// </value>
        [Parameter] public RenderFragment PullableContent { get; set; }
        /// <summary>
        /// Gets or sets the template to be displayed as the refresh content when <see cref="E:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.Pulling" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.DataTemplate" />. The default value is null.
        /// </value>
        [Parameter] public RenderFragment PullingViewTemplate { get; set; }
        /// <summary>
        /// Gets or sets the template to be displayed as the refresh content on <see cref="E:Syncfusion.Maui.Toolkit.PullToRefresh.SfPullToRefresh.Refreshing" />.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.DataTemplate" />. The default value is null.
        /// </value>
        [Parameter] public RenderFragment RefreshingViewTemplate { get; set; }
        [Parameter] public EventCallback<SMTP.PullingEventArgs> OnPulling { get; set; }
        [Parameter] public EventCallback<bool> IsRefreshingChanged { get; set; }
        [Parameter] public EventCallback OnRefreshed { get; set; }

        public new SMTP.SfPullToRefresh NativeControl => (SMTP.SfPullToRefresh)((BindableObject)this).NativeControl;

        protected override SMTP.SfPullToRefresh CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CanRestrictChildTouch):
                    if (!Equals(CanRestrictChildTouch, value))
                    {
                        CanRestrictChildTouch = (bool?)value;
                        NativeControl.CanRestrictChildTouch = CanRestrictChildTouch ?? (bool)SMTP.SfPullToRefresh.CanRestrictChildTouchProperty.DefaultValue;
                    }
                    break;
                case nameof(IsRefreshing):
                    if (!Equals(IsRefreshing, value))
                    {
                        IsRefreshing = (bool?)value;
                        NativeControl.IsRefreshing = IsRefreshing ?? (bool)SMTP.SfPullToRefresh.IsRefreshingProperty.DefaultValue;
                    }
                    break;
                case nameof(ProgressBackgroundColor):
                    if (!Equals(ProgressBackgroundColor, value))
                    {
                        ProgressBackgroundColor = (Color)value;
                        NativeControl.ProgressBackground = ProgressBackgroundColor;
                    }
                    break;
                case nameof(ProgressColor):
                    if (!Equals(ProgressColor, value))
                    {
                        ProgressColor = (Color)value;
                        NativeControl.ProgressColor = ProgressColor;
                    }
                    break;
                case nameof(ProgressThickness):
                    if (!Equals(ProgressThickness, value))
                    {
                        ProgressThickness = (double?)value;
                        NativeControl.ProgressThickness = ProgressThickness ?? (double)SMTP.SfPullToRefresh.ProgressThicknessProperty.DefaultValue;
                    }
                    break;
                case nameof(PullingThreshold):
                    if (!Equals(PullingThreshold, value))
                    {
                        PullingThreshold = (double?)value;
                        NativeControl.PullingThreshold = PullingThreshold ?? (double)SMTP.SfPullToRefresh.PullingThresholdProperty.DefaultValue;
                    }
                    break;
                case nameof(RefreshViewHeight):
                    if (!Equals(RefreshViewHeight, value))
                    {
                        RefreshViewHeight = (double?)value;
                        NativeControl.RefreshViewHeight = RefreshViewHeight ?? (double)SMTP.SfPullToRefresh.RefreshViewHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(RefreshViewThreshold):
                    if (!Equals(RefreshViewThreshold, value))
                    {
                        RefreshViewThreshold = (double?)value;
                        NativeControl.RefreshViewThreshold = RefreshViewThreshold ?? (double)SMTP.SfPullToRefresh.RefreshViewThresholdProperty.DefaultValue;
                    }
                    break;
                case nameof(RefreshViewWidth):
                    if (!Equals(RefreshViewWidth, value))
                    {
                        RefreshViewWidth = (double?)value;
                        NativeControl.RefreshViewWidth = RefreshViewWidth ?? (double)SMTP.SfPullToRefresh.RefreshViewWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(TransitionMode):
                    if (!Equals(TransitionMode, value))
                    {
                        TransitionMode = (SMTP.PullToRefreshTransitionType?)value;
                        NativeControl.TransitionMode = TransitionMode ?? (SMTP.PullToRefreshTransitionType)SMTP.SfPullToRefresh.TransitionModeProperty.DefaultValue;
                    }
                    break;
                case nameof(ProgressBackground):
                    ProgressBackground = (RenderFragment)value;
                    break;
                case nameof(PullableContent):
                    PullableContent = (RenderFragment)value;
                    break;
                case nameof(PullingViewTemplate):
                    PullingViewTemplate = (RenderFragment)value;
                    break;
                case nameof(RefreshingViewTemplate):
                    RefreshingViewTemplate = (RenderFragment)value;
                    break;
                case nameof(OnPulling):
                    if (!Equals(OnPulling, value))
                    {
                        void NativeControlPulling(object sender, SMTP.PullingEventArgs e) => InvokeEventCallback(OnPulling, e);

                        OnPulling = (EventCallback<SMTP.PullingEventArgs>)value;
                        NativeControl.Pulling -= NativeControlPulling;
                        NativeControl.Pulling += NativeControlPulling;
                    }
                    break;
                case nameof(IsRefreshingChanged):
                    if (!Equals(IsRefreshingChanged, value))
                    {
                        void NativeControlRefreshing(object sender, EventArgs e)
                        {
                            var value = NativeControl.IsRefreshing;
                            IsRefreshing = value;
                            InvokeEventCallback(IsRefreshingChanged, value);
                        }

                        IsRefreshingChanged = (EventCallback<bool>)value;
                        NativeControl.Refreshing -= NativeControlRefreshing;
                        NativeControl.Refreshing += NativeControlRefreshing;
                    }
                    break;
                case nameof(OnRefreshed):
                    if (!Equals(OnRefreshed, value))
                    {
                        void NativeControlRefreshed(object sender, EventArgs e) => InvokeEventCallback(OnRefreshed);

                        OnRefreshed = (EventCallback)value;
                        NativeControl.Refreshed -= NativeControlRefreshed;
                        NativeControl.Refreshed += NativeControlRefreshed;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTP.SfPullToRefresh>(builder, sequence++, ProgressBackground, (x, value) => x.ProgressBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTP.SfPullToRefresh>(builder, sequence++, PullableContent, (x, value) => x.PullableContent = (MC.View)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTP.SfPullToRefresh>(builder, sequence++, PullingViewTemplate, (x, template) => x.PullingViewTemplate = template);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTP.SfPullToRefresh>(builder, sequence++, RefreshingViewTemplate, (x, template) => x.RefreshingViewTemplate = template);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
