// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using System;
using System.Threading.Tasks;
using TMB = The49.Maui.BottomSheet;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.The49.BottomSheet
{
    public partial class BottomSheet : BlazorBindings.Maui.Elements.ContentView
    {
        static BottomSheet()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public double? CornerRadius { get; set; }
        [Parameter] public Color HandleColor { get; set; }
        [Parameter] public bool? HasBackdrop { get; set; }
        [Parameter] public bool? HasHandle { get; set; }
        [Parameter] public bool? IsCancelable { get; set; }
        [Parameter] public RenderFragment Detents { get; set; }
        [Parameter] public EventCallback<TMB.DismissOrigin> OnDismissed { get; set; }
        [Parameter] public EventCallback OnShowing { get; set; }
        [Parameter] public EventCallback OnShown { get; set; }

        public new TMB.BottomSheet NativeControl => (TMB.BottomSheet)((BindableObject)this).NativeControl;

        protected override TMB.BottomSheet CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (double?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (double)TMB.BottomSheet.CornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(HandleColor):
                    if (!Equals(HandleColor, value))
                    {
                        HandleColor = (Color)value;
                        NativeControl.HandleColor = HandleColor;
                    }
                    break;
                case nameof(HasBackdrop):
                    if (!Equals(HasBackdrop, value))
                    {
                        HasBackdrop = (bool?)value;
                        NativeControl.HasBackdrop = HasBackdrop ?? (bool)TMB.BottomSheet.HasBackdropProperty.DefaultValue;
                    }
                    break;
                case nameof(HasHandle):
                    if (!Equals(HasHandle, value))
                    {
                        HasHandle = (bool?)value;
                        NativeControl.HasHandle = HasHandle ?? (bool)TMB.BottomSheet.HasHandleProperty.DefaultValue;
                    }
                    break;
                case nameof(IsCancelable):
                    if (!Equals(IsCancelable, value))
                    {
                        IsCancelable = (bool?)value;
                        NativeControl.IsCancelable = IsCancelable ?? (bool)TMB.BottomSheet.IsCancelableProperty.DefaultValue;
                    }
                    break;
                case nameof(Detents):
                    Detents = (RenderFragment)value;
                    break;
                case nameof(OnDismissed):
                    if (!Equals(OnDismissed, value))
                    {
                        void NativeControlDismissed(object sender, TMB.DismissOrigin e) => InvokeEventCallback(OnDismissed, e);

                        OnDismissed = (EventCallback<TMB.DismissOrigin>)value;
                        NativeControl.Dismissed -= NativeControlDismissed;
                        NativeControl.Dismissed += NativeControlDismissed;
                    }
                    break;
                case nameof(OnShowing):
                    if (!Equals(OnShowing, value))
                    {
                        void NativeControlShowing(object sender, EventArgs e) => InvokeEventCallback(OnShowing);

                        OnShowing = (EventCallback)value;
                        NativeControl.Showing -= NativeControlShowing;
                        NativeControl.Showing += NativeControlShowing;
                    }
                    break;
                case nameof(OnShown):
                    if (!Equals(OnShown, value))
                    {
                        void NativeControlShown(object sender, EventArgs e) => InvokeEventCallback(OnShown);

                        OnShown = (EventCallback)value;
                        NativeControl.Shown -= NativeControlShown;
                        NativeControl.Shown += NativeControlShown;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddListContentProperty<TMB.BottomSheet, TMB.Detent>(builder, sequence++, Detents, x => x.Detents);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
