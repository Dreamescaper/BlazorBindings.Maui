// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMTN = Syncfusion.Maui.Toolkit.NumericEntry;
using System;
using System.Globalization;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.NumericEntry
{
    /// <summary>
    /// Represents a control that can be used to display and edit numbers.
    /// </summary>
    public partial class SfNumericEntry : BlazorBindings.Maui.Elements.Syncfusion.Toolkit.SfView
    {
        static SfNumericEntry()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether the <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" /> allows null value or not.
        /// </summary>
        /// <value>
        /// <b>true</b> when <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" /> allows null value input, otherwise <b>false</b>. The default value is <b>true</b>.
        /// </value>
        [Parameter] public bool? AllowNull { get; set; }
        /// <summary>
        /// Gets or sets a color that describes the color of clear button.
        /// </summary>
        /// <value>
        /// The default value is Colors.Black.
        /// </value>
        [Parameter] public Color ClearButtonColor { get; set; }
        /// <summary>
        /// Gets or sets the culture for <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" />.
        /// </summary>
        /// <value>
        /// The default value is <c>"en-US"</c>.
        /// </value>
        [Parameter] public CultureInfo Culture { get; set; }
        /// <summary>
        /// Gets or sets the cursor position of the <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" /> control.
        /// </summary>
        /// <value>
        /// The default value is 0.
        /// </value>
        [Parameter] public int? CursorPosition { get; set; }
        /// <summary>
        /// Gets or sets the format used to specify the formatting of <see cref="P:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry.Value" />.
        /// </summary>
        /// <value>
        /// The default value is <c>null</c>.
        /// </value>
        [Parameter] public string CustomFormat { get; set; }
        /// <summary>
        /// Gets or sets the value that indicates whether the font for the NumericEntry text is bold,italic, or neither.
        /// </summary>
        /// <value>
        /// Specifies the font attributes.The default value is <see cref="F:Microsoft.Maui.Controls.FontAttributes.None" />
        /// </value>
        [Parameter] public MC.FontAttributes? FontAttributes { get; set; }
        /// <summary>
        /// Enables automatic font size adjustment based on device settings.
        /// </summary>
        /// <value>
        /// The default value is false.
        /// </value>
        [Parameter] public bool? FontAutoScalingEnabled { get; set; }
        /// <summary>
        /// Gets or sets the font family for the text of <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" />.
        /// </summary>
        /// <value>
        /// Specifies the font family.The default value is string.empty.
        /// </value>
        [Parameter] public string FontFamily { get; set; }
        /// <summary>
        /// Gets or sets the value of FontSize. This property can be used to the size of the font for <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" />.
        /// </summary>
        /// <value>
        /// Specifies the font size.The default value is 14d.
        /// </value>
        [Parameter] public double? FontSize { get; set; }
        /// <summary>
        /// Gets or sets a value to change the horizontal alignment of text within the NumericEntry control.
        /// </summary>
        /// <value>
        /// Specifies the text alignment.The default value is <see cref="F:Microsoft.Maui.TextAlignment.Start" />.
        /// </value>
        [Parameter] public TextAlignment? HorizontalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" /> allows editing the value or not.
        /// </summary>
        /// <value>
        /// <b>true</b> when <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" /> is editable, otherwise <b>false</b>. The default value is <b>true</b>.
        /// </value>
        [Parameter] public bool? IsEditable { get; set; }
        /// <summary>
        /// Gets or sets the numerical maximum for <see cref="P:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry.Value" />.
        /// </summary>
        /// <value>
        /// The default value is <see cref="F:System.Double.MaxValue" />.
        /// </value>
        [Parameter] public double? Maximum { get; set; }
        /// <summary>
        /// Gets or sets the maximum number of decimal digits allowed in the numeric input.
        /// </summary>
        /// <value>
        /// The default value is 2.
        /// </value>
        [Parameter] public int? MaximumNumberDecimalDigits { get; set; }
        /// <summary>
        /// Gets or sets the numerical minimum for <see cref="P:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry.Value" />.
        /// </summary>
        /// <value>
        /// The default value is <see cref="F:System.Double.MinValue" />
        /// </value>
        [Parameter] public double? Minimum { get; set; }
        /// <summary>
        /// Gets or sets the percent display mode that parses the entered text as percentage in specified mode.
        /// </summary>
        /// <value>
        /// The default value is <see cref="F:Syncfusion.Maui.Toolkit.NumericEntry.PercentDisplayMode.Compute" />.
        /// </value>
        [Parameter] public SMTN.PercentDisplayMode? PercentDisplayMode { get; set; }
        /// <summary>
        /// Gets or sets the text that is displayed in the control until the value is changed by a user action or some other operation.
        /// </summary>
        /// <value>
        /// The default value is <c>String.Empty</c>
        /// </value>
        [Parameter] public string Placeholder { get; set; }
        /// <summary>
        /// Gets or sets a color that describes the color of placeholder text.
        /// </summary>
        /// <value>
        /// The default value is Colors.Black.
        /// </value>
        [Parameter] public Color PlaceholderColor { get; set; }
        /// <summary>
        /// Gets or sets the value of ReturnType. This property can be used to set the ReturnType.
        /// </summary>
        /// <value>
        /// The default value is Default
        /// </value>
        [Parameter] public ReturnType? ReturnType { get; set; }
        /// <summary>
        /// Gets or sets the selection length of the <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" /> control.
        /// </summary>
        /// <value>
        /// The default value is 0.
        /// </value>
        [Parameter] public int? SelectionLength { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to show or hide the border in SfNumericEntry.
        /// </summary>
        /// <value>
        /// The default value is <c>true</c>
        /// </value>
        [Parameter] public bool? ShowBorder { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to show or hide the clear button in SfNumericEntry.
        /// </summary>
        /// <value>
        /// The default value is <c>true</c>.
        /// </value>
        [Parameter] public bool? ShowClearButton { get; set; }
        /// <summary>
        /// Gets or sets a color that describes the stroke.
        /// </summary>
        /// <value>
        /// The default value is <c>Colors.LightGray</c>
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets the color for the text of the <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" /> control.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Graphics.Color" /> values and the default value is Colors.Black.
        /// </value>
        [Parameter] public Color TextColor { get; set; }
        /// <summary>
        /// Gets or sets the numeric value of a <see cref="T:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry" />.
        /// </summary>
        /// <value>
        /// The default value is <c>null</c>.
        /// </value>
        [Parameter] public Nullable<double> Value { get; set; }
        /// <summary>
        /// Gets or sets whether the value should be updated or not based on this property while entering the value.
        /// </summary>
        /// <value>
        /// The default value is <see cref="F:Syncfusion.Maui.Toolkit.NumericEntry.ValueChangeMode.OnLostFocus" />
        /// </value>
        [Parameter] public SMTN.ValueChangeMode? ValueChangeMode { get; set; }
        /// <summary>
        /// Gets or sets a value to change the vertical alignment of text within the NumericEntry control.
        /// </summary>
        /// <value>
        /// Specifies the text alignment.The default value is <see cref="F:Microsoft.Maui.TextAlignment.Center" />.
        /// </value>
        [Parameter] public TextAlignment? VerticalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets the path to customize the appearance of the clear button in the NumericEntry control.
        /// </summary>
        /// <value>
        /// The default value is null.
        /// </value>
        [Parameter] public RenderFragment ClearButtonPath { get; set; }
        /// <summary>
        /// Gets or sets a color that describes the stroke.
        /// </summary>
        /// <value>
        /// The default value is <c>Colors.LightGray</c>
        /// </value>
        [Parameter] public RenderFragment Stroke { get; set; }
        [Parameter] public EventCallback<Nullable<double>> ValueChanged { get; set; }
        [Parameter] public EventCallback OnCompleted { get; set; }
        [Parameter] public new EventCallback<MC.FocusEventArgs> OnFocused { get; set; }
        [Parameter] public new EventCallback<MC.FocusEventArgs> OnUnfocused { get; set; }

        public new SMTN.SfNumericEntry NativeControl => (SMTN.SfNumericEntry)((BindableObject)this).NativeControl;

        protected override SMTN.SfNumericEntry CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AllowNull):
                    if (!Equals(AllowNull, value))
                    {
                        AllowNull = (bool?)value;
                        NativeControl.AllowNull = AllowNull ?? (bool)SMTN.SfNumericEntry.AllowNullProperty.DefaultValue;
                    }
                    break;
                case nameof(ClearButtonColor):
                    if (!Equals(ClearButtonColor, value))
                    {
                        ClearButtonColor = (Color)value;
                        NativeControl.ClearButtonColor = ClearButtonColor;
                    }
                    break;
                case nameof(Culture):
                    if (!Equals(Culture, value))
                    {
                        Culture = (CultureInfo)value;
                        NativeControl.Culture = Culture;
                    }
                    break;
                case nameof(CursorPosition):
                    if (!Equals(CursorPosition, value))
                    {
                        CursorPosition = (int?)value;
                        NativeControl.CursorPosition = CursorPosition ?? (int)SMTN.SfNumericEntry.CursorPositionProperty.DefaultValue;
                    }
                    break;
                case nameof(CustomFormat):
                    if (!Equals(CustomFormat, value))
                    {
                        CustomFormat = (string)value;
                        NativeControl.CustomFormat = CustomFormat;
                    }
                    break;
                case nameof(FontAttributes):
                    if (!Equals(FontAttributes, value))
                    {
                        FontAttributes = (MC.FontAttributes?)value;
                        NativeControl.FontAttributes = FontAttributes ?? (MC.FontAttributes)SMTN.SfNumericEntry.FontAttributesProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAutoScalingEnabled):
                    if (!Equals(FontAutoScalingEnabled, value))
                    {
                        FontAutoScalingEnabled = (bool?)value;
                        NativeControl.FontAutoScalingEnabled = FontAutoScalingEnabled ?? (bool)SMTN.SfNumericEntry.FontAutoScalingEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(FontFamily):
                    if (!Equals(FontFamily, value))
                    {
                        FontFamily = (string)value;
                        NativeControl.FontFamily = FontFamily;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (double?)value;
                        NativeControl.FontSize = FontSize ?? (double)SMTN.SfNumericEntry.FontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalTextAlignment):
                    if (!Equals(HorizontalTextAlignment, value))
                    {
                        HorizontalTextAlignment = (TextAlignment?)value;
                        NativeControl.HorizontalTextAlignment = HorizontalTextAlignment ?? (TextAlignment)SMTN.SfNumericEntry.HorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(IsEditable):
                    if (!Equals(IsEditable, value))
                    {
                        IsEditable = (bool?)value;
                        NativeControl.IsEditable = IsEditable ?? (bool)SMTN.SfNumericEntry.IsEditableProperty.DefaultValue;
                    }
                    break;
                case nameof(Maximum):
                    if (!Equals(Maximum, value))
                    {
                        Maximum = (double?)value;
                        NativeControl.Maximum = Maximum ?? (double)SMTN.SfNumericEntry.MaximumProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumNumberDecimalDigits):
                    if (!Equals(MaximumNumberDecimalDigits, value))
                    {
                        MaximumNumberDecimalDigits = (int?)value;
                        NativeControl.MaximumNumberDecimalDigits = MaximumNumberDecimalDigits ?? (int)SMTN.SfNumericEntry.MaximumNumberDecimalDigitsProperty.DefaultValue;
                    }
                    break;
                case nameof(Minimum):
                    if (!Equals(Minimum, value))
                    {
                        Minimum = (double?)value;
                        NativeControl.Minimum = Minimum ?? (double)SMTN.SfNumericEntry.MinimumProperty.DefaultValue;
                    }
                    break;
                case nameof(PercentDisplayMode):
                    if (!Equals(PercentDisplayMode, value))
                    {
                        PercentDisplayMode = (SMTN.PercentDisplayMode?)value;
                        NativeControl.PercentDisplayMode = PercentDisplayMode ?? (SMTN.PercentDisplayMode)SMTN.SfNumericEntry.PercentDisplayModeProperty.DefaultValue;
                    }
                    break;
                case nameof(Placeholder):
                    if (!Equals(Placeholder, value))
                    {
                        Placeholder = (string)value;
                        NativeControl.Placeholder = Placeholder;
                    }
                    break;
                case nameof(PlaceholderColor):
                    if (!Equals(PlaceholderColor, value))
                    {
                        PlaceholderColor = (Color)value;
                        NativeControl.PlaceholderColor = PlaceholderColor;
                    }
                    break;
                case nameof(ReturnType):
                    if (!Equals(ReturnType, value))
                    {
                        ReturnType = (ReturnType?)value;
                        NativeControl.ReturnType = ReturnType ?? (ReturnType)SMTN.SfNumericEntry.ReturnTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectionLength):
                    if (!Equals(SelectionLength, value))
                    {
                        SelectionLength = (int?)value;
                        NativeControl.SelectionLength = SelectionLength ?? (int)SMTN.SfNumericEntry.SelectionLengthProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowBorder):
                    if (!Equals(ShowBorder, value))
                    {
                        ShowBorder = (bool?)value;
                        NativeControl.ShowBorder = ShowBorder ?? (bool)SMTN.SfNumericEntry.ShowBorderProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowClearButton):
                    if (!Equals(ShowClearButton, value))
                    {
                        ShowClearButton = (bool?)value;
                        NativeControl.ShowClearButton = ShowClearButton ?? (bool)SMTN.SfNumericEntry.ShowClearButtonProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(TextColor):
                    if (!Equals(TextColor, value))
                    {
                        TextColor = (Color)value;
                        NativeControl.TextColor = TextColor;
                    }
                    break;
                case nameof(Value):
                    if (!Equals(Value, value))
                    {
                        Value = (Nullable<double>)value;
                        NativeControl.Value = Value;
                    }
                    break;
                case nameof(ValueChangeMode):
                    if (!Equals(ValueChangeMode, value))
                    {
                        ValueChangeMode = (SMTN.ValueChangeMode?)value;
                        NativeControl.ValueChangeMode = ValueChangeMode ?? (SMTN.ValueChangeMode)SMTN.SfNumericEntry.ValueChangeModeProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalTextAlignment):
                    if (!Equals(VerticalTextAlignment, value))
                    {
                        VerticalTextAlignment = (TextAlignment?)value;
                        NativeControl.VerticalTextAlignment = VerticalTextAlignment ?? (TextAlignment)SMTN.SfNumericEntry.VerticalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(ClearButtonPath):
                    ClearButtonPath = (RenderFragment)value;
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;
                case nameof(ValueChanged):
                    if (!Equals(ValueChanged, value))
                    {
                        void NativeControlValueChanged(object sender, SMTN.NumericEntryValueChangedEventArgs e)
                        {
                            var value = NativeControl.Value;
                            Value = value;
                            InvokeEventCallback(ValueChanged, value);
                        }

                        ValueChanged = (EventCallback<Nullable<double>>)value;
                        NativeControl.ValueChanged -= NativeControlValueChanged;
                        NativeControl.ValueChanged += NativeControlValueChanged;
                    }
                    break;
                case nameof(OnCompleted):
                    if (!Equals(OnCompleted, value))
                    {
                        void NativeControlCompleted(object sender, EventArgs e) => InvokeEventCallback(OnCompleted);

                        OnCompleted = (EventCallback)value;
                        NativeControl.Completed -= NativeControlCompleted;
                        NativeControl.Completed += NativeControlCompleted;
                    }
                    break;
                case nameof(OnFocused):
                    if (!Equals(OnFocused, value))
                    {
                        void NativeControlFocused(object sender, MC.FocusEventArgs e) => InvokeEventCallback(OnFocused, e);

                        OnFocused = (EventCallback<MC.FocusEventArgs>)value;
                        NativeControl.Focused -= NativeControlFocused;
                        NativeControl.Focused += NativeControlFocused;
                    }
                    break;
                case nameof(OnUnfocused):
                    if (!Equals(OnUnfocused, value))
                    {
                        void NativeControlUnfocused(object sender, MC.FocusEventArgs e) => InvokeEventCallback(OnUnfocused, e);

                        OnUnfocused = (EventCallback<MC.FocusEventArgs>)value;
                        NativeControl.Unfocused -= NativeControlUnfocused;
                        NativeControl.Unfocused += NativeControlUnfocused;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTN.SfNumericEntry>(builder, sequence++, ClearButtonPath, (x, value) => x.ClearButtonPath = (MC.Shapes.Path)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTN.SfNumericEntry>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
