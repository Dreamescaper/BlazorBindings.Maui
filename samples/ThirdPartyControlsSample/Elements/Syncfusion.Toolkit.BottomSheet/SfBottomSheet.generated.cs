// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMTB = Syncfusion.Maui.Toolkit.BottomSheet;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.BottomSheet
{
    /// <summary>
    /// Represents the <see cref="T:Syncfusion.Maui.Toolkit.BottomSheet.SfBottomSheet" /> control that displays from the bottom of the screen.
    /// </summary>
    public partial class SfBottomSheet : BlazorBindings.Maui.Elements.Syncfusion.Toolkit.SfView
    {
        static SfBottomSheet()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that indicates the allowed states for the bottom sheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetAllowedState" /> value. The default is <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetAllowedState.All" />. Possible values are: - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetAllowedState.All" /> - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetAllowedState.HalfExpanded" /> - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetAllowedState.FullExpanded" />
        /// </value>
        [Parameter] public SMTB.BottomSheetAllowedState? AllowedState { get; set; }
        /// <summary>
        /// Specifies the custom width value (in pixels) for the BottomSheet when ContentWidthMode is set to Custom.
        /// </summary>
        [Parameter] public double? BottomSheetContentWidth { get; set; }
        /// <summary>
        /// Gets or sets the height of the bottom sheet in collapsed state.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Double" /> value representing the height in device-independent units. The default value is 100.
        /// </value>
        [Parameter] public double? CollapsedHeight { get; set; }
        /// <summary>
        /// Gets or sets the padding of the content in SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Thickness" /> value representing the padding. The default value is 5 on all sides.
        /// </value>
        [Parameter] public Thickness? ContentPadding { get; set; }
        /// <summary>
        /// Gets or sets a value that customizes the content width for the bottom sheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetContentWidthMode" /> value. The default is <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetContentWidthMode.Full" />. Possible values are: - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetContentWidthMode.Full" /> - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetContentWidthMode.Custom" />
        /// </value>
        [Parameter] public SMTB.BottomSheetContentWidthMode? ContentWidthMode { get; set; }
        /// <summary>
        /// Gets or sets the corner radius of the SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="P:Syncfusion.Maui.Toolkit.BottomSheet.SfBottomSheet.CornerRadius" /> value. The default value is 0.
        /// </value>
        [Parameter] public CornerRadius? CornerRadius { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether swiping is enabled in the SfBottomSheet control.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Boolean" /> value. The default value is <c>true</c>.
        /// </value>
        [Parameter] public bool? EnableSwiping { get; set; }
        /// <summary>
        /// Gets or sets the height ratio of the bottom sheet in full-expanded state.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Double" /> value between 0 and 1. The default value is 1.
        /// </value>
        [Parameter] public double? FullExpandedRatio { get; set; }
        /// <summary>
        /// Gets or sets the background color of the grabber in SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.Brush" /> value representing the grabber's background color.
        /// </value>
        [Parameter] public Color GrabberBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the corner radius of the grabber in SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="P:Syncfusion.Maui.Toolkit.BottomSheet.SfBottomSheet.CornerRadius" /> value. The default value is 0 for all corners.
        /// </value>
        [Parameter] public CornerRadius? GrabberCornerRadius { get; set; }
        /// <summary>
        /// Gets or sets the height of the grabber in SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Double" /> value representing the height in device-independent units. The default value is 4.
        /// </value>
        [Parameter] public double? GrabberHeight { get; set; }
        /// <summary>
        /// Gets or sets the width of the grabber in SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Double" /> value representing the width in device-independent units. The default value is 32.
        /// </value>
        [Parameter] public double? GrabberWidth { get; set; }
        /// <summary>
        /// Gets or sets the height ratio of the bottom sheet in half-expanded state.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Double" /> value between 0 and 1. The default value is 0.5.
        /// </value>
        [Parameter] public double? HalfExpandedRatio { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the SfBottomSheet acts as a modal dialog.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Boolean" /> value. The default value is <c>true</c>.
        /// </value>
        [Parameter] public bool? IsModal { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the SfBottomSheet is opened or not.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Boolean" /> value. The default value is <c>false</c>.
        /// </value>
        [Parameter] public bool? IsOpen { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to show the drag handle (grabber) in the SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Boolean" /> value. The default value is <c>true</c>.
        /// </value>
        [Parameter] public bool? ShowGrabber { get; set; }
        /// <summary>
        /// Gets or sets the expanded state of the SfBottomSheet control.
        /// </summary>
        /// <value>
        /// A <see cref="T:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetState" /> value. The default is <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetState.Hidden" />. Possible values are: - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetState.Hidden" /> - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetState.Collapsed" /> - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetState.HalfExpanded" /> - <see cref="F:Syncfusion.Maui.Toolkit.BottomSheet.BottomSheetState.FullExpanded" />
        /// </value>
        [Parameter] public SMTB.BottomSheetState? State { get; set; }
        /// <summary>
        /// Gets or sets the background of the SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.Brush" /> value representing the background.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public new RenderFragment Background { get; set; }
        /// <summary>
        /// Gets or sets the content of the SfBottomSheet control.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.View" /> that represents the content of the bottom sheet.
        /// </value>
        /// <remarks>
        /// Accepts single View element.
        /// </remarks>
        [Parameter] public RenderFragment BottomSheetContent { get; set; }
        /// <summary>
        /// Gets or sets the view that can be used to customize the main content of the SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.View" /> that represents the content view of the bottom sheet.
        /// </value>
        /// <remarks>
        /// Accepts single View element.
        /// </remarks>
        [Parameter] public new RenderFragment ChildContent { get; set; }
        /// <summary>
        /// Gets or sets the background color of the grabber in SfBottomSheet.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.Brush" /> value representing the grabber's background color.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment GrabberBackground { get; set; }
        /// <summary>
        /// Invoke the event when the state of <see cref="T:Syncfusion.Maui.Toolkit.BottomSheet.SfBottomSheet" /> is changed.
        /// </summary>
        [Parameter] public EventCallback<SMTB.BottomSheetState> StateChanged { get; set; }

        public new SMTB.SfBottomSheet NativeControl => (SMTB.SfBottomSheet)((BindableObject)this).NativeControl;

        protected override SMTB.SfBottomSheet CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AllowedState):
                    if (!Equals(AllowedState, value))
                    {
                        AllowedState = (SMTB.BottomSheetAllowedState?)value;
                        NativeControl.AllowedState = AllowedState ?? (SMTB.BottomSheetAllowedState)SMTB.SfBottomSheet.AllowedStateProperty.DefaultValue;
                    }
                    break;
                case nameof(BottomSheetContentWidth):
                    if (!Equals(BottomSheetContentWidth, value))
                    {
                        BottomSheetContentWidth = (double?)value;
                        NativeControl.BottomSheetContentWidth = BottomSheetContentWidth ?? (double)SMTB.SfBottomSheet.BottomSheetContentWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(CollapsedHeight):
                    if (!Equals(CollapsedHeight, value))
                    {
                        CollapsedHeight = (double?)value;
                        NativeControl.CollapsedHeight = CollapsedHeight ?? (double)SMTB.SfBottomSheet.CollapsedHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(ContentPadding):
                    if (!Equals(ContentPadding, value))
                    {
                        ContentPadding = (Thickness?)value;
                        NativeControl.ContentPadding = ContentPadding ?? (Thickness)SMTB.SfBottomSheet.ContentPaddingProperty.DefaultValue;
                    }
                    break;
                case nameof(ContentWidthMode):
                    if (!Equals(ContentWidthMode, value))
                    {
                        ContentWidthMode = (SMTB.BottomSheetContentWidthMode?)value;
                        NativeControl.ContentWidthMode = ContentWidthMode ?? (SMTB.BottomSheetContentWidthMode)SMTB.SfBottomSheet.ContentWidthModeProperty.DefaultValue;
                    }
                    break;
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (CornerRadius?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (CornerRadius)SMTB.SfBottomSheet.CornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableSwiping):
                    if (!Equals(EnableSwiping, value))
                    {
                        EnableSwiping = (bool?)value;
                        NativeControl.EnableSwiping = EnableSwiping ?? (bool)SMTB.SfBottomSheet.EnableSwipingProperty.DefaultValue;
                    }
                    break;
                case nameof(FullExpandedRatio):
                    if (!Equals(FullExpandedRatio, value))
                    {
                        FullExpandedRatio = (double?)value;
                        NativeControl.FullExpandedRatio = FullExpandedRatio ?? (double)SMTB.SfBottomSheet.FullExpandedRatioProperty.DefaultValue;
                    }
                    break;
                case nameof(GrabberBackgroundColor):
                    if (!Equals(GrabberBackgroundColor, value))
                    {
                        GrabberBackgroundColor = (Color)value;
                        NativeControl.GrabberBackground = GrabberBackgroundColor;
                    }
                    break;
                case nameof(GrabberCornerRadius):
                    if (!Equals(GrabberCornerRadius, value))
                    {
                        GrabberCornerRadius = (CornerRadius?)value;
                        NativeControl.GrabberCornerRadius = GrabberCornerRadius ?? (CornerRadius)SMTB.SfBottomSheet.GrabberCornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(GrabberHeight):
                    if (!Equals(GrabberHeight, value))
                    {
                        GrabberHeight = (double?)value;
                        NativeControl.GrabberHeight = GrabberHeight ?? (double)SMTB.SfBottomSheet.GrabberHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(GrabberWidth):
                    if (!Equals(GrabberWidth, value))
                    {
                        GrabberWidth = (double?)value;
                        NativeControl.GrabberWidth = GrabberWidth ?? (double)SMTB.SfBottomSheet.GrabberWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(HalfExpandedRatio):
                    if (!Equals(HalfExpandedRatio, value))
                    {
                        HalfExpandedRatio = (double?)value;
                        NativeControl.HalfExpandedRatio = HalfExpandedRatio ?? (double)SMTB.SfBottomSheet.HalfExpandedRatioProperty.DefaultValue;
                    }
                    break;
                case nameof(IsModal):
                    if (!Equals(IsModal, value))
                    {
                        IsModal = (bool?)value;
                        NativeControl.IsModal = IsModal ?? (bool)SMTB.SfBottomSheet.IsModalProperty.DefaultValue;
                    }
                    break;
                case nameof(IsOpen):
                    if (!Equals(IsOpen, value))
                    {
                        IsOpen = (bool?)value;
                        NativeControl.IsOpen = IsOpen ?? (bool)SMTB.SfBottomSheet.IsOpenProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowGrabber):
                    if (!Equals(ShowGrabber, value))
                    {
                        ShowGrabber = (bool?)value;
                        NativeControl.ShowGrabber = ShowGrabber ?? (bool)SMTB.SfBottomSheet.ShowGrabberProperty.DefaultValue;
                    }
                    break;
                case nameof(State):
                    if (!Equals(State, value))
                    {
                        State = (SMTB.BottomSheetState?)value;
                        NativeControl.State = State ?? (SMTB.BottomSheetState)SMTB.SfBottomSheet.StateProperty.DefaultValue;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;
                case nameof(BottomSheetContent):
                    BottomSheetContent = (RenderFragment)value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;
                case nameof(GrabberBackground):
                    GrabberBackground = (RenderFragment)value;
                    break;
                case nameof(StateChanged):
                    if (!Equals(StateChanged, value))
                    {
                        void NativeControlStateChanged(object sender, SMTB.StateChangedEventArgs e)
                        {
                            var value = NativeControl.State;
                            State = value;
                            InvokeEventCallback(StateChanged, value);
                        }

                        StateChanged = (EventCallback<SMTB.BottomSheetState>)value;
                        NativeControl.StateChanged -= NativeControlStateChanged;
                        NativeControl.StateChanged += NativeControlStateChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTB.SfBottomSheet>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTB.SfBottomSheet>(builder, sequence++, BottomSheetContent, (x, value) => x.BottomSheetContent = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTB.SfBottomSheet>(builder, sequence++, ChildContent, (x, value) => x.Content = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTB.SfBottomSheet>(builder, sequence++, GrabberBackground, (x, value) => x.GrabberBackground = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
