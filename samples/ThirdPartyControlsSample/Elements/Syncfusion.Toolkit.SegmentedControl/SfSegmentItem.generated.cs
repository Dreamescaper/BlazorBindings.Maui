// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTS = Syncfusion.Maui.Toolkit.SegmentedControl;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.SegmentedControl
{
    /// <summary>
    /// Represents an individual item used in a segmented control.
    /// </summary>
    public partial class SfSegmentItem : BlazorBindings.Maui.Elements.Element
    {
        static SfSegmentItem()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the background color of the segment item.
        /// </summary>
        [Parameter] public Color BackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the image size of the segment item.
        /// </summary>
        [Parameter] public double? ImageSize { get; set; }
        /// <summary>
        /// Gets or sets the image displayed in the segment item.
        /// </summary>
        [Parameter] public MC.ImageSource ImageSource { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the segment item is enabled.
        /// </summary>
        [Parameter] public bool? IsEnabled { get; set; }
        /// <summary>
        /// Gets or sets the background color of the segment item when it is selected.
        /// </summary>
        [Parameter] public Color SelectedSegmentBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the text color of the segment item when it is selected.
        /// </summary>
        [Parameter] public Color SelectedSegmentTextColor { get; set; }
        /// <summary>
        /// Gets or sets the text of the segment item.
        /// </summary>
        [Parameter] public string Text { get; set; }
        /// <summary>
        /// Gets or sets the width of the segment item.
        /// </summary>
        [Parameter] public double? Width { get; set; }
        /// <summary>
        /// Gets or sets the background color of the segment item.
        /// </summary>
        [Parameter] public RenderFragment Background { get; set; }
        /// <summary>
        /// Gets or sets the text style of the segment item.
        /// </summary>
        [Parameter] public RenderFragment TextStyle { get; set; }

        public new SMTS.SfSegmentItem NativeControl => (SMTS.SfSegmentItem)((BindableObject)this).NativeControl;

        protected override SMTS.SfSegmentItem CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundColor):
                    if (!Equals(BackgroundColor, value))
                    {
                        BackgroundColor = (Color)value;
                        NativeControl.Background = BackgroundColor;
                    }
                    break;
                case nameof(ImageSize):
                    if (!Equals(ImageSize, value))
                    {
                        ImageSize = (double?)value;
                        NativeControl.ImageSize = ImageSize ?? (double)SMTS.SfSegmentItem.ImageSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(ImageSource):
                    if (!Equals(ImageSource, value))
                    {
                        ImageSource = (MC.ImageSource)value;
                        NativeControl.ImageSource = ImageSource;
                    }
                    break;
                case nameof(IsEnabled):
                    if (!Equals(IsEnabled, value))
                    {
                        IsEnabled = (bool?)value;
                        NativeControl.IsEnabled = IsEnabled ?? (bool)SMTS.SfSegmentItem.IsEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectedSegmentBackgroundColor):
                    if (!Equals(SelectedSegmentBackgroundColor, value))
                    {
                        SelectedSegmentBackgroundColor = (Color)value;
                        NativeControl.SelectedSegmentBackground = SelectedSegmentBackgroundColor;
                    }
                    break;
                case nameof(SelectedSegmentTextColor):
                    if (!Equals(SelectedSegmentTextColor, value))
                    {
                        SelectedSegmentTextColor = (Color)value;
                        NativeControl.SelectedSegmentTextColor = SelectedSegmentTextColor;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(Width):
                    if (!Equals(Width, value))
                    {
                        Width = (double?)value;
                        NativeControl.Width = Width ?? (double)SMTS.SfSegmentItem.WidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;
                case nameof(TextStyle):
                    TextStyle = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfSegmentItem>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfSegmentItem>(builder, sequence++, TextStyle, (x, value) => x.TextStyle = (SMTS.SegmentTextStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
