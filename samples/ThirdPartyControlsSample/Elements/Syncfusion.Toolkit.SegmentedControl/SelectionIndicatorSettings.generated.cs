// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTS = Syncfusion.Maui.Toolkit.SegmentedControl;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.SegmentedControl
{
    /// <summary>
    /// Provides a set of properties to customize the selection indicator in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />. The selection indicator is a strip used to indicate the selected index in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" /> View.
    /// </summary>
    public partial class SelectionIndicatorSettings : BlazorBindings.Maui.Elements.Element
    {
        static SelectionIndicatorSettings()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the background brush for the selection indicator in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.Background" /> is "new SolidColorBrush(Color.FromArgb("#6750A4"))".
        /// </value>
        [Parameter] public Color BackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the selection mode for the selection indicator in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.SelectionIndicatorPlacement" /> is <see cref="F:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorPlacement.Fill" />.
        /// </value>
        [Parameter] public SMTS.SelectionIndicatorPlacement? SelectionIndicatorPlacement { get; set; }
        /// <summary>
        /// Gets or sets the stroke color for the selection indicator in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.Stroke" /> is "Color.FromArgb("#6750A4")".
        /// </value>
        [Parameter] public Color Stroke { get; set; }
        /// <summary>
        /// Gets or sets the stroke thickness for the selection indicator in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.StrokeThickness" /> is 3.
        /// </value>
        [Parameter] public double? StrokeThickness { get; set; }
        /// <summary>
        /// Gets or sets the text color for the selection indicator in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.TextColor" /> is <see cref="F:Microsoft.Maui.Graphics.Colors.White" />.
        /// </value>
        [Parameter] public Color TextColor { get; set; }
        /// <summary>
        /// Gets or sets the background brush for the selection indicator in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.Background" /> is "new SolidColorBrush(Color.FromArgb("#6750A4"))".
        /// </value>
        [Parameter] public RenderFragment Background { get; set; }

        public new SMTS.SelectionIndicatorSettings NativeControl => (SMTS.SelectionIndicatorSettings)((BindableObject)this).NativeControl;

        protected override SMTS.SelectionIndicatorSettings CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundColor):
                    if (!Equals(BackgroundColor, value))
                    {
                        BackgroundColor = (Color)value;
                        NativeControl.Background = BackgroundColor;
                    }
                    break;
                case nameof(SelectionIndicatorPlacement):
                    if (!Equals(SelectionIndicatorPlacement, value))
                    {
                        SelectionIndicatorPlacement = (SMTS.SelectionIndicatorPlacement?)value;
                        NativeControl.SelectionIndicatorPlacement = SelectionIndicatorPlacement ?? (SMTS.SelectionIndicatorPlacement)SMTS.SelectionIndicatorSettings.SelectionIndicatorPlacementProperty.DefaultValue;
                    }
                    break;
                case nameof(Stroke):
                    if (!Equals(Stroke, value))
                    {
                        Stroke = (Color)value;
                        NativeControl.Stroke = Stroke;
                    }
                    break;
                case nameof(StrokeThickness):
                    if (!Equals(StrokeThickness, value))
                    {
                        StrokeThickness = (double?)value;
                        NativeControl.StrokeThickness = StrokeThickness ?? (double)SMTS.SelectionIndicatorSettings.StrokeThicknessProperty.DefaultValue;
                    }
                    break;
                case nameof(TextColor):
                    if (!Equals(TextColor, value))
                    {
                        TextColor = (Color)value;
                        NativeControl.TextColor = TextColor;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SelectionIndicatorSettings>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
