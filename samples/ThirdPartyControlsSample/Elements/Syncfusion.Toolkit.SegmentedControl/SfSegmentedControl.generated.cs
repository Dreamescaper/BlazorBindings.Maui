// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMTS = Syncfusion.Maui.Toolkit.SegmentedControl;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.SegmentedControl
{
    /// <summary>
    /// The SfSegmentedControl that allows you to display a set of segments, typically used for switch among different views. Each segment in the control represents an item that the user can select. The control can be populated with a collection of <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentItem" /> objects and a collection of strings. The SfSegmentedControl provides various customization options such as segment height, width, selection indicator settings, text and icon styles, and more. It supports setting the currently selected segment using the SelectedIndex property and provides an option to enable auto-scrolling when the selected index changes. You can also customize the appearance of individual segments using the SegmentTemplate.
    /// </summary>
    public partial class SfSegmentedControl : BlazorBindings.Maui.Elements.Syncfusion.Toolkit.SfView
    {
        static SfSegmentedControl()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether to enable auto-scrolling when the selected index is changed in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is true.
        /// </value>
        [Parameter] public bool? AutoScrollToSelectedSegment { get; set; }
        /// <summary>
        /// Gets or sets the corner radius for the border of the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is <see cref="M:Microsoft.Maui.CornerRadius.#ctor(System.Double)" /> with a value of 20.
        /// </value>
        [Parameter] public CornerRadius? CornerRadius { get; set; }
        /// <summary>
        /// Gets or sets the background brush of the disabled segment items in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is <see cref="P:Microsoft.Maui.Controls.Brush.Transparent" />.
        /// </value>
        [Parameter] public Color DisabledSegmentBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the text color of the disabled segment items in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is "Color.FromArgb("#1C1B1F61")"/&gt;.
        /// </value>
        [Parameter] public Color DisabledSegmentTextColor { get; set; }
        /// <summary>
        /// Gets or sets a collection used to generate the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentItem" /> in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is <c>null</c>.
        /// </value>
        [Parameter] public object ItemsSource { get; set; }
        /// <summary>
        /// Gets or sets the background brush for the segments in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Microsoft.Maui.Controls.Brush.Transparent" />.
        /// </value>
        [Parameter] public Color SegmentBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the segment corner radius for the segment items of the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is <see cref="M:Microsoft.Maui.CornerRadius.#ctor(System.Double)" /> with a value of 0.
        /// </value>
        [Parameter] public CornerRadius? SegmentCornerRadius { get; set; }
        /// <summary>
        /// Gets or sets the height of the segments in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is <c>40</c>.
        /// </value>
        [Parameter] public double? SegmentHeight { get; set; }
        /// <summary>
        /// Gets or sets the width of the segments in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is <c>100</c>.
        /// </value>
        [Parameter] public double? SegmentWidth { get; set; }
        /// <summary>
        /// Gets or sets the index of the currently selected item in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The index of the selected item defaults to <c>null</c>, indicating that no item is currently selected.
        /// </value>
        [Parameter] public Nullable<int> SelectedIndex { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to show separators between segments in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is true.
        /// </value>
        [Parameter] public bool? ShowSeparator { get; set; }
        /// <summary>
        /// Gets or sets the stroke brush for the segments in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of "new SolidColorBrush(Color.FromArgb("#79747E")"/&gt;.
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets the thickness of the segment stroke in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of 1.
        /// </value>
        [Parameter] public double? StrokeThickness { get; set; }
        /// <summary>
        /// Gets or sets the number of visible segments to be displayed in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is <c>-1</c>.
        /// </value>
        [Parameter] public int? VisibleSegmentsCount { get; set; }
        /// <summary>
        /// Gets or sets the background brush of the disabled segment items in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value is <see cref="P:Microsoft.Maui.Controls.Brush.Transparent" />.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment DisabledSegmentBackground { get; set; }
        /// <summary>
        /// Gets or sets the background brush for the segments in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Microsoft.Maui.Controls.Brush.Transparent" />.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment SegmentBackground { get; set; }
        /// <summary>
        /// Gets or sets the data template to use for customizing the appearance of individual segments in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        [Parameter] public RenderFragment SegmentTemplate { get; set; }
        /// <summary>
        /// Gets or sets the settings for the segment selection indicator, which is used to highlight the selected item in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.TextColor" /> is <see cref="F:Microsoft.Maui.Graphics.Colors.White" />, <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.Background" /> is "new SolidColorBrush(Color.FromArgb("#6750A4"))", <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.SelectionIndicatorPlacement" /> is <see cref="F:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorPlacement.Fill" />, <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.Stroke" /> is "Color.FromArgb("#6750A4")"&gt; <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SelectionIndicatorSettings.StrokeThickness" /> is "3"/&gt;.
        /// </value>
        /// <remarks>
        /// Accepts single SelectionIndicatorSettings element.
        /// </remarks>
        [Parameter] public RenderFragment SelectionIndicatorSettings { get; set; }
        /// <summary>
        /// Gets or sets the stroke brush for the segments in the <see cref="T:Syncfusion.Maui.Toolkit.SegmentedControl.SfSegmentedControl" />.
        /// </summary>
        /// <value>
        /// The default value of "new SolidColorBrush(Color.FromArgb("#79747E")"/&gt;.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment Stroke { get; set; }
        /// <summary>
        /// Gets or sets the style of segment item text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SegmentTextStyle.TextColor" /> is "Color.FromArgb("#1C1B1F")", <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SegmentTextStyle.FontSize" /> is 14, <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SegmentTextStyle.FontFamily" /> is null, <see cref="P:Syncfusion.Maui.Toolkit.SegmentedControl.SegmentTextStyle.FontAttributes" /> is <see cref="F:Microsoft.Maui.Controls.FontAttributes.None" />.
        /// </value>
        /// <remarks>
        /// Accepts single SegmentTextStyle element.
        /// </remarks>
        [Parameter] public RenderFragment TextStyle { get; set; }
        /// <summary>
        /// Occurs when the selection within the segment item is changed.
        /// </summary>
        [Parameter] public EventCallback<SMTS.SelectionChangedEventArgs> OnSelectionChanged { get; set; }

        public new SMTS.SfSegmentedControl NativeControl => (SMTS.SfSegmentedControl)((BindableObject)this).NativeControl;

        protected override SMTS.SfSegmentedControl CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AutoScrollToSelectedSegment):
                    if (!Equals(AutoScrollToSelectedSegment, value))
                    {
                        AutoScrollToSelectedSegment = (bool?)value;
                        NativeControl.AutoScrollToSelectedSegment = AutoScrollToSelectedSegment ?? (bool)SMTS.SfSegmentedControl.AutoScrollToSelectedSegmentProperty.DefaultValue;
                    }
                    break;
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (CornerRadius?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (CornerRadius)SMTS.SfSegmentedControl.CornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(DisabledSegmentBackgroundColor):
                    if (!Equals(DisabledSegmentBackgroundColor, value))
                    {
                        DisabledSegmentBackgroundColor = (Color)value;
                        NativeControl.DisabledSegmentBackground = DisabledSegmentBackgroundColor;
                    }
                    break;
                case nameof(DisabledSegmentTextColor):
                    if (!Equals(DisabledSegmentTextColor, value))
                    {
                        DisabledSegmentTextColor = (Color)value;
                        NativeControl.DisabledSegmentTextColor = DisabledSegmentTextColor;
                    }
                    break;
                case nameof(ItemsSource):
                    if (!Equals(ItemsSource, value))
                    {
                        ItemsSource = (object)value;
                        NativeControl.ItemsSource = ItemsSource;
                    }
                    break;
                case nameof(SegmentBackgroundColor):
                    if (!Equals(SegmentBackgroundColor, value))
                    {
                        SegmentBackgroundColor = (Color)value;
                        NativeControl.SegmentBackground = SegmentBackgroundColor;
                    }
                    break;
                case nameof(SegmentCornerRadius):
                    if (!Equals(SegmentCornerRadius, value))
                    {
                        SegmentCornerRadius = (CornerRadius?)value;
                        NativeControl.SegmentCornerRadius = SegmentCornerRadius ?? (CornerRadius)SMTS.SfSegmentedControl.SegmentCornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(SegmentHeight):
                    if (!Equals(SegmentHeight, value))
                    {
                        SegmentHeight = (double?)value;
                        NativeControl.SegmentHeight = SegmentHeight ?? (double)SMTS.SfSegmentedControl.SegmentHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(SegmentWidth):
                    if (!Equals(SegmentWidth, value))
                    {
                        SegmentWidth = (double?)value;
                        NativeControl.SegmentWidth = SegmentWidth ?? (double)SMTS.SfSegmentedControl.SegmentWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectedIndex):
                    if (!Equals(SelectedIndex, value))
                    {
                        SelectedIndex = (Nullable<int>)value;
                        NativeControl.SelectedIndex = SelectedIndex;
                    }
                    break;
                case nameof(ShowSeparator):
                    if (!Equals(ShowSeparator, value))
                    {
                        ShowSeparator = (bool?)value;
                        NativeControl.ShowSeparator = ShowSeparator ?? (bool)SMTS.SfSegmentedControl.ShowSeparatorProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(StrokeThickness):
                    if (!Equals(StrokeThickness, value))
                    {
                        StrokeThickness = (double?)value;
                        NativeControl.StrokeThickness = StrokeThickness ?? (double)SMTS.SfSegmentedControl.StrokeThicknessProperty.DefaultValue;
                    }
                    break;
                case nameof(VisibleSegmentsCount):
                    if (!Equals(VisibleSegmentsCount, value))
                    {
                        VisibleSegmentsCount = (int?)value;
                        NativeControl.VisibleSegmentsCount = VisibleSegmentsCount ?? (int)SMTS.SfSegmentedControl.VisibleSegmentsCountProperty.DefaultValue;
                    }
                    break;
                case nameof(DisabledSegmentBackground):
                    DisabledSegmentBackground = (RenderFragment)value;
                    break;
                case nameof(SegmentBackground):
                    SegmentBackground = (RenderFragment)value;
                    break;
                case nameof(SegmentTemplate):
                    SegmentTemplate = (RenderFragment)value;
                    break;
                case nameof(SelectionIndicatorSettings):
                    SelectionIndicatorSettings = (RenderFragment)value;
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;
                case nameof(TextStyle):
                    TextStyle = (RenderFragment)value;
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, SMTS.SelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<SMTS.SelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfSegmentedControl>(builder, sequence++, DisabledSegmentBackground, (x, value) => x.DisabledSegmentBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfSegmentedControl>(builder, sequence++, SegmentBackground, (x, value) => x.SegmentBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTS.SfSegmentedControl>(builder, sequence++, SegmentTemplate, (x, template) => x.SegmentTemplate = template);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfSegmentedControl>(builder, sequence++, SelectionIndicatorSettings, (x, value) => x.SelectionIndicatorSettings = (SMTS.SelectionIndicatorSettings)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfSegmentedControl>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfSegmentedControl>(builder, sequence++, TextStyle, (x, value) => x.TextStyle = (SMTS.SegmentTextStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
