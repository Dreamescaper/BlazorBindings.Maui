// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Calendar;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Calendar
{
    /// <summary>
    /// Holds the information about special date icon and its color for the SfCalendar.
    /// </summary>
    public partial class CalendarIconDetails : BlazorBindings.Maui.Elements.Element
    {
        static CalendarIconDetails()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the color of special date icon for the SfCalendar.
        /// </summary>
        [Parameter] public Color FillColor { get; set; }
        /// <summary>
        /// Gets or sets the type of special date icon for the SfCalendar.
        /// </summary>
        [Parameter] public SMTC.CalendarIcon? Icon { get; set; }
        /// <summary>
        /// Gets or sets the color of special date icon for the SfCalendar.
        /// </summary>
        [Parameter] public RenderFragment Fill { get; set; }

        public new SMTC.CalendarIconDetails NativeControl => (SMTC.CalendarIconDetails)((BindableObject)this).NativeControl;

        protected override SMTC.CalendarIconDetails CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(FillColor):
                    if (!Equals(FillColor, value))
                    {
                        FillColor = (Color)value;
                        NativeControl.Fill = FillColor;
                    }
                    break;
                case nameof(Icon):
                    if (!Equals(Icon, value))
                    {
                        Icon = (SMTC.CalendarIcon?)value;
                        NativeControl.Icon = Icon ?? default;
                    }
                    break;
                case nameof(Fill):
                    Fill = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarIconDetails>(builder, sequence++, Fill, (x, value) => x.Fill = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
