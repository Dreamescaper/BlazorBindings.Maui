// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Calendar;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Calendar
{
    /// <summary>
    /// Represents a class which is used to customize all the properties of header view of the SfCalendar.
    /// </summary>
    public partial class CalendarHeaderView : BlazorBindings.Maui.Elements.Element
    {
        static CalendarHeaderView()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the background of the header view in SfCalendar.
        /// </summary>
        /// <value>
        /// The Default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarHeaderView.Background" /> is Transparent.
        /// </value>
        [Parameter] public Color BackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the value to specify the height of header view on SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarHeaderView.Height" /> is 35.
        /// </value>
        [Parameter] public double? Height { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to displays the navigation arrows on the header view of the SfCalendar.
        /// </summary>
        /// <value>
        /// The Default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarHeaderView.ShowNavigationArrows" /> is true.
        /// </value>
        [Parameter] public bool? ShowNavigationArrows { get; set; }
        /// <summary>
        /// Gets or sets the format of the header text in calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarHeaderView.TextFormat" /> is "string.Empty".
        /// </value>
        [Parameter] public string TextFormat { get; set; }
        /// <summary>
        /// Gets or sets the background of the header view in SfCalendar.
        /// </summary>
        /// <value>
        /// The Default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarHeaderView.Background" /> is Transparent.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment Background { get; set; }
        /// <summary>
        /// Gets or sets the text style of the header text in SfCalendar.
        /// </summary>
        /// <remarks>
        /// Accepts single CalendarTextStyle element.
        /// </remarks>
        [Parameter] public RenderFragment TextStyle { get; set; }

        public new SMTC.CalendarHeaderView NativeControl => (SMTC.CalendarHeaderView)((BindableObject)this).NativeControl;

        protected override SMTC.CalendarHeaderView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundColor):
                    if (!Equals(BackgroundColor, value))
                    {
                        BackgroundColor = (Color)value;
                        NativeControl.Background = BackgroundColor;
                    }
                    break;
                case nameof(Height):
                    if (!Equals(Height, value))
                    {
                        Height = (double?)value;
                        NativeControl.Height = Height ?? (double)SMTC.CalendarHeaderView.HeightProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowNavigationArrows):
                    if (!Equals(ShowNavigationArrows, value))
                    {
                        ShowNavigationArrows = (bool?)value;
                        NativeControl.ShowNavigationArrows = ShowNavigationArrows ?? (bool)SMTC.CalendarHeaderView.ShowNavigationArrowsProperty.DefaultValue;
                    }
                    break;
                case nameof(TextFormat):
                    if (!Equals(TextFormat, value))
                    {
                        TextFormat = (string)value;
                        NativeControl.TextFormat = TextFormat;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;
                case nameof(TextStyle):
                    TextStyle = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarHeaderView>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarHeaderView>(builder, sequence++, TextStyle, (x, value) => x.TextStyle = (SMTC.CalendarTextStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
