// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Calendar;
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Calendar
{
    /// <summary>
    /// Initializes a new instance of the <see cref="T:Syncfusion.Maui.Toolkit.Calendar.SfCalendar" /> class that represents a control, used to display and select one or more dates with in specified date range.
    /// </summary>
    public partial class SfCalendar : BlazorBindings.Maui.Elements.Syncfusion.Toolkit.SfView
    {
        static SfCalendar()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether the navigation enabled on year, decade and century cell interaction.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.AllowViewNavigation" /> is true.
        /// </value>
        [Parameter] public bool? AllowViewNavigation { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the selected date is deselectable through interaction on single selection mode of SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.CanToggleDaySelection" /> is false.
        /// </value>
        [Parameter] public bool? CanToggleDaySelection { get; set; }
        /// <summary>
        /// Gets or sets the corner radius of the calendar view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.CornerRadius" /> is 20.
        /// </value>
        [Parameter] public CornerRadius? CornerRadius { get; set; }
        /// <summary>
        /// Gets or sets the display date to programmatically navigate the dates in the SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.DisplayDate" /> is <see cref="P:System.DateTime.Now" />.
        /// </value>
        [Parameter] public DateTime? DisplayDate { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the dates enabled or disabled before today date.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.EnablePastDates" /> is true.
        /// </value>
        [Parameter] public bool? EnablePastDates { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the swiping selection enabled for select the date range.
        /// </summary>
        /// <value>
        /// The default value of <seealso cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.EnableSwipeSelection" /> is false.
        /// </value>
        [Parameter] public bool? EnableSwipeSelection { get; set; }
        /// <summary>
        /// Gets or sets the value that describes the highlight for range end date of calendar
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.EndRangeSelectionBackground" /> is "#6200EE"(Blue).
        /// </value>
        [Parameter] public Color EndRangeSelectionBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the value determines the identifier of the calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.Identifier" /> is <see cref="F:Syncfusion.Maui.Toolkit.Calendar.CalendarIdentifier.Gregorian" />.
        /// </value>
        [Parameter] public SMTC.CalendarIdentifier? Identifier { get; set; }
        /// <summary>
        /// Gets or sets the maximum display date to restrict the visible dates in the SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.MaximumDate" /> is <see cref="F:System.DateTime.MaxValue" />.
        /// </value>
        [Parameter] public DateTime? MaximumDate { get; set; }
        /// <summary>
        /// Gets or sets the minimum display date to restrict the visible dates in the SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.MinimumDate" /> is <see cref="F:System.DateTime.MinValue" />.
        /// </value>
        [Parameter] public DateTime? MinimumDate { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the allow navigation by tapping adjacent month dates.
        /// </summary>
        /// <value>
        /// The default value of <seealso cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.NavigateToAdjacentMonth" /> is true.
        /// </value>
        [Parameter] public bool? NavigateToAdjacentMonth { get; set; }
        /// <summary>
        /// Gets or sets a value which determines the direction of the calendar scrolls.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.NavigationDirection" /> is Vertical.
        /// </value>
        [Parameter] public SMTC.CalendarNavigationDirection? NavigationDirection { get; set; }
        /// <summary>
        /// Gets or sets a value determines the range selection direction of the SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.RangeSelectionDirection" /> is <see cref="F:Syncfusion.Maui.Toolkit.Calendar.CalendarRangeSelectionDirection.Default" />.
        /// </value>
        [Parameter] public SMTC.CalendarRangeSelectionDirection? RangeSelectionDirection { get; set; }
        /// <summary>
        /// Gets or sets the function to decide whether the cell is selectable or not in the calendar.
        /// </summary>
        [Parameter] public Func<DateTime, bool> SelectableDayPredicate { get; set; }
        /// <summary>
        /// Gets or sets the selected date to select the particular date of the calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.SelectedDate" /> is null.
        /// </value>
        [Parameter] public Nullable<DateTime> SelectedDate { get; set; }
        /// <summary>
        /// Gets or sets the selected date range to select the range of dates of the calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.SelectedDateRange" /> is null.
        /// </value>
        [Parameter] public SMTC.CalendarDateRange SelectedDateRange { get; set; }
        /// <summary>
        /// Gets or sets the selected multi date ranges to select the multiple range of dates of the calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.SelectedDateRanges" /> is null.
        /// </value>
        [Parameter] public ObservableCollection<SMTC.CalendarDateRange> SelectedDateRanges { get; set; }
        /// <summary>
        /// Gets or sets the selected dates to select the multiple dates of the calendar.
        /// </summary>
        [Parameter] public ObservableCollection<DateTime> SelectedDates { get; set; }
        /// <summary>
        /// Gets or sets the value that describes the highlight of selection based on selection mode of the calendar. 1. Highlight the selected date in single selection mode. 2. Highlight the selected dates in multiple selection mode. 3. Highlight the in between dates on range selection mode.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.SelectionBackground" /> is null.
        /// </value>
        [Parameter] public Color SelectionBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the selection mode of the calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.SelectionMode" /> is <see cref="F:Microsoft.Maui.Controls.SelectionMode.Single" />
        /// </value>
        [Parameter] public SMTC.CalendarSelectionMode? SelectionMode { get; set; }
        /// <summary>
        /// Gets or sets the selection shape of the SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.SelectionShape" /> is circle.
        /// </value>
        [Parameter] public SMTC.CalendarSelectionShape? SelectionShape { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to dates is out of minimum and maximum date range on the calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.ShowOutOfRangeDates" /> is true.
        /// </value>
        [Parameter] public bool? ShowOutOfRangeDates { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to displays the leading and trailing dates in the month, decade, century views of the SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.ShowTrailingAndLeadingDates" /> is true.
        /// </value>
        [Parameter] public bool? ShowTrailingAndLeadingDates { get; set; }
        /// <summary>
        /// Gets or sets the value that describes the highlight for range start date of calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.StartRangeSelectionBackground" /> is "#6200EE"(Blue).
        /// </value>
        [Parameter] public Color StartRangeSelectionBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the value that describes the today highlight color value.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.TodayHighlightBrush" /> is "#6200EE"(Blue).
        /// </value>
        [Parameter] public Color TodayHighlightColor { get; set; }
        /// <summary>
        /// Gets or sets the built-in views such as month, year, decade and century of the SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.View" /> is <see cref="F:Syncfusion.Maui.Toolkit.Calendar.CalendarView.Month" />.
        /// </value>
        [Parameter] public SMTC.CalendarView? View { get; set; }
        /// <summary>
        /// Gets or sets the value that describes the highlight for range end date of calendar
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.EndRangeSelectionBackground" /> is "#6200EE"(Blue).
        /// </value>
        [Parameter] public RenderFragment EndRangeSelectionBackground { get; set; }
        /// <summary>
        /// Gets or sets the properties which allows to customize the calendar footer.
        /// </summary>
        [Parameter] public RenderFragment FooterView { get; set; }
        /// <summary>
        /// Gets or sets the header template or template selector for month, year, decade, and century view.
        /// </summary>
        [Parameter] public RenderFragment HeaderTemplate { get; set; }
        /// <summary>
        /// Gets or sets the properties which allows to customize the calendar header of month, year, decade and century views.
        /// </summary>
        [Parameter] public RenderFragment HeaderView { get; set; }
        /// <summary>
        /// Gets or sets the properties which allows to customize the calendar month view.
        /// </summary>
        [Parameter] public RenderFragment MonthView { get; set; }
        /// <summary>
        /// Gets or sets the view header template or template selector for month view.
        /// </summary>
        [Parameter] public RenderFragment MonthViewHeaderTemplate { get; set; }
        /// <summary>
        /// Gets or sets the value that describes the highlight of selection based on selection mode of the calendar. 1. Highlight the selected date in single selection mode. 2. Highlight the selected dates in multiple selection mode. 3. Highlight the in between dates on range selection mode.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.SelectionBackground" /> is null.
        /// </value>
        [Parameter] public RenderFragment SelectionBackground { get; set; }
        /// <summary>
        /// Gets or sets the value that describes the highlight for range start date of calendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.StartRangeSelectionBackground" /> is "#6200EE"(Blue).
        /// </value>
        [Parameter] public RenderFragment StartRangeSelectionBackground { get; set; }
        /// <summary>
        /// Gets or sets the value that describes the today highlight color value.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.SfCalendar.TodayHighlightBrush" /> is "#6200EE"(Blue).
        /// </value>
        [Parameter] public RenderFragment TodayHighlightBrush { get; set; }
        /// <summary>
        /// Gets or sets the properties which allows to customize the calendar year, decade and century views.
        /// </summary>
        [Parameter] public RenderFragment YearView { get; set; }
        /// <summary>
        /// Occurs whenever the calendar view and visible dates changed on SfCalendar.
        /// </summary>
        [Parameter] public EventCallback<SMTC.CalendarView> ViewChanged { get; set; }
        /// <summary>
        /// Occurs after the selection changed on SfCalendar.
        /// </summary>
        [Parameter] public EventCallback<SMTC.CalendarSelectionChangedEventArgs> OnSelectionChanged { get; set; }
        /// <summary>
        /// Occurs after the tap interaction on SfCalendar.
        /// </summary>
        [Parameter] public EventCallback<SMTC.CalendarTappedEventArgs> OnTapped { get; set; }
        /// <summary>
        /// Occurs after the double tapped interaction on SfCalendar.
        /// </summary>
        [Parameter] public EventCallback<SMTC.CalendarDoubleTappedEventArgs> OnDoubleTapped { get; set; }
        /// <summary>
        /// Occurs after the long press interaction on SfCalendar.
        /// </summary>
        [Parameter] public EventCallback<SMTC.CalendarLongPressedEventArgs> OnLongPressed { get; set; }
        /// <summary>
        /// Occurs whenever the confirm button tapped on calendar. The date that have been selected are confirmed.
        /// </summary>
        [Parameter] public EventCallback<SMTC.CalendarSubmittedEventArgs> OnActionButtonClicked { get; set; }
        /// <summary>
        /// Occurs whenever the cancel button tapped on calendar. It reset the selected values to confirmed selected values.
        /// </summary>
        [Parameter] public EventCallback OnActionButtonCanceled { get; set; }

        public new SMTC.SfCalendar NativeControl => (SMTC.SfCalendar)((BindableObject)this).NativeControl;

        protected override SMTC.SfCalendar CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AllowViewNavigation):
                    if (!Equals(AllowViewNavigation, value))
                    {
                        AllowViewNavigation = (bool?)value;
                        NativeControl.AllowViewNavigation = AllowViewNavigation ?? (bool)SMTC.SfCalendar.AllowViewNavigationProperty.DefaultValue;
                    }
                    break;
                case nameof(CanToggleDaySelection):
                    if (!Equals(CanToggleDaySelection, value))
                    {
                        CanToggleDaySelection = (bool?)value;
                        NativeControl.CanToggleDaySelection = CanToggleDaySelection ?? (bool)SMTC.SfCalendar.CanToggleDaySelectionProperty.DefaultValue;
                    }
                    break;
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (CornerRadius?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (CornerRadius)SMTC.SfCalendar.CornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(DisplayDate):
                    if (!Equals(DisplayDate, value))
                    {
                        DisplayDate = (DateTime?)value;
                        NativeControl.DisplayDate = DisplayDate ?? (DateTime)SMTC.SfCalendar.DisplayDateProperty.DefaultValue;
                    }
                    break;
                case nameof(EnablePastDates):
                    if (!Equals(EnablePastDates, value))
                    {
                        EnablePastDates = (bool?)value;
                        NativeControl.EnablePastDates = EnablePastDates ?? (bool)SMTC.SfCalendar.EnablePastDatesProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableSwipeSelection):
                    if (!Equals(EnableSwipeSelection, value))
                    {
                        EnableSwipeSelection = (bool?)value;
                        NativeControl.EnableSwipeSelection = EnableSwipeSelection ?? (bool)SMTC.SfCalendar.EnableSwipeSelectionProperty.DefaultValue;
                    }
                    break;
                case nameof(EndRangeSelectionBackgroundColor):
                    if (!Equals(EndRangeSelectionBackgroundColor, value))
                    {
                        EndRangeSelectionBackgroundColor = (Color)value;
                        NativeControl.EndRangeSelectionBackground = EndRangeSelectionBackgroundColor;
                    }
                    break;
                case nameof(Identifier):
                    if (!Equals(Identifier, value))
                    {
                        Identifier = (SMTC.CalendarIdentifier?)value;
                        NativeControl.Identifier = Identifier ?? (SMTC.CalendarIdentifier)SMTC.SfCalendar.IdentifierProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumDate):
                    if (!Equals(MaximumDate, value))
                    {
                        MaximumDate = (DateTime?)value;
                        NativeControl.MaximumDate = MaximumDate ?? (DateTime)SMTC.SfCalendar.MaximumDateProperty.DefaultValue;
                    }
                    break;
                case nameof(MinimumDate):
                    if (!Equals(MinimumDate, value))
                    {
                        MinimumDate = (DateTime?)value;
                        NativeControl.MinimumDate = MinimumDate ?? (DateTime)SMTC.SfCalendar.MinimumDateProperty.DefaultValue;
                    }
                    break;
                case nameof(NavigateToAdjacentMonth):
                    if (!Equals(NavigateToAdjacentMonth, value))
                    {
                        NavigateToAdjacentMonth = (bool?)value;
                        NativeControl.NavigateToAdjacentMonth = NavigateToAdjacentMonth ?? (bool)SMTC.SfCalendar.NavigateToAdjacentMonthProperty.DefaultValue;
                    }
                    break;
                case nameof(NavigationDirection):
                    if (!Equals(NavigationDirection, value))
                    {
                        NavigationDirection = (SMTC.CalendarNavigationDirection?)value;
                        NativeControl.NavigationDirection = NavigationDirection ?? (SMTC.CalendarNavigationDirection)SMTC.SfCalendar.NavigationDirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(RangeSelectionDirection):
                    if (!Equals(RangeSelectionDirection, value))
                    {
                        RangeSelectionDirection = (SMTC.CalendarRangeSelectionDirection?)value;
                        NativeControl.RangeSelectionDirection = RangeSelectionDirection ?? (SMTC.CalendarRangeSelectionDirection)SMTC.SfCalendar.RangeSelectionDirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectableDayPredicate):
                    if (!Equals(SelectableDayPredicate, value))
                    {
                        SelectableDayPredicate = (Func<DateTime, bool>)value;
                        NativeControl.SelectableDayPredicate = SelectableDayPredicate;
                    }
                    break;
                case nameof(SelectedDate):
                    if (!Equals(SelectedDate, value))
                    {
                        SelectedDate = (Nullable<DateTime>)value;
                        NativeControl.SelectedDate = SelectedDate;
                    }
                    break;
                case nameof(SelectedDateRange):
                    if (!Equals(SelectedDateRange, value))
                    {
                        SelectedDateRange = (SMTC.CalendarDateRange)value;
                        NativeControl.SelectedDateRange = SelectedDateRange;
                    }
                    break;
                case nameof(SelectedDateRanges):
                    if (!Equals(SelectedDateRanges, value))
                    {
                        SelectedDateRanges = (ObservableCollection<SMTC.CalendarDateRange>)value;
                        NativeControl.SelectedDateRanges = SelectedDateRanges;
                    }
                    break;
                case nameof(SelectedDates):
                    if (!Equals(SelectedDates, value))
                    {
                        SelectedDates = (ObservableCollection<DateTime>)value;
                        NativeControl.SelectedDates = SelectedDates;
                    }
                    break;
                case nameof(SelectionBackgroundColor):
                    if (!Equals(SelectionBackgroundColor, value))
                    {
                        SelectionBackgroundColor = (Color)value;
                        NativeControl.SelectionBackground = SelectionBackgroundColor;
                    }
                    break;
                case nameof(SelectionMode):
                    if (!Equals(SelectionMode, value))
                    {
                        SelectionMode = (SMTC.CalendarSelectionMode?)value;
                        NativeControl.SelectionMode = SelectionMode ?? (SMTC.CalendarSelectionMode)SMTC.SfCalendar.SelectionModeProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectionShape):
                    if (!Equals(SelectionShape, value))
                    {
                        SelectionShape = (SMTC.CalendarSelectionShape?)value;
                        NativeControl.SelectionShape = SelectionShape ?? (SMTC.CalendarSelectionShape)SMTC.SfCalendar.SelectionShapeProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowOutOfRangeDates):
                    if (!Equals(ShowOutOfRangeDates, value))
                    {
                        ShowOutOfRangeDates = (bool?)value;
                        NativeControl.ShowOutOfRangeDates = ShowOutOfRangeDates ?? (bool)SMTC.SfCalendar.ShowOutOfRangeDatesProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowTrailingAndLeadingDates):
                    if (!Equals(ShowTrailingAndLeadingDates, value))
                    {
                        ShowTrailingAndLeadingDates = (bool?)value;
                        NativeControl.ShowTrailingAndLeadingDates = ShowTrailingAndLeadingDates ?? (bool)SMTC.SfCalendar.ShowTrailingAndLeadingDatesProperty.DefaultValue;
                    }
                    break;
                case nameof(StartRangeSelectionBackgroundColor):
                    if (!Equals(StartRangeSelectionBackgroundColor, value))
                    {
                        StartRangeSelectionBackgroundColor = (Color)value;
                        NativeControl.StartRangeSelectionBackground = StartRangeSelectionBackgroundColor;
                    }
                    break;
                case nameof(TodayHighlightColor):
                    if (!Equals(TodayHighlightColor, value))
                    {
                        TodayHighlightColor = (Color)value;
                        NativeControl.TodayHighlightBrush = TodayHighlightColor;
                    }
                    break;
                case nameof(View):
                    if (!Equals(View, value))
                    {
                        View = (SMTC.CalendarView?)value;
                        NativeControl.View = View ?? (SMTC.CalendarView)SMTC.SfCalendar.ViewProperty.DefaultValue;
                    }
                    break;
                case nameof(EndRangeSelectionBackground):
                    EndRangeSelectionBackground = (RenderFragment)value;
                    break;
                case nameof(FooterView):
                    FooterView = (RenderFragment)value;
                    break;
                case nameof(HeaderTemplate):
                    HeaderTemplate = (RenderFragment)value;
                    break;
                case nameof(HeaderView):
                    HeaderView = (RenderFragment)value;
                    break;
                case nameof(MonthView):
                    MonthView = (RenderFragment)value;
                    break;
                case nameof(MonthViewHeaderTemplate):
                    MonthViewHeaderTemplate = (RenderFragment)value;
                    break;
                case nameof(SelectionBackground):
                    SelectionBackground = (RenderFragment)value;
                    break;
                case nameof(StartRangeSelectionBackground):
                    StartRangeSelectionBackground = (RenderFragment)value;
                    break;
                case nameof(TodayHighlightBrush):
                    TodayHighlightBrush = (RenderFragment)value;
                    break;
                case nameof(YearView):
                    YearView = (RenderFragment)value;
                    break;
                case nameof(ViewChanged):
                    if (!Equals(ViewChanged, value))
                    {
                        void NativeControlViewChanged(object sender, SMTC.CalendarViewChangedEventArgs e)
                        {
                            var value = NativeControl.View;
                            View = value;
                            InvokeEventCallback(ViewChanged, value);
                        }

                        ViewChanged = (EventCallback<SMTC.CalendarView>)value;
                        NativeControl.ViewChanged -= NativeControlViewChanged;
                        NativeControl.ViewChanged += NativeControlViewChanged;
                    }
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, SMTC.CalendarSelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<SMTC.CalendarSelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;
                case nameof(OnTapped):
                    if (!Equals(OnTapped, value))
                    {
                        void NativeControlTapped(object sender, SMTC.CalendarTappedEventArgs e) => InvokeEventCallback(OnTapped, e);

                        OnTapped = (EventCallback<SMTC.CalendarTappedEventArgs>)value;
                        NativeControl.Tapped -= NativeControlTapped;
                        NativeControl.Tapped += NativeControlTapped;
                    }
                    break;
                case nameof(OnDoubleTapped):
                    if (!Equals(OnDoubleTapped, value))
                    {
                        void NativeControlDoubleTapped(object sender, SMTC.CalendarDoubleTappedEventArgs e) => InvokeEventCallback(OnDoubleTapped, e);

                        OnDoubleTapped = (EventCallback<SMTC.CalendarDoubleTappedEventArgs>)value;
                        NativeControl.DoubleTapped -= NativeControlDoubleTapped;
                        NativeControl.DoubleTapped += NativeControlDoubleTapped;
                    }
                    break;
                case nameof(OnLongPressed):
                    if (!Equals(OnLongPressed, value))
                    {
                        void NativeControlLongPressed(object sender, SMTC.CalendarLongPressedEventArgs e) => InvokeEventCallback(OnLongPressed, e);

                        OnLongPressed = (EventCallback<SMTC.CalendarLongPressedEventArgs>)value;
                        NativeControl.LongPressed -= NativeControlLongPressed;
                        NativeControl.LongPressed += NativeControlLongPressed;
                    }
                    break;
                case nameof(OnActionButtonClicked):
                    if (!Equals(OnActionButtonClicked, value))
                    {
                        void NativeControlActionButtonClicked(object sender, SMTC.CalendarSubmittedEventArgs e) => InvokeEventCallback(OnActionButtonClicked, e);

                        OnActionButtonClicked = (EventCallback<SMTC.CalendarSubmittedEventArgs>)value;
                        NativeControl.ActionButtonClicked -= NativeControlActionButtonClicked;
                        NativeControl.ActionButtonClicked += NativeControlActionButtonClicked;
                    }
                    break;
                case nameof(OnActionButtonCanceled):
                    if (!Equals(OnActionButtonCanceled, value))
                    {
                        void NativeControlActionButtonCanceled(object sender, EventArgs e) => InvokeEventCallback(OnActionButtonCanceled);

                        OnActionButtonCanceled = (EventCallback)value;
                        NativeControl.ActionButtonCanceled -= NativeControlActionButtonCanceled;
                        NativeControl.ActionButtonCanceled += NativeControlActionButtonCanceled;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCalendar>(builder, sequence++, EndRangeSelectionBackground, (x, value) => x.EndRangeSelectionBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCalendar>(builder, sequence++, FooterView, (x, value) => x.FooterView = (SMTC.CalendarFooterView)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.SfCalendar>(builder, sequence++, HeaderTemplate, (x, template) => x.HeaderTemplate = template);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCalendar>(builder, sequence++, HeaderView, (x, value) => x.HeaderView = (SMTC.CalendarHeaderView)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCalendar>(builder, sequence++, MonthView, (x, value) => x.MonthView = (SMTC.CalendarMonthView)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.SfCalendar>(builder, sequence++, MonthViewHeaderTemplate, (x, template) => x.MonthViewHeaderTemplate = template);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCalendar>(builder, sequence++, SelectionBackground, (x, value) => x.SelectionBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCalendar>(builder, sequence++, StartRangeSelectionBackground, (x, value) => x.StartRangeSelectionBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCalendar>(builder, sequence++, TodayHighlightBrush, (x, value) => x.TodayHighlightBrush = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCalendar>(builder, sequence++, YearView, (x, value) => x.YearView = (SMTC.CalendarYearView)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
