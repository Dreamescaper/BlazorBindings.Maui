// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Calendar;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Calendar
{
    /// <summary>
    /// Represents a class which is used to configure all the properties and styles of calendar month view.
    /// </summary>
    public partial class CalendarMonthView : BlazorBindings.Maui.Elements.Element
    {
        static CalendarMonthView()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the background for the month cells of the calendar month view.
        /// </summary>
        [Parameter] public Color BackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the background for the disabled month cells of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.DisabledDatesBackground" /> is Transparent.
        /// </value>
        [Parameter] public Color DisabledDatesBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the day of week that used to change the default first day of week in SfCalendar.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.FirstDayOfWeek" /> is <see cref="F:System.DayOfWeek.Sunday" />.
        /// </value>
        [Parameter] public DayOfWeek? FirstDayOfWeek { get; set; }
        /// <summary>
        /// Gets or sets a value to display the number of weeks in calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.NumberOfVisibleWeeks" /> is 6.
        /// </value>
        [Parameter] public int? NumberOfVisibleWeeks { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to displays the week number of the year in the SfCalendar. Week number value calculated based on the full week rule with Monday as first day of week.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.ShowWeekNumber" /> is false.
        /// </value>
        [Parameter] public bool? ShowWeekNumber { get; set; }
        /// <summary>
        /// Gets or sets the background for the special month cells of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.SpecialDatesBackground" /> is Transparent
        /// </value>
        [Parameter] public Color SpecialDatesBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the function to decide whether the month cell date is a special date or not in the calendar.
        /// </summary>
        [Parameter] public Func<DateTime, SMTC.CalendarIconDetails> SpecialDayPredicate { get; set; }
        /// <summary>
        /// Gets or sets the background for the today month cell of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.TodayBackground" /> is Transparent.
        /// </value>
        [Parameter] public Color TodayBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the background for the trailing and leading month cells of the calendar month view.
        /// </summary>
        [Parameter] public Color TrailingLeadingDatesBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the background for the weekend month cells of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.WeekendDatesBackground" /> is null
        /// </value>
        [Parameter] public Color WeekendDatesBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the weekend days collection of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.WeekendDays" /> is empty.
        /// </value>
        [Parameter] public List<DayOfWeek> WeekendDays { get; set; }
        /// <summary>
        /// Gets or sets the background for the month cells of the calendar month view.
        /// </summary>
        [Parameter] public RenderFragment Background { get; set; }
        /// <summary>
        /// Gets or sets the month cell template or template selector.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.CellTemplate" /> is null.
        /// </value>
        [Parameter] public RenderFragment CellTemplate { get; set; }
        /// <summary>
        /// Gets or sets the background for the disabled month cells of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.DisabledDatesBackground" /> is Transparent.
        /// </value>
        [Parameter] public RenderFragment DisabledDatesBackground { get; set; }
        /// <summary>
        /// Gets or sets the text style of the disabled month cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment DisabledDatesTextStyle { get; set; }
        /// <summary>
        /// Gets or sets properties which allows to customize the view header view of the calendar month view.
        /// </summary>
        [Parameter] public RenderFragment HeaderView { get; set; }
        /// <summary>
        /// Gets or sets the text style of the range in-between month cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment RangeTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the text style of the selection month cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment SelectionTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the background for the special month cells of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.SpecialDatesBackground" /> is Transparent
        /// </value>
        [Parameter] public RenderFragment SpecialDatesBackground { get; set; }
        /// <summary>
        /// Gets or sets the text style of the special month cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment SpecialDatesTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the text style of the month cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment TextStyle { get; set; }
        /// <summary>
        /// Gets or sets the background for the today month cell of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.TodayBackground" /> is Transparent.
        /// </value>
        [Parameter] public RenderFragment TodayBackground { get; set; }
        /// <summary>
        /// Gets or sets the text style of the today month cell text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment TodayTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the background for the trailing and leading month cells of the calendar month view.
        /// </summary>
        [Parameter] public RenderFragment TrailingLeadingDatesBackground { get; set; }
        /// <summary>
        /// Gets or sets the text style of the trailing and leading month cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment TrailingLeadingDatesTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the background for the weekend month cells of the calendar month view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.WeekendDatesBackground" /> is null
        /// </value>
        [Parameter] public RenderFragment WeekendDatesBackground { get; set; }
        /// <summary>
        /// Gets or sets the text style of the weekend month cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarMonthView.WeekendDatesTextStyle" /> is null.
        /// </value>
        [Parameter] public RenderFragment WeekendDatesTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the properties which allows to customize the week number view of the calendar month view.
        /// </summary>
        [Parameter] public RenderFragment WeekNumberStyle { get; set; }

        public new SMTC.CalendarMonthView NativeControl => (SMTC.CalendarMonthView)((BindableObject)this).NativeControl;

        protected override SMTC.CalendarMonthView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundColor):
                    if (!Equals(BackgroundColor, value))
                    {
                        BackgroundColor = (Color)value;
                        NativeControl.Background = BackgroundColor;
                    }
                    break;
                case nameof(DisabledDatesBackgroundColor):
                    if (!Equals(DisabledDatesBackgroundColor, value))
                    {
                        DisabledDatesBackgroundColor = (Color)value;
                        NativeControl.DisabledDatesBackground = DisabledDatesBackgroundColor;
                    }
                    break;
                case nameof(FirstDayOfWeek):
                    if (!Equals(FirstDayOfWeek, value))
                    {
                        FirstDayOfWeek = (DayOfWeek?)value;
                        NativeControl.FirstDayOfWeek = FirstDayOfWeek ?? (DayOfWeek)SMTC.CalendarMonthView.FirstDayOfWeekProperty.DefaultValue;
                    }
                    break;
                case nameof(NumberOfVisibleWeeks):
                    if (!Equals(NumberOfVisibleWeeks, value))
                    {
                        NumberOfVisibleWeeks = (int?)value;
                        NativeControl.NumberOfVisibleWeeks = NumberOfVisibleWeeks ?? (int)SMTC.CalendarMonthView.NumberOfVisibleWeeksProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowWeekNumber):
                    if (!Equals(ShowWeekNumber, value))
                    {
                        ShowWeekNumber = (bool?)value;
                        NativeControl.ShowWeekNumber = ShowWeekNumber ?? (bool)SMTC.CalendarMonthView.ShowWeekNumberProperty.DefaultValue;
                    }
                    break;
                case nameof(SpecialDatesBackgroundColor):
                    if (!Equals(SpecialDatesBackgroundColor, value))
                    {
                        SpecialDatesBackgroundColor = (Color)value;
                        NativeControl.SpecialDatesBackground = SpecialDatesBackgroundColor;
                    }
                    break;
                case nameof(SpecialDayPredicate):
                    if (!Equals(SpecialDayPredicate, value))
                    {
                        SpecialDayPredicate = (Func<DateTime, SMTC.CalendarIconDetails>)value;
                        NativeControl.SpecialDayPredicate = SpecialDayPredicate;
                    }
                    break;
                case nameof(TodayBackgroundColor):
                    if (!Equals(TodayBackgroundColor, value))
                    {
                        TodayBackgroundColor = (Color)value;
                        NativeControl.TodayBackground = TodayBackgroundColor;
                    }
                    break;
                case nameof(TrailingLeadingDatesBackgroundColor):
                    if (!Equals(TrailingLeadingDatesBackgroundColor, value))
                    {
                        TrailingLeadingDatesBackgroundColor = (Color)value;
                        NativeControl.TrailingLeadingDatesBackground = TrailingLeadingDatesBackgroundColor;
                    }
                    break;
                case nameof(WeekendDatesBackgroundColor):
                    if (!Equals(WeekendDatesBackgroundColor, value))
                    {
                        WeekendDatesBackgroundColor = (Color)value;
                        NativeControl.WeekendDatesBackground = WeekendDatesBackgroundColor;
                    }
                    break;
                case nameof(WeekendDays):
                    if (!Equals(WeekendDays, value))
                    {
                        WeekendDays = (List<DayOfWeek>)value;
                        NativeControl.WeekendDays = WeekendDays;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;
                case nameof(CellTemplate):
                    CellTemplate = (RenderFragment)value;
                    break;
                case nameof(DisabledDatesBackground):
                    DisabledDatesBackground = (RenderFragment)value;
                    break;
                case nameof(DisabledDatesTextStyle):
                    DisabledDatesTextStyle = (RenderFragment)value;
                    break;
                case nameof(HeaderView):
                    HeaderView = (RenderFragment)value;
                    break;
                case nameof(RangeTextStyle):
                    RangeTextStyle = (RenderFragment)value;
                    break;
                case nameof(SelectionTextStyle):
                    SelectionTextStyle = (RenderFragment)value;
                    break;
                case nameof(SpecialDatesBackground):
                    SpecialDatesBackground = (RenderFragment)value;
                    break;
                case nameof(SpecialDatesTextStyle):
                    SpecialDatesTextStyle = (RenderFragment)value;
                    break;
                case nameof(TextStyle):
                    TextStyle = (RenderFragment)value;
                    break;
                case nameof(TodayBackground):
                    TodayBackground = (RenderFragment)value;
                    break;
                case nameof(TodayTextStyle):
                    TodayTextStyle = (RenderFragment)value;
                    break;
                case nameof(TrailingLeadingDatesBackground):
                    TrailingLeadingDatesBackground = (RenderFragment)value;
                    break;
                case nameof(TrailingLeadingDatesTextStyle):
                    TrailingLeadingDatesTextStyle = (RenderFragment)value;
                    break;
                case nameof(WeekendDatesBackground):
                    WeekendDatesBackground = (RenderFragment)value;
                    break;
                case nameof(WeekendDatesTextStyle):
                    WeekendDatesTextStyle = (RenderFragment)value;
                    break;
                case nameof(WeekNumberStyle):
                    WeekNumberStyle = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.CalendarMonthView>(builder, sequence++, CellTemplate, (x, template) => x.CellTemplate = template);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, DisabledDatesBackground, (x, value) => x.DisabledDatesBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, DisabledDatesTextStyle, (x, value) => x.DisabledDatesTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, HeaderView, (x, value) => x.HeaderView = (SMTC.CalendarMonthHeaderView)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, RangeTextStyle, (x, value) => x.RangeTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, SelectionTextStyle, (x, value) => x.SelectionTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, SpecialDatesBackground, (x, value) => x.SpecialDatesBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, SpecialDatesTextStyle, (x, value) => x.SpecialDatesTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, TextStyle, (x, value) => x.TextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, TodayBackground, (x, value) => x.TodayBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, TodayTextStyle, (x, value) => x.TodayTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, TrailingLeadingDatesBackground, (x, value) => x.TrailingLeadingDatesBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, TrailingLeadingDatesTextStyle, (x, value) => x.TrailingLeadingDatesTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, WeekendDatesBackground, (x, value) => x.WeekendDatesBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, WeekendDatesTextStyle, (x, value) => x.WeekendDatesTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarMonthView>(builder, sequence++, WeekNumberStyle, (x, value) => x.WeekNumberStyle = (SMTC.CalendarWeekNumberStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
