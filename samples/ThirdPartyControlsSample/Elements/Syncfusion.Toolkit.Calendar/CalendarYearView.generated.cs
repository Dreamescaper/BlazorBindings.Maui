// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Calendar;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Calendar
{
    /// <summary>
    /// Represents a class which is used to used to configure all the properties and styles of calendar year, decade and century view.
    /// </summary>
    public partial class CalendarYearView : BlazorBindings.Maui.Elements.Element
    {
        static CalendarYearView()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the background for the year, decade and century cells of the calendar year, decade and century view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.Background" /> is Transparent.
        /// </value>
        [Parameter] public Color BackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the background for the disabled year, decade and century cells of the calendar year, decade and century view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.DisabledDatesBackground" /> is Transparent.
        /// </value>
        [Parameter] public Color DisabledDatesBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the background for the leading decade and century cells of the calendar decade and century view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.LeadingDatesBackground" /> is Transparent.
        /// </value>
        [Parameter] public Color LeadingDatesBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the format to customize the month text in calendar year view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.MonthFormat" /> is "MMM".
        /// </value>
        [Parameter] public string MonthFormat { get; set; }
        /// <summary>
        /// Gets or sets the background for the today year, decade and century cell of the calendar year, decade and century view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.TodayBackground" /> is Transparent.
        /// </value>
        [Parameter] public Color TodayBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the background for the year, decade and century cells of the calendar year, decade and century view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.Background" /> is Transparent.
        /// </value>
        [Parameter] public RenderFragment Background { get; set; }
        /// <summary>
        /// Gets or sets the year cell template or template selector.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.CellTemplate" /> is null.
        /// </value>
        [Parameter] public RenderFragment CellTemplate { get; set; }
        /// <summary>
        /// Gets or sets the background for the disabled year, decade and century cells of the calendar year, decade and century view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.DisabledDatesBackground" /> is Transparent.
        /// </value>
        [Parameter] public RenderFragment DisabledDatesBackground { get; set; }
        /// <summary>
        /// Gets or sets the text style of the disabled year, decade and century cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment DisabledDatesTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the background for the leading decade and century cells of the calendar decade and century view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.LeadingDatesBackground" /> is Transparent.
        /// </value>
        [Parameter] public RenderFragment LeadingDatesBackground { get; set; }
        /// <summary>
        /// Gets or sets the text style of the leading decade and century cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment LeadingDatesTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the text style of the range in-between year, decade and century cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment RangeTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the text style of the selection year, decade and century cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment SelectionTextStyle { get; set; }
        /// <summary>
        /// Gets or sets the text style of the year, decade and century cells text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment TextStyle { get; set; }
        /// <summary>
        /// Gets or sets the background for the today year, decade and century cell of the calendar year, decade and century view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Calendar.CalendarYearView.TodayBackground" /> is Transparent.
        /// </value>
        [Parameter] public RenderFragment TodayBackground { get; set; }
        /// <summary>
        /// Gets or sets the text style of the today year, decade and century cell text, that used to customize the text color, font, font size, font family and font attributes.
        /// </summary>
        [Parameter] public RenderFragment TodayTextStyle { get; set; }

        public new SMTC.CalendarYearView NativeControl => (SMTC.CalendarYearView)((BindableObject)this).NativeControl;

        protected override SMTC.CalendarYearView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundColor):
                    if (!Equals(BackgroundColor, value))
                    {
                        BackgroundColor = (Color)value;
                        NativeControl.Background = BackgroundColor;
                    }
                    break;
                case nameof(DisabledDatesBackgroundColor):
                    if (!Equals(DisabledDatesBackgroundColor, value))
                    {
                        DisabledDatesBackgroundColor = (Color)value;
                        NativeControl.DisabledDatesBackground = DisabledDatesBackgroundColor;
                    }
                    break;
                case nameof(LeadingDatesBackgroundColor):
                    if (!Equals(LeadingDatesBackgroundColor, value))
                    {
                        LeadingDatesBackgroundColor = (Color)value;
                        NativeControl.LeadingDatesBackground = LeadingDatesBackgroundColor;
                    }
                    break;
                case nameof(MonthFormat):
                    if (!Equals(MonthFormat, value))
                    {
                        MonthFormat = (string)value;
                        NativeControl.MonthFormat = MonthFormat;
                    }
                    break;
                case nameof(TodayBackgroundColor):
                    if (!Equals(TodayBackgroundColor, value))
                    {
                        TodayBackgroundColor = (Color)value;
                        NativeControl.TodayBackground = TodayBackgroundColor;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;
                case nameof(CellTemplate):
                    CellTemplate = (RenderFragment)value;
                    break;
                case nameof(DisabledDatesBackground):
                    DisabledDatesBackground = (RenderFragment)value;
                    break;
                case nameof(DisabledDatesTextStyle):
                    DisabledDatesTextStyle = (RenderFragment)value;
                    break;
                case nameof(LeadingDatesBackground):
                    LeadingDatesBackground = (RenderFragment)value;
                    break;
                case nameof(LeadingDatesTextStyle):
                    LeadingDatesTextStyle = (RenderFragment)value;
                    break;
                case nameof(RangeTextStyle):
                    RangeTextStyle = (RenderFragment)value;
                    break;
                case nameof(SelectionTextStyle):
                    SelectionTextStyle = (RenderFragment)value;
                    break;
                case nameof(TextStyle):
                    TextStyle = (RenderFragment)value;
                    break;
                case nameof(TodayBackground):
                    TodayBackground = (RenderFragment)value;
                    break;
                case nameof(TodayTextStyle):
                    TodayTextStyle = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.CalendarYearView>(builder, sequence++, CellTemplate, (x, template) => x.CellTemplate = template);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, DisabledDatesBackground, (x, value) => x.DisabledDatesBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, DisabledDatesTextStyle, (x, value) => x.DisabledDatesTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, LeadingDatesBackground, (x, value) => x.LeadingDatesBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, LeadingDatesTextStyle, (x, value) => x.LeadingDatesTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, RangeTextStyle, (x, value) => x.RangeTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, SelectionTextStyle, (x, value) => x.SelectionTextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, TextStyle, (x, value) => x.TextStyle = (SMTC.CalendarTextStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, TodayBackground, (x, value) => x.TodayBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CalendarYearView>(builder, sequence++, TodayTextStyle, (x, value) => x.TodayTextStyle = (SMTC.CalendarTextStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
