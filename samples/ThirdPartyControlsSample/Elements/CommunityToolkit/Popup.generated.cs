// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using BlazorBindings.Maui.Elements.Handlers;
using CMV = CommunityToolkit.Maui.Views;
using CommunityToolkit.Maui.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using MMP = Microsoft.Maui.Primitives;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements.CommunityToolkit
{
    public partial class Popup : BlazorBindings.Maui.Elements.Element
    {
        static Popup()
        {
            ElementHandlerRegistry.RegisterPropertyContentHandler<Popup>(nameof(ChildContent),
                (renderer, parent, component) => new ContentPropertyHandler<CMV.Popup>((x, value) => x.Content = (MC.View)value));
            RegisterAdditionalHandlers();
        }

        [Parameter] public bool? CanBeDismissedByTappingOutsideOfPopup { get; set; }
        [Parameter] public Color Color { get; set; }
        [Parameter] public MMP.LayoutAlignment? HorizontalOptions { get; set; }
        [Parameter] public Size? Size { get; set; }
        [Parameter] public MMP.LayoutAlignment? VerticalOptions { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public EventCallback<PopupClosedEventArgs> OnClosed { get; set; }
        [Parameter] public EventCallback<PopupOpenedEventArgs> OnOpened { get; set; }

        public new CMV.Popup NativeControl => (CMV.Popup)((Element)this).NativeControl;

        protected override MC.Element CreateNativeElement() => new CMV.Popup();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CanBeDismissedByTappingOutsideOfPopup):
                    if (!Equals(CanBeDismissedByTappingOutsideOfPopup, value))
                    {
                        CanBeDismissedByTappingOutsideOfPopup = (bool?)value;
                        NativeControl.CanBeDismissedByTappingOutsideOfPopup = CanBeDismissedByTappingOutsideOfPopup ?? (bool)CMV.Popup.CanBeDismissedByTappingOutsideOfPopupProperty.DefaultValue;
                    }
                    break;
                case nameof(Color):
                    if (!Equals(Color, value))
                    {
                        Color = (Color)value;
                        NativeControl.Color = Color;
                    }
                    break;
                case nameof(HorizontalOptions):
                    if (!Equals(HorizontalOptions, value))
                    {
                        HorizontalOptions = (MMP.LayoutAlignment?)value;
                        NativeControl.HorizontalOptions = HorizontalOptions ?? (MMP.LayoutAlignment)CMV.Popup.HorizontalOptionsProperty.DefaultValue;
                    }
                    break;
                case nameof(Size):
                    if (!Equals(Size, value))
                    {
                        Size = (Size?)value;
                        NativeControl.Size = Size ?? (Size)CMV.Popup.SizeProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalOptions):
                    if (!Equals(VerticalOptions, value))
                    {
                        VerticalOptions = (MMP.LayoutAlignment?)value;
                        NativeControl.VerticalOptions = VerticalOptions ?? (MMP.LayoutAlignment)CMV.Popup.VerticalOptionsProperty.DefaultValue;
                    }
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;
                case nameof(OnClosed):
                    if (!Equals(OnClosed, value))
                    {
                        void NativeControlClosed(object sender, PopupClosedEventArgs e) => InvokeAsync(() => OnClosed.InvokeAsync(e));

                        OnClosed = (EventCallback<PopupClosedEventArgs>)value;
                        NativeControl.Closed -= NativeControlClosed;
                        NativeControl.Closed += NativeControlClosed;
                    }
                    break;
                case nameof(OnOpened):
                    if (!Equals(OnOpened, value))
                    {
                        void NativeControlOpened(object sender, PopupOpenedEventArgs e) => InvokeAsync(() => OnOpened.InvokeAsync(e));

                        OnOpened = (EventCallback<PopupOpenedEventArgs>)value;
                        NativeControl.Opened -= NativeControlOpened;
                        NativeControl.Opened += NativeControlOpened;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty(builder, sequence++, typeof(Popup), ChildContent);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
