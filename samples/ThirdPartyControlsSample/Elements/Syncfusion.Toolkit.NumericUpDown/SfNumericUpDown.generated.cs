// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTN = Syncfusion.Maui.Toolkit.NumericUpDown;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.NumericUpDown
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.NumericUpDown.SfNumericUpDown" /> class allows users to adjust numeric values using increment and decrement buttons or by direct input. It supports value range constraints, step size, and culture-specific formatting.
    /// </summary>
    public partial class SfNumericUpDown : BlazorBindings.Maui.Elements.Syncfusion.Toolkit.NumericEntry.SfNumericEntry
    {
        static SfNumericUpDown()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether to enable or disable the cyclic behavior when the value reaches the minimum or maximum value.
        /// </summary>
        /// <value>
        /// The default value is <c>false</c>.
        /// </value>
        [Parameter] public bool? AutoReverse { get; set; }
        /// <summary>
        /// Gets or sets the value that is added to or subtracted from <see cref="P:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry.Value" /> when a large change is made, such as with the PageUP and PageDown keys.
        /// </summary>
        /// <value>
        /// The default value is <c>10</c>.
        /// </value>
        [Parameter] public double? LargeChange { get; set; }
        /// <summary>
        /// Gets or sets the value that is added to or subtracted from <see cref="P:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry.Value" /> when a small change is made, such as with an arrow key or scrolling.
        /// </summary>
        /// <value>
        /// The default value is <c>1</c>.
        /// </value>
        [Parameter] public double? SmallChange { get; set; }
        /// <summary>
        /// Gets or sets the alignment of the buttons used to align increment or decrement the <see cref="P:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry.Value" /> property.
        /// </summary>
        /// <value>
        /// The default value is <c>Right</c>.
        /// </value>
        [Parameter] public SMTN.UpDownButtonAlignment? UpDownButtonAlignment { get; set; }
        /// <summary>
        /// Gets or sets the color of the up and down buttons in the <see cref="N:Syncfusion.Maui.Toolkit.NumericUpDown" /> control.
        /// </summary>
        /// <value>
        /// The default value is <see cref="F:Microsoft.Maui.Graphics.Colors.Black" />.
        /// </value>
        [Parameter] public Color UpDownButtonColor { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates the placement of buttons used to increment or decrement the <see cref="P:Syncfusion.Maui.Toolkit.NumericEntry.SfNumericEntry.Value" /> property.
        /// </summary>
        /// <value>
        /// The default value is <see cref="F:Syncfusion.Maui.Toolkit.NumericUpDown.NumericUpDownPlacementMode.Inline" />.
        /// </value>
        [Parameter] public SMTN.NumericUpDownPlacementMode? UpDownPlacementMode { get; set; }
        /// <summary>
        /// Gets or sets a Data template for down button.
        /// </summary>
        /// <value>
        /// The default value is null.
        /// </value>
        [Parameter] public RenderFragment DownButtonTemplate { get; set; }
        /// <summary>
        /// Gets or sets a Data template for up button.
        /// </summary>
        /// <value>
        /// The default value is null.
        /// </value>
        [Parameter] public RenderFragment UpButtonTemplate { get; set; }

        public new SMTN.SfNumericUpDown NativeControl => (SMTN.SfNumericUpDown)((BindableObject)this).NativeControl;

        protected override SMTN.SfNumericUpDown CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AutoReverse):
                    if (!Equals(AutoReverse, value))
                    {
                        AutoReverse = (bool?)value;
                        NativeControl.AutoReverse = AutoReverse ?? (bool)SMTN.SfNumericUpDown.AutoReverseProperty.DefaultValue;
                    }
                    break;
                case nameof(LargeChange):
                    if (!Equals(LargeChange, value))
                    {
                        LargeChange = (double?)value;
                        NativeControl.LargeChange = LargeChange ?? (double)SMTN.SfNumericUpDown.LargeChangeProperty.DefaultValue;
                    }
                    break;
                case nameof(SmallChange):
                    if (!Equals(SmallChange, value))
                    {
                        SmallChange = (double?)value;
                        NativeControl.SmallChange = SmallChange ?? (double)SMTN.SfNumericUpDown.SmallChangeProperty.DefaultValue;
                    }
                    break;
                case nameof(UpDownButtonAlignment):
                    if (!Equals(UpDownButtonAlignment, value))
                    {
                        UpDownButtonAlignment = (SMTN.UpDownButtonAlignment?)value;
                        NativeControl.UpDownButtonAlignment = UpDownButtonAlignment ?? (SMTN.UpDownButtonAlignment)SMTN.SfNumericUpDown.UpDownButtonAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(UpDownButtonColor):
                    if (!Equals(UpDownButtonColor, value))
                    {
                        UpDownButtonColor = (Color)value;
                        NativeControl.UpDownButtonColor = UpDownButtonColor;
                    }
                    break;
                case nameof(UpDownPlacementMode):
                    if (!Equals(UpDownPlacementMode, value))
                    {
                        UpDownPlacementMode = (SMTN.NumericUpDownPlacementMode?)value;
                        NativeControl.UpDownPlacementMode = UpDownPlacementMode ?? (SMTN.NumericUpDownPlacementMode)SMTN.SfNumericUpDown.UpDownPlacementModeProperty.DefaultValue;
                    }
                    break;
                case nameof(DownButtonTemplate):
                    DownButtonTemplate = (RenderFragment)value;
                    break;
                case nameof(UpButtonTemplate):
                    UpButtonTemplate = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTN.SfNumericUpDown>(builder, sequence++, DownButtonTemplate, (x, template) => x.DownButtonTemplate = template);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTN.SfNumericUpDown>(builder, sequence++, UpButtonTemplate, (x, template) => x.UpButtonTemplate = template);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
