// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using AC = AlohaKit.Controls;
using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using BlazorBindings.Maui.Elements.Handlers;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements.AlohaKit
{
    public partial class NumericUpDown : BlazorBindings.Maui.Elements.GraphicsView
    {
        static NumericUpDown()
        {
            ElementHandlerRegistry.RegisterPropertyContentHandler<NumericUpDown>(nameof(Background),
                (renderer, parent, component) => new ContentPropertyHandler<AC.NumericUpDown>((x, value) => x.Background = (MC.Brush)value));
            RegisterAdditionalHandlers();
        }

        [Parameter] public Color Color { get; set; }
        [Parameter] public double? FontSize { get; set; }
        [Parameter] public double? Interval { get; set; }
        [Parameter] public double? Maximum { get; set; }
        [Parameter] public double? Minimum { get; set; }
        [Parameter] public AC.NumericUpDownDrawable NumericUpDownDrawable { get; set; }
        [Parameter] public Color TextColor { get; set; }
        [Parameter] public double? Value { get; set; }
        [Parameter] public EventCallback<double> ValueChanged { get; set; }

        public new AC.NumericUpDown NativeControl => (AC.NumericUpDown)((Element)this).NativeControl;

        protected override MC.Element CreateNativeElement() => new AC.NumericUpDown();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Color):
                    if (!Equals(Color, value))
                    {
                        Color = (Color)value;
                        NativeControl.Color = Color;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (double?)value;
                        NativeControl.FontSize = FontSize ?? (double)AC.NumericUpDown.FontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(Interval):
                    if (!Equals(Interval, value))
                    {
                        Interval = (double?)value;
                        NativeControl.Interval = Interval ?? (double)AC.NumericUpDown.IntervalProperty.DefaultValue;
                    }
                    break;
                case nameof(Maximum):
                    if (!Equals(Maximum, value))
                    {
                        Maximum = (double?)value;
                        NativeControl.Maximum = Maximum ?? (double)AC.NumericUpDown.MaximumProperty.DefaultValue;
                    }
                    break;
                case nameof(Minimum):
                    if (!Equals(Minimum, value))
                    {
                        Minimum = (double?)value;
                        NativeControl.Minimum = Minimum ?? (double)AC.NumericUpDown.MinimumProperty.DefaultValue;
                    }
                    break;
                case nameof(NumericUpDownDrawable):
                    if (!Equals(NumericUpDownDrawable, value))
                    {
                        NumericUpDownDrawable = (AC.NumericUpDownDrawable)value;
                        NativeControl.NumericUpDownDrawable = NumericUpDownDrawable;
                    }
                    break;
                case nameof(TextColor):
                    if (!Equals(TextColor, value))
                    {
                        TextColor = (Color)value;
                        NativeControl.TextColor = TextColor;
                    }
                    break;
                case nameof(Value):
                    if (!Equals(Value, value))
                    {
                        Value = (double?)value;
                        NativeControl.Value = Value ?? (double)AC.NumericUpDown.ValueProperty.DefaultValue;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;
                case nameof(ValueChanged):
                    if (!Equals(ValueChanged, value))
                    {
                        void NativeControlValueChanged(object sender, MC.ValueChangedEventArgs e)
                        {
                            var value = NativeControl.Value;
                            Value = value;
                            InvokeAsync(() => ValueChanged.InvokeAsync(value));
                        }

                        ValueChanged = (EventCallback<double>)value;
                        NativeControl.ValueChanged -= NativeControlValueChanged;
                        NativeControl.ValueChanged += NativeControlValueChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty(builder, sequence++, typeof(NumericUpDown), Background);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
