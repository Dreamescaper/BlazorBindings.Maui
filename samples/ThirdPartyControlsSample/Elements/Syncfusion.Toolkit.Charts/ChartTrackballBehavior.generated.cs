// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Enables the trackball functionality in the <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart" /> to provide interactive data point tracking.
    /// </summary>
    public partial class ChartTrackballBehavior : ChartBehavior
    {
        static ChartTrackballBehavior()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the value that indicates whether to activate trackball based on the specified touch mode.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartTrackballActivationMode" /> values, with the default value being <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartTrackballActivationMode.TouchMove" /> for Windows and Mac, and <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartTrackballActivationMode.LongPress" /> for Android and iOS.
        /// </value>
        [Parameter] public SMTC.ChartTrackballActivationMode? ActivationMode { get; set; }
        /// <summary>
        /// Gets or sets display mode of trackball labels. By default, labels for all the series under the current point index value will be shown.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.LabelDisplayMode" /> values and its defaults value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.LabelDisplayMode.FloatAllPoints" />
        /// </value>
        [Parameter] public SMTC.LabelDisplayMode? DisplayMode { get; set; }
        /// <summary>
        /// Gets or sets the value that indicates whether to show label for the trackball.
        /// </summary>
        /// <value>
        /// It accepts <c>bool</c> values and its default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? ShowLabel { get; set; }
        /// <summary>
        /// Gets or sets the value that indicates whether to show the trackball line.
        /// </summary>
        /// <value>
        /// It accepts <c>bool</c> values and its default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? ShowLine { get; set; }
        /// <summary>
        /// Gets or sets the value that indicates whether to show markers for the trackball.
        /// </summary>
        /// <value>
        /// It accepts <c>bool</c> values and its default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? ShowMarkers { get; set; }
        /// <summary>
        /// Gets or sets the value to customize the appearance of trackball labels.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLabelStyle" /> as its value.
        /// </value>
        [Parameter] public RenderFragment LabelStyle { get; set; }
        /// <summary>
        /// Gets or sets the value to customize the appearance of the trackball line.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLineStyle" /> as its value.
        /// </value>
        [Parameter] public RenderFragment LineStyle { get; set; }
        /// <summary>
        /// Gets or sets the option for customize the trackball markers.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartMarkerSettings" /> as its value.
        /// </value>
        [Parameter] public RenderFragment MarkerSettings { get; set; }

        public new SMTC.ChartTrackballBehavior NativeControl => (SMTC.ChartTrackballBehavior)((BindableObject)this).NativeControl;

        protected override SMTC.ChartTrackballBehavior CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ActivationMode):
                    if (!Equals(ActivationMode, value))
                    {
                        ActivationMode = (SMTC.ChartTrackballActivationMode?)value;
                        NativeControl.ActivationMode = ActivationMode ?? (SMTC.ChartTrackballActivationMode)SMTC.ChartTrackballBehavior.ActivationModeProperty.DefaultValue;
                    }
                    break;
                case nameof(DisplayMode):
                    if (!Equals(DisplayMode, value))
                    {
                        DisplayMode = (SMTC.LabelDisplayMode?)value;
                        NativeControl.DisplayMode = DisplayMode ?? (SMTC.LabelDisplayMode)SMTC.ChartTrackballBehavior.DisplayModeProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowLabel):
                    if (!Equals(ShowLabel, value))
                    {
                        ShowLabel = (bool?)value;
                        NativeControl.ShowLabel = ShowLabel ?? (bool)SMTC.ChartTrackballBehavior.ShowLabelProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowLine):
                    if (!Equals(ShowLine, value))
                    {
                        ShowLine = (bool?)value;
                        NativeControl.ShowLine = ShowLine ?? (bool)SMTC.ChartTrackballBehavior.ShowLineProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowMarkers):
                    if (!Equals(ShowMarkers, value))
                    {
                        ShowMarkers = (bool?)value;
                        NativeControl.ShowMarkers = ShowMarkers ?? (bool)SMTC.ChartTrackballBehavior.ShowMarkersProperty.DefaultValue;
                    }
                    break;
                case nameof(LabelStyle):
                    LabelStyle = (RenderFragment)value;
                    break;
                case nameof(LineStyle):
                    LineStyle = (RenderFragment)value;
                    break;
                case nameof(MarkerSettings):
                    MarkerSettings = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartTrackballBehavior>(builder, sequence++, LabelStyle, (x, value) => x.LabelStyle = (SMTC.ChartLabelStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartTrackballBehavior>(builder, sequence++, LineStyle, (x, value) => x.LineStyle = (SMTC.ChartLineStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartTrackballBehavior>(builder, sequence++, MarkerSettings, (x, value) => x.MarkerSettings = (SMTC.ChartMarkerSettings)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
