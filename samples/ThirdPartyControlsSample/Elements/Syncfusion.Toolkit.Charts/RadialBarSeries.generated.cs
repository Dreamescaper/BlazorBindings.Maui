// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.RadialBarSeries" /> displays data in different categories. Its typically used to make comparisons among a set of given data using the circular shapes of the bars.
    /// </summary>
    public partial class RadialBarSeries : CircularSeries
    {
        static RadialBarSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the <see cref="P:Syncfusion.Maui.Toolkit.Charts.RadialBarSeries.CapStyle" /> value, that represents the shape of the start and end points of a radial segment.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.Charts.RadialBarSeries.CapStyle" /> values, and its default is <see cref="F:Syncfusion.Maui.Toolkit.Charts.CapStyle.BothFlat" />
        /// </value>
        [Parameter] public SMTC.CapStyle? CapStyle { get; set; }
        /// <summary>
        /// Gets or sets the gap ratio, which indicates the distance between two individual segments.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values, and its default value is <c>0.2</c>.
        /// </value>
        [Parameter] public double? GapRatio { get; set; }
        /// <summary>
        /// Gets or sets a value that determines the size of the inner circle.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values, and the default value is 0.4.
        /// </value>
        [Parameter] public double? InnerRadius { get; set; }
        /// <summary>
        /// Gets or sets the maximum value for the radial bar segments.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values and its default value is <see cref="F:System.Double.NaN" />
        /// </value>
        [Parameter] public double? MaximumValue { get; set; }
        /// <summary>
        /// Gets or sets the brush value that represents the fill color of the track in a radial bar chart.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        [Parameter] public Color TrackFillColor { get; set; }
        /// <summary>
        /// Gets or sets the brush value that represents the stroke color of the track in a radial bar chart.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        [Parameter] public Color TrackStrokeColor { get; set; }
        /// <summary>
        /// Gets or sets the value that represents the stroke thickness of the track in a radial bar chart.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values and its default value is 1.
        /// </value>
        [Parameter] public double? TrackStrokeWidth { get; set; }
        /// <summary>
        /// Gets or sets the view that added to the center of the radial bar.
        /// </summary>
        /// <value>
        /// It accepts any <see cref="T:Microsoft.Maui.Controls.View" /> object, and its default value is null.
        /// </value>
        /// <remarks>
        /// Accepts single View element.
        /// </remarks>
        [Parameter] public RenderFragment CenterView { get; set; }
        /// <summary>
        /// Gets or sets the brush value that represents the fill color of the track in a radial bar chart.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment TrackFill { get; set; }
        /// <summary>
        /// Gets or sets the brush value that represents the stroke color of the track in a radial bar chart.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment TrackStroke { get; set; }

        public new SMTC.RadialBarSeries NativeControl => (SMTC.RadialBarSeries)((BindableObject)this).NativeControl;

        protected override SMTC.RadialBarSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CapStyle):
                    if (!Equals(CapStyle, value))
                    {
                        CapStyle = (SMTC.CapStyle?)value;
                        NativeControl.CapStyle = CapStyle ?? (SMTC.CapStyle)SMTC.RadialBarSeries.CapStyleProperty.DefaultValue;
                    }
                    break;
                case nameof(GapRatio):
                    if (!Equals(GapRatio, value))
                    {
                        GapRatio = (double?)value;
                        NativeControl.GapRatio = GapRatio ?? (double)SMTC.RadialBarSeries.GapRatioProperty.DefaultValue;
                    }
                    break;
                case nameof(InnerRadius):
                    if (!Equals(InnerRadius, value))
                    {
                        InnerRadius = (double?)value;
                        NativeControl.InnerRadius = InnerRadius ?? (double)SMTC.RadialBarSeries.InnerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumValue):
                    if (!Equals(MaximumValue, value))
                    {
                        MaximumValue = (double?)value;
                        NativeControl.MaximumValue = MaximumValue ?? (double)SMTC.RadialBarSeries.MaximumValueProperty.DefaultValue;
                    }
                    break;
                case nameof(TrackFillColor):
                    if (!Equals(TrackFillColor, value))
                    {
                        TrackFillColor = (Color)value;
                        NativeControl.TrackFill = TrackFillColor;
                    }
                    break;
                case nameof(TrackStrokeColor):
                    if (!Equals(TrackStrokeColor, value))
                    {
                        TrackStrokeColor = (Color)value;
                        NativeControl.TrackStroke = TrackStrokeColor;
                    }
                    break;
                case nameof(TrackStrokeWidth):
                    if (!Equals(TrackStrokeWidth, value))
                    {
                        TrackStrokeWidth = (double?)value;
                        NativeControl.TrackStrokeWidth = TrackStrokeWidth ?? (double)SMTC.RadialBarSeries.TrackStrokeWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(CenterView):
                    CenterView = (RenderFragment)value;
                    break;
                case nameof(TrackFill):
                    TrackFill = (RenderFragment)value;
                    break;
                case nameof(TrackStroke):
                    TrackStroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.RadialBarSeries>(builder, sequence++, CenterView, (x, value) => x.CenterView = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.RadialBarSeries>(builder, sequence++, TrackFill, (x, value) => x.TrackFill = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.RadialBarSeries>(builder, sequence++, TrackStroke, (x, value) => x.TrackStroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
