// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Collections.Generic;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Provides the base functionality for selection behaviors in charts.
    /// </summary>
    public abstract partial class ChartSelectionBehavior : ChartBehavior
    {
        static ChartSelectionBehavior()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the index of segment or series to be selected in selection behavior.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:System.Int32" /> value and its default value is -1.
        /// </value>
        [Parameter] public int? SelectedIndex { get; set; }
        /// <summary>
        /// Gets or sets the list of segments or series to be selected in selection behavior.
        /// </summary>
        /// <value>
        /// This property takes the list of <see cref="T:System.Collections.Generic.List`1" /> where <see cref="T:System.Int32" /> represents the integer values and its default value is null.
        /// </value>
        [Parameter] public List<int> SelectedIndexes { get; set; }
        /// <summary>
        /// Gets or sets the selection brush color for selection behavior.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Microsoft.Maui.Controls.Brush" /> value and its default value is null.
        /// </value>
        [Parameter] public Color SelectionColor { get; set; }
        /// <summary>
        /// Gets or sets the selection mode for selection behavior.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartSelectionType" /> as value and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartSelectionType.Single" />.
        /// </value>
        [Parameter] public SMTC.ChartSelectionType? Type { get; set; }
        /// <summary>
        /// Gets or sets the selection brush color for selection behavior.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Microsoft.Maui.Controls.Brush" /> value and its default value is null.
        /// </value>
        [Parameter] public RenderFragment SelectionBrush { get; set; }
        /// <summary>
        /// Occurs when the user clicks on the series segment or sets the value for <see cref="P:Syncfusion.Maui.Toolkit.Charts.ChartSelectionBehavior.SelectedIndex" /> or <see cref="P:Syncfusion.Maui.Toolkit.Charts.ChartSelectionBehavior.SelectedIndexes" /> properties. This event is triggered before a segment or series is selected.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartSelectionChangingEventArgs> OnSelectionChanging { get; set; }
        /// <summary>
        /// This event is triggered after a clicked series segment or sets the value for <see cref="P:Syncfusion.Maui.Toolkit.Charts.ChartSelectionBehavior.SelectedIndex" /> or <see cref="P:Syncfusion.Maui.Toolkit.Charts.ChartSelectionBehavior.SelectedIndexes" /> properties. It provides information about the selection change, including the currently selected index and the previously selected index.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartSelectionChangedEventArgs> OnSelectionChanged { get; set; }

        public new SMTC.ChartSelectionBehavior NativeControl => (SMTC.ChartSelectionBehavior)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(SelectedIndex):
                    if (!Equals(SelectedIndex, value))
                    {
                        SelectedIndex = (int?)value;
                        NativeControl.SelectedIndex = SelectedIndex ?? (int)SMTC.ChartSelectionBehavior.SelectedIndexProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectedIndexes):
                    if (!Equals(SelectedIndexes, value))
                    {
                        SelectedIndexes = (List<int>)value;
                        NativeControl.SelectedIndexes = SelectedIndexes;
                    }
                    break;
                case nameof(SelectionColor):
                    if (!Equals(SelectionColor, value))
                    {
                        SelectionColor = (Color)value;
                        NativeControl.SelectionBrush = SelectionColor;
                    }
                    break;
                case nameof(Type):
                    if (!Equals(Type, value))
                    {
                        Type = (SMTC.ChartSelectionType?)value;
                        NativeControl.Type = Type ?? (SMTC.ChartSelectionType)SMTC.ChartSelectionBehavior.TypeProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectionBrush):
                    SelectionBrush = (RenderFragment)value;
                    break;
                case nameof(OnSelectionChanging):
                    if (!Equals(OnSelectionChanging, value))
                    {
                        void NativeControlSelectionChanging(object sender, SMTC.ChartSelectionChangingEventArgs e) => InvokeEventCallback(OnSelectionChanging, e);

                        OnSelectionChanging = (EventCallback<SMTC.ChartSelectionChangingEventArgs>)value;
                        NativeControl.SelectionChanging -= NativeControlSelectionChanging;
                        NativeControl.SelectionChanging += NativeControlSelectionChanging;
                    }
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, SMTC.ChartSelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<SMTC.ChartSelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartSelectionBehavior>(builder, sequence++, SelectionBrush, (x, value) => x.SelectionBrush = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
