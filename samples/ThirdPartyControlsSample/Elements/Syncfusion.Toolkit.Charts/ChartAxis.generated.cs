// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The ChartAxis is the base class for all types of axes.
    /// </summary>
    public abstract partial class ChartAxis : BlazorBindings.Maui.Elements.Element
    {
        static ChartAxis()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the delta value that specifies the range of data that should always be visible in the chart. It determines the amount of range the chart will scroll by when new data points are added, ensuring that a specified range of data is always visible.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values, and its default value is <see cref="F:System.Double.NaN" />
        /// </value>
        [Parameter] public double? AutoScrollingDelta { get; set; }
        /// <summary>
        /// Gets or sets the mode to determine whether the axis should be auto scrolled from the start or end positions.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAutoScrollingMode" /> values, and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartAutoScrollingMode.End" />, means that the chart will always display the most recent data points, and the axis will be automatically scrolled to the right to show the newly added data.
        /// </value>
        [Parameter] public SMTC.ChartAutoScrollingMode? AutoScrollingMode { get; set; }
        /// <summary>
        /// Gets or sets a value to provide padding to the axis line.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values and its default value is 0.
        /// </value>
        [Parameter] public double? AxisLineOffset { get; set; }
        /// <summary>
        /// Gets or sets the value for the CrossAxisName of chart axis.
        /// </summary>
        /// <value>
        /// It accepts string value and the default value is null.
        /// </value>
        [Parameter] public string CrossAxisName { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to position an axis anywhere in the chart area.
        /// </summary>
        /// <value>
        /// This property takes the <c>object</c> as its value and the default value is double.NaN.
        /// </value>
        [Parameter] public object CrossesAt { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the rendering position of the edge labels.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.EdgeLabelsDrawingMode" /> value and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.EdgeLabelsDrawingMode.Center" />.
        /// </value>
        [Parameter] public SMTC.EdgeLabelsDrawingMode? EdgeLabelsDrawingMode { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to calculate the axis intervals on zooming.
        /// </summary>
        /// <value>
        /// It accepts the bool values and its default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? EnableAutoIntervalOnZooming { get; set; }
        /// <summary>
        /// Gets or sets the value that indicates whether the axis' visible range is inversed.
        /// </summary>
        /// <value>
        /// It accepts the bool values and its default value is <c>False</c>.
        /// </value>
        [Parameter] public bool? IsInversed { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to show/hide the chart axis.
        /// </summary>
        /// <value>
        /// It accepts bool values and its default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? IsVisible { get; set; }
        /// <summary>
        /// Gets or sets the value that determines the distance between the axis label and axis title.
        /// </summary>
        /// <value>
        /// This property take double value and its default value is 0.
        /// </value>
        [Parameter] public double? LabelExtent { get; set; }
        /// <summary>
        /// Gets or sets the value for the rotation angle of the axis labels.
        /// </summary>
        /// <value>
        /// It accepts the <c>double</c> values and the default value is 0.
        /// </value>
        [Parameter] public double? LabelRotation { get; set; }
        /// <summary>
        /// Gets or sets a value that determines the mechanism for avoiding the overlapping of axis labels. The overlapping labels can be hidden, wrapped or placed on the next row.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.AxisLabelsIntersectAction" /> values and the default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.AxisLabelsIntersectAction.Hide" />.
        /// </value>
        [Parameter] public SMTC.AxisLabelsIntersectAction? LabelsIntersectAction { get; set; }
        /// <summary>
        /// Gets or sets the position of the axis labels.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.AxisElementPosition" /> values and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.AxisElementPosition.Outside" />.
        /// </value>
        [Parameter] public SMTC.AxisElementPosition? LabelsPosition { get; set; }
        /// <summary>
        /// Gets or sets the unique name of the axis, which will be used to identify the segment axis of the strip line.
        /// </summary>
        /// <value>
        /// This property takes the string value and its default value is string.Empty.
        /// </value>
        [Parameter] public string Name { get; set; }
        /// <summary>
        /// Gets or sets a value to provide padding to the axis at end position.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values and its default value is 0.
        /// </value>
        [Parameter] public double? PlotOffsetEnd { get; set; }
        /// <summary>
        /// Gets or sets a value to provide padding to the axis at the start position.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values and its default value is 0.
        /// </value>
        [Parameter] public double? PlotOffsetStart { get; set; }
        /// <summary>
        /// Gets or sets a value that determines whether the crossing axis should be placed at the crossing position or not.
        /// </summary>
        /// <value>
        /// It accepts bool values and the default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? RenderNextToCrossingValue { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the axis grid lines can be displayed or not.
        /// </summary>
        /// <value>
        /// It accepts the bool value and its default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? ShowMajorGridLines { get; set; }
        /// <summary>
        /// Gets or sets the value that indicates whether to show the trackball axis label.
        /// </summary>
        /// <value>
        /// It accepts the bool values and its default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? ShowTrackballLabel { get; set; }
        /// <summary>
        /// Gets or sets the position of the axis tick lines.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.AxisElementPosition" /> values and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.AxisElementPosition.Outside" />.
        /// </value>
        [Parameter] public SMTC.AxisElementPosition? TickPosition { get; set; }
        /// <summary>
        /// Gets or sets the value that defines the percentage of the visible range from the total range of axis values.
        /// </summary>
        /// <value>
        /// It accepts the double values and its default value is 1.
        /// </value>
        [Parameter] public double? ZoomFactor { get; set; }
        /// <summary>
        /// Gets or sets the value that defines the zoom position for the actual range of the axis.
        /// </summary>
        /// <value>
        /// It accepts the double values and its default value is 0.
        /// </value>
        [Parameter] public double? ZoomPosition { get; set; }
        /// <summary>
        /// Gets or sets the value to customize the appearance of the chart axis line.
        /// </summary>
        /// <value>
        /// This property accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLineStyle" /> value.
        /// </value>
        [Parameter] public RenderFragment AxisLineStyle { get; set; }
        /// <summary>
        /// Gets or sets the value to customize the appearance of chart axis labels.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAxisLabelStyle" /> value.
        /// </value>
        [Parameter] public RenderFragment LabelStyle { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLineStyle" /> to customize the appearance of the major grid lines.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLineStyle" />.
        /// </value>
        [Parameter] public RenderFragment MajorGridLineStyle { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAxisTickStyle" /> to customize the appearance of the major tick lines.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAxisTickStyle" /> value.
        /// </value>
        [Parameter] public RenderFragment MajorTickStyle { get; set; }
        /// <summary>
        /// Gets or sets the title for the chart axis.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAxisTitle" /> value.
        /// </value>
        [Parameter] public RenderFragment Title { get; set; }
        /// <summary>
        /// Gets or sets option for customize the trackball axis label.
        /// </summary>
        /// <value>
        /// It accepts the bool values and its default value is <c>True</c>.
        /// </value>
        [Parameter] public RenderFragment TrackballLabelStyle { get; set; }
        /// <summary>
        /// Gets or sets the DataTemplate to customize the appearance of the axis Trackball labels.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.DataTemplate" />value and its default value is null.
        /// </value>
        [Parameter] public RenderFragment TrackballLabelTemplate { get; set; }
        /// <summary>
        /// This event occurs when the axis label is created.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartAxisLabelEventArgs> OnLabelCreated { get; set; }
        /// <summary>
        /// This event occurs when the actual range is changed.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ActualRangeChangedEventArgs> OnActualRangeChanged { get; set; }

        public new SMTC.ChartAxis NativeControl => (SMTC.ChartAxis)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AutoScrollingDelta):
                    if (!Equals(AutoScrollingDelta, value))
                    {
                        AutoScrollingDelta = (double?)value;
                        NativeControl.AutoScrollingDelta = AutoScrollingDelta ?? (double)SMTC.ChartAxis.AutoScrollingDeltaProperty.DefaultValue;
                    }
                    break;
                case nameof(AutoScrollingMode):
                    if (!Equals(AutoScrollingMode, value))
                    {
                        AutoScrollingMode = (SMTC.ChartAutoScrollingMode?)value;
                        NativeControl.AutoScrollingMode = AutoScrollingMode ?? (SMTC.ChartAutoScrollingMode)SMTC.ChartAxis.AutoScrollingModeProperty.DefaultValue;
                    }
                    break;
                case nameof(AxisLineOffset):
                    if (!Equals(AxisLineOffset, value))
                    {
                        AxisLineOffset = (double?)value;
                        NativeControl.AxisLineOffset = AxisLineOffset ?? (double)SMTC.ChartAxis.AxisLineOffsetProperty.DefaultValue;
                    }
                    break;
                case nameof(CrossAxisName):
                    if (!Equals(CrossAxisName, value))
                    {
                        CrossAxisName = (string)value;
                        NativeControl.CrossAxisName = CrossAxisName;
                    }
                    break;
                case nameof(CrossesAt):
                    if (!Equals(CrossesAt, value))
                    {
                        CrossesAt = (object)value;
                        NativeControl.CrossesAt = CrossesAt;
                    }
                    break;
                case nameof(EdgeLabelsDrawingMode):
                    if (!Equals(EdgeLabelsDrawingMode, value))
                    {
                        EdgeLabelsDrawingMode = (SMTC.EdgeLabelsDrawingMode?)value;
                        NativeControl.EdgeLabelsDrawingMode = EdgeLabelsDrawingMode ?? (SMTC.EdgeLabelsDrawingMode)SMTC.ChartAxis.EdgeLabelsDrawingModeProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableAutoIntervalOnZooming):
                    if (!Equals(EnableAutoIntervalOnZooming, value))
                    {
                        EnableAutoIntervalOnZooming = (bool?)value;
                        NativeControl.EnableAutoIntervalOnZooming = EnableAutoIntervalOnZooming ?? (bool)SMTC.ChartAxis.EnableAutoIntervalOnZoomingProperty.DefaultValue;
                    }
                    break;
                case nameof(IsInversed):
                    if (!Equals(IsInversed, value))
                    {
                        IsInversed = (bool?)value;
                        NativeControl.IsInversed = IsInversed ?? (bool)SMTC.ChartAxis.IsInversedProperty.DefaultValue;
                    }
                    break;
                case nameof(IsVisible):
                    if (!Equals(IsVisible, value))
                    {
                        IsVisible = (bool?)value;
                        NativeControl.IsVisible = IsVisible ?? (bool)SMTC.ChartAxis.IsVisibleProperty.DefaultValue;
                    }
                    break;
                case nameof(LabelExtent):
                    if (!Equals(LabelExtent, value))
                    {
                        LabelExtent = (double?)value;
                        NativeControl.LabelExtent = LabelExtent ?? (double)SMTC.ChartAxis.LabelExtentProperty.DefaultValue;
                    }
                    break;
                case nameof(LabelRotation):
                    if (!Equals(LabelRotation, value))
                    {
                        LabelRotation = (double?)value;
                        NativeControl.LabelRotation = LabelRotation ?? (double)SMTC.ChartAxis.LabelRotationProperty.DefaultValue;
                    }
                    break;
                case nameof(LabelsIntersectAction):
                    if (!Equals(LabelsIntersectAction, value))
                    {
                        LabelsIntersectAction = (SMTC.AxisLabelsIntersectAction?)value;
                        NativeControl.LabelsIntersectAction = LabelsIntersectAction ?? (SMTC.AxisLabelsIntersectAction)SMTC.ChartAxis.LabelsIntersectActionProperty.DefaultValue;
                    }
                    break;
                case nameof(LabelsPosition):
                    if (!Equals(LabelsPosition, value))
                    {
                        LabelsPosition = (SMTC.AxisElementPosition?)value;
                        NativeControl.LabelsPosition = LabelsPosition ?? (SMTC.AxisElementPosition)SMTC.ChartAxis.LabelsPositionProperty.DefaultValue;
                    }
                    break;
                case nameof(Name):
                    if (!Equals(Name, value))
                    {
                        Name = (string)value;
                        NativeControl.Name = Name;
                    }
                    break;
                case nameof(PlotOffsetEnd):
                    if (!Equals(PlotOffsetEnd, value))
                    {
                        PlotOffsetEnd = (double?)value;
                        NativeControl.PlotOffsetEnd = PlotOffsetEnd ?? (double)SMTC.ChartAxis.PlotOffsetEndProperty.DefaultValue;
                    }
                    break;
                case nameof(PlotOffsetStart):
                    if (!Equals(PlotOffsetStart, value))
                    {
                        PlotOffsetStart = (double?)value;
                        NativeControl.PlotOffsetStart = PlotOffsetStart ?? (double)SMTC.ChartAxis.PlotOffsetStartProperty.DefaultValue;
                    }
                    break;
                case nameof(RenderNextToCrossingValue):
                    if (!Equals(RenderNextToCrossingValue, value))
                    {
                        RenderNextToCrossingValue = (bool?)value;
                        NativeControl.RenderNextToCrossingValue = RenderNextToCrossingValue ?? (bool)SMTC.ChartAxis.RenderNextToCrossingValueProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowMajorGridLines):
                    if (!Equals(ShowMajorGridLines, value))
                    {
                        ShowMajorGridLines = (bool?)value;
                        NativeControl.ShowMajorGridLines = ShowMajorGridLines ?? (bool)SMTC.ChartAxis.ShowMajorGridLinesProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowTrackballLabel):
                    if (!Equals(ShowTrackballLabel, value))
                    {
                        ShowTrackballLabel = (bool?)value;
                        NativeControl.ShowTrackballLabel = ShowTrackballLabel ?? (bool)SMTC.ChartAxis.ShowTrackballLabelProperty.DefaultValue;
                    }
                    break;
                case nameof(TickPosition):
                    if (!Equals(TickPosition, value))
                    {
                        TickPosition = (SMTC.AxisElementPosition?)value;
                        NativeControl.TickPosition = TickPosition ?? (SMTC.AxisElementPosition)SMTC.ChartAxis.TickPositionProperty.DefaultValue;
                    }
                    break;
                case nameof(ZoomFactor):
                    if (!Equals(ZoomFactor, value))
                    {
                        ZoomFactor = (double?)value;
                        NativeControl.ZoomFactor = ZoomFactor ?? (double)SMTC.ChartAxis.ZoomFactorProperty.DefaultValue;
                    }
                    break;
                case nameof(ZoomPosition):
                    if (!Equals(ZoomPosition, value))
                    {
                        ZoomPosition = (double?)value;
                        NativeControl.ZoomPosition = ZoomPosition ?? (double)SMTC.ChartAxis.ZoomPositionProperty.DefaultValue;
                    }
                    break;
                case nameof(AxisLineStyle):
                    AxisLineStyle = (RenderFragment)value;
                    break;
                case nameof(LabelStyle):
                    LabelStyle = (RenderFragment)value;
                    break;
                case nameof(MajorGridLineStyle):
                    MajorGridLineStyle = (RenderFragment)value;
                    break;
                case nameof(MajorTickStyle):
                    MajorTickStyle = (RenderFragment)value;
                    break;
                case nameof(Title):
                    Title = (RenderFragment)value;
                    break;
                case nameof(TrackballLabelStyle):
                    TrackballLabelStyle = (RenderFragment)value;
                    break;
                case nameof(TrackballLabelTemplate):
                    TrackballLabelTemplate = (RenderFragment)value;
                    break;
                case nameof(OnLabelCreated):
                    if (!Equals(OnLabelCreated, value))
                    {
                        void NativeControlLabelCreated(object sender, SMTC.ChartAxisLabelEventArgs e) => InvokeEventCallback(OnLabelCreated, e);

                        OnLabelCreated = (EventCallback<SMTC.ChartAxisLabelEventArgs>)value;
                        NativeControl.LabelCreated -= NativeControlLabelCreated;
                        NativeControl.LabelCreated += NativeControlLabelCreated;
                    }
                    break;
                case nameof(OnActualRangeChanged):
                    if (!Equals(OnActualRangeChanged, value))
                    {
                        void NativeControlActualRangeChanged(object sender, SMTC.ActualRangeChangedEventArgs e) => InvokeEventCallback(OnActualRangeChanged, e);

                        OnActualRangeChanged = (EventCallback<SMTC.ActualRangeChangedEventArgs>)value;
                        NativeControl.ActualRangeChanged -= NativeControlActualRangeChanged;
                        NativeControl.ActualRangeChanged += NativeControlActualRangeChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartAxis>(builder, sequence++, AxisLineStyle, (x, value) => x.AxisLineStyle = (SMTC.ChartLineStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartAxis>(builder, sequence++, LabelStyle, (x, value) => x.LabelStyle = (SMTC.ChartAxisLabelStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartAxis>(builder, sequence++, MajorGridLineStyle, (x, value) => x.MajorGridLineStyle = (SMTC.ChartLineStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartAxis>(builder, sequence++, MajorTickStyle, (x, value) => x.MajorTickStyle = (SMTC.ChartAxisTickStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartAxis>(builder, sequence++, Title, (x, value) => x.Title = (SMTC.ChartAxisTitle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartAxis>(builder, sequence++, TrackballLabelStyle, (x, value) => x.TrackballLabelStyle = (SMTC.ChartLabelStyle)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.ChartAxis>(builder, sequence++, TrackballLabelTemplate, (x, template) => x.TrackballLabelTemplate = template);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
