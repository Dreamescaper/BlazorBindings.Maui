// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Represents the cap style for the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarSeries" />
    /// </summary>
    public partial class ErrorBarCapLineStyle : ChartLineStyle
    {
        static ErrorBarCapLineStyle()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the stroke cap size at the end of the error bar line.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values, and the default value is 10.
        /// </value>
        [Parameter] public double? CapLineSize { get; set; }
        /// <summary>
        /// Gets or sets the stroke cap visibility to customize the stroke cap appearance.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Boolean" />, and the default is true
        /// </value>
        [Parameter] public bool? IsVisible { get; set; }

        public new SMTC.ErrorBarCapLineStyle NativeControl => (SMTC.ErrorBarCapLineStyle)((BindableObject)this).NativeControl;

        protected override SMTC.ErrorBarCapLineStyle CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CapLineSize):
                    if (!Equals(CapLineSize, value))
                    {
                        CapLineSize = (double?)value;
                        NativeControl.CapLineSize = CapLineSize ?? (double)SMTC.ErrorBarCapLineStyle.CapLineSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(IsVisible):
                    if (!Equals(IsVisible, value))
                    {
                        IsVisible = (bool?)value;
                        NativeControl.IsVisible = IsVisible ?? (bool)SMTC.ErrorBarCapLineStyle.IsVisibleProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
