// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.HistogramSeries" /> displays the distribution of a dataset by dividing it into intervals and showing the count of values within each interval.
    /// </summary>
    public partial class HistogramSeries : XYDataSeries
    {
        static HistogramSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the interval for the histogram bars, determining the range of values that each bar represents.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values and its default value is 1.
        /// </value>
        [Parameter] public double? HistogramInterval { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to show the normal distribution curve.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Boolean" /> values and its default value is true.
        /// </value>
        [Parameter] public bool? ShowNormalDistributionCurve { get; set; }
        /// <summary>
        /// Gets or sets the stroke of the histogram segments, which defines the color of the borders around each segment.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values and its default value is Transparent.
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets the style for the curve in the histogram, which defines the appearance of the line connecting the bars or points
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLineStyle" /> values.
        /// </value>
        [Parameter] public RenderFragment CurveStyle { get; set; }
        /// <summary>
        /// Gets or sets the stroke of the histogram segments, which defines the color of the borders around each segment.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values and its default value is Transparent.
        /// </value>
        [Parameter] public RenderFragment Stroke { get; set; }

        public new SMTC.HistogramSeries NativeControl => (SMTC.HistogramSeries)((BindableObject)this).NativeControl;

        protected override SMTC.HistogramSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(HistogramInterval):
                    if (!Equals(HistogramInterval, value))
                    {
                        HistogramInterval = (double?)value;
                        NativeControl.HistogramInterval = HistogramInterval ?? (double)SMTC.HistogramSeries.HistogramIntervalProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowNormalDistributionCurve):
                    if (!Equals(ShowNormalDistributionCurve, value))
                    {
                        ShowNormalDistributionCurve = (bool?)value;
                        NativeControl.ShowNormalDistributionCurve = ShowNormalDistributionCurve ?? (bool)SMTC.HistogramSeries.ShowNormalDistributionCurveProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(CurveStyle):
                    CurveStyle = (RenderFragment)value;
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.HistogramSeries>(builder, sequence++, CurveStyle, (x, value) => x.CurveStyle = (SMTC.ChartLineStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.HistogramSeries>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
