// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The CircularDataLabelSettings class is used to customize the appearance of circular series data labels.
    /// </summary>
    public partial class CircularDataLabelSettings : ChartDataLabelSettings
    {
        static CircularDataLabelSettings()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the options to position the data labels either inside or outside the chart segment.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartDataLabelPosition" /> values and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartDataLabelPosition.Inside" />.
        /// </value>
        [Parameter] public SMTC.ChartDataLabelPosition? LabelPosition { get; set; }
        /// <summary>
        /// Gets or sets a value to arrange the data labels smartly when they overlap.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.SmartLabelAlignment" /> values and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.SmartLabelAlignment.Shift" />.
        /// </value>
        [Parameter] public SMTC.SmartLabelAlignment? SmartLabelAlignment { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the appearance of the connector lines in the circular series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ConnectorLineStyle" /> value.
        /// </value>
        /// <remarks>
        /// Accepts single ConnectorLineStyle element.
        /// </remarks>
        [Parameter] public RenderFragment ConnectorLineSettings { get; set; }

        public new SMTC.CircularDataLabelSettings NativeControl => (SMTC.CircularDataLabelSettings)((BindableObject)this).NativeControl;

        protected override SMTC.CircularDataLabelSettings CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(LabelPosition):
                    if (!Equals(LabelPosition, value))
                    {
                        LabelPosition = (SMTC.ChartDataLabelPosition?)value;
                        NativeControl.LabelPosition = LabelPosition ?? (SMTC.ChartDataLabelPosition)SMTC.CircularDataLabelSettings.LabelPositionProperty.DefaultValue;
                    }
                    break;
                case nameof(SmartLabelAlignment):
                    if (!Equals(SmartLabelAlignment, value))
                    {
                        SmartLabelAlignment = (SMTC.SmartLabelAlignment?)value;
                        NativeControl.SmartLabelAlignment = SmartLabelAlignment ?? (SMTC.SmartLabelAlignment)SMTC.CircularDataLabelSettings.SmartLabelAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(ConnectorLineSettings):
                    ConnectorLineSettings = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CircularDataLabelSettings>(builder, sequence++, ConnectorLineSettings, (x, value) => x.ConnectorLineSettings = (SMTC.ConnectorLineStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
