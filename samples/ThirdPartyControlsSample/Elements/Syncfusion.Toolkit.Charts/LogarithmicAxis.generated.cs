// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Represents a specialized axis to plot data with number values on a logarithmic scale.
    /// </summary>
    public partial class LogarithmicAxis : RangeAxisBase
    {
        static LogarithmicAxis()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the interval value that represents the number of divisions required in the logarithmic axis.
        /// </summary>
        /// <value>
        /// Defaults to double.NaN
        /// </value>
        [Parameter] public double? Interval { get; set; }
        /// <summary>
        /// Gets or sets the logarithmic base value for the axis.
        /// </summary>
        /// <value>
        /// Default value is 10.
        /// </value>
        [Parameter] public double? LogarithmicBase { get; set; }
        /// <summary>
        /// Gets or sets the maximum value of the visible range to be displayed on chart axis.
        /// </summary>
        /// <value>
        /// Defaults to null
        /// </value>
        [Parameter] public Nullable<double> Maximum { get; set; }
        /// <summary>
        /// Gets or sets the minimum value of visible range to be displayed on chart axis.
        /// </summary>
        /// <value>
        /// Defaults to null
        /// </value>
        [Parameter] public Nullable<double> Minimum { get; set; }
        /// <summary>
        /// Gets or sets the collection of plot bands to be added to the chart axis.
        /// </summary>
        /// <remarks>
        /// Accepts one or more NumericalPlotBand elements.
        /// </remarks>
        [Parameter] public RenderFragment PlotBands { get; set; }

        public new SMTC.LogarithmicAxis NativeControl => (SMTC.LogarithmicAxis)((BindableObject)this).NativeControl;

        protected override SMTC.LogarithmicAxis CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Interval):
                    if (!Equals(Interval, value))
                    {
                        Interval = (double?)value;
                        NativeControl.Interval = Interval ?? (double)SMTC.LogarithmicAxis.IntervalProperty.DefaultValue;
                    }
                    break;
                case nameof(LogarithmicBase):
                    if (!Equals(LogarithmicBase, value))
                    {
                        LogarithmicBase = (double?)value;
                        NativeControl.LogarithmicBase = LogarithmicBase ?? (double)SMTC.LogarithmicAxis.LogarithmicBaseProperty.DefaultValue;
                    }
                    break;
                case nameof(Maximum):
                    if (!Equals(Maximum, value))
                    {
                        Maximum = (Nullable<double>)value;
                        NativeControl.Maximum = Maximum;
                    }
                    break;
                case nameof(Minimum):
                    if (!Equals(Minimum, value))
                    {
                        Minimum = (Nullable<double>)value;
                        NativeControl.Minimum = Minimum;
                    }
                    break;
                case nameof(PlotBands):
                    PlotBands = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.LogarithmicAxis, SMTC.NumericalPlotBand>(builder, sequence++, PlotBands, x => x.PlotBands);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
