// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.PieSeries" /> displays data as a proportion of the whole. Its most commonly used to make comparisons among a set of given data.
    /// </summary>
    public partial class PieSeries : CircularSeries
    {
        static PieSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that causes all the data points to explode from the center of the chart.
        /// </summary>
        /// <value>
        /// It accepts <c>bool</c>, and the default is false.
        /// </value>
        [Parameter] public bool? ExplodeAll { get; set; }
        /// <summary>
        /// Gets or sets the index value of the segment to be exploded.
        /// </summary>
        /// <value>
        /// This property takes an <see cref="T:System.Int32" /> value, and its default value is <c>-1</c>.
        /// </value>
        [Parameter] public int? ExplodeIndex { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to explode the segment by touch or tap interaction.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:System.Boolean" /> value, and its default value is <c>false</c>.
        /// </value>
        [Parameter] public bool? ExplodeOnTouch { get; set; }
        /// <summary>
        /// Gets or sets the value that defines the exploding distance of the segments.
        /// </summary>
        /// <value>
        /// This property takes a <see cref="T:System.Double" /> value, and its default value is <c>10d</c>.
        /// </value>
        [Parameter] public double? ExplodeRadius { get; set; }
        /// <summary>
        /// Gets or sets the group mode, which determines the type of grouping based on slice Angle, actual data point Value, or Percentage.
        /// </summary>
        /// <value>
        /// This property takes a <see cref="T:Syncfusion.Maui.Toolkit.Charts.PieGroupMode" /> value, and its default value is <c>PieGroupMode.Value</c>.
        /// </value>
        [Parameter] public SMTC.PieGroupMode? GroupMode { get; set; }
        /// <summary>
        /// Gets or sets the value that specifies the grouping for segments containing a minimum value of data points below the specified threshold.
        /// </summary>
        /// <value>
        /// This property takes a <see cref="T:System.Double" /> value, and its default value is <c>double.NaN</c>.
        /// </value>
        [Parameter] public double? GroupTo { get; set; }

        public new SMTC.PieSeries NativeControl => (SMTC.PieSeries)((BindableObject)this).NativeControl;

        protected override SMTC.PieSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ExplodeAll):
                    if (!Equals(ExplodeAll, value))
                    {
                        ExplodeAll = (bool?)value;
                        NativeControl.ExplodeAll = ExplodeAll ?? (bool)SMTC.PieSeries.ExplodeAllProperty.DefaultValue;
                    }
                    break;
                case nameof(ExplodeIndex):
                    if (!Equals(ExplodeIndex, value))
                    {
                        ExplodeIndex = (int?)value;
                        NativeControl.ExplodeIndex = ExplodeIndex ?? (int)SMTC.PieSeries.ExplodeIndexProperty.DefaultValue;
                    }
                    break;
                case nameof(ExplodeOnTouch):
                    if (!Equals(ExplodeOnTouch, value))
                    {
                        ExplodeOnTouch = (bool?)value;
                        NativeControl.ExplodeOnTouch = ExplodeOnTouch ?? (bool)SMTC.PieSeries.ExplodeOnTouchProperty.DefaultValue;
                    }
                    break;
                case nameof(ExplodeRadius):
                    if (!Equals(ExplodeRadius, value))
                    {
                        ExplodeRadius = (double?)value;
                        NativeControl.ExplodeRadius = ExplodeRadius ?? (double)SMTC.PieSeries.ExplodeRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(GroupMode):
                    if (!Equals(GroupMode, value))
                    {
                        GroupMode = (SMTC.PieGroupMode?)value;
                        NativeControl.GroupMode = GroupMode ?? (SMTC.PieGroupMode)SMTC.PieSeries.GroupModeProperty.DefaultValue;
                    }
                    break;
                case nameof(GroupTo):
                    if (!Equals(GroupTo, value))
                    {
                        GroupTo = (double?)value;
                        NativeControl.GroupTo = GroupTo ?? (double)SMTC.PieSeries.GroupToProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
