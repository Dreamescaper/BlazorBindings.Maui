// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMT = Syncfusion.Maui.Toolkit;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Represents the legend for the <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart" />, <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfCircularChart" />, <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfFunnelChart" />, <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfPyramidChart" /> and <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfPolarChart" /> classes.
    /// </summary>
    public partial class ChartLegend : BlazorBindings.Maui.Elements.Element
    {
        static ChartLegend()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that indicates whether the legend is visible or not.
        /// </summary>
        /// <value>
        /// It accepts bool values and the default value is <c>True</c>
        /// </value>
        [Parameter] public bool? IsVisible { get; set; }
        /// <summary>
        /// Gets or sets the placement for the legend in a chart.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.LegendPlacement" /> values and the default value is <see cref="F:Syncfusion.Maui.Toolkit.LegendPlacement.Top" />.
        /// </value>
        [Parameter] public SMT.LegendPlacement? Placement { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the chart series visibility by tapping the legend item.
        /// </summary>
        /// <value>
        /// It accepts bool values and the default value is <c>False</c>
        /// </value>
        [Parameter] public bool? ToggleSeriesVisibility { get; set; }
        /// <summary>
        /// Gets or sets the layout configuration for the items in the chart legend. This property allows you to define how individual legend items are arranged within the legend.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.Layout" />value and its default value is null.
        /// </value>
        [Parameter] public RenderFragment ItemsLayout { get; set; }
        /// <summary>
        /// Gets or sets a template to customize the appearance of each legend item.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.DataTemplate" /> value.
        /// </value>
        [Parameter] public RenderFragment ItemTemplate { get; set; }
        /// <summary>
        /// Gets or sets the value to customize the appearance of chart legend labels.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLegendLabelStyle" /> value.
        /// </value>
        [Parameter] public RenderFragment LabelStyle { get; set; }
        [Parameter] public EventCallback<SMT.LegendItemEventArgs> OnLegendItemCreated { get; set; }

        public new SMTC.ChartLegend NativeControl => (SMTC.ChartLegend)((BindableObject)this).NativeControl;

        protected override SMTC.ChartLegend CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(IsVisible):
                    if (!Equals(IsVisible, value))
                    {
                        IsVisible = (bool?)value;
                        NativeControl.IsVisible = IsVisible ?? (bool)SMTC.ChartLegend.IsVisibleProperty.DefaultValue;
                    }
                    break;
                case nameof(Placement):
                    if (!Equals(Placement, value))
                    {
                        Placement = (SMT.LegendPlacement?)value;
                        NativeControl.Placement = Placement ?? (SMT.LegendPlacement)SMTC.ChartLegend.PlacementProperty.DefaultValue;
                    }
                    break;
                case nameof(ToggleSeriesVisibility):
                    if (!Equals(ToggleSeriesVisibility, value))
                    {
                        ToggleSeriesVisibility = (bool?)value;
                        NativeControl.ToggleSeriesVisibility = ToggleSeriesVisibility ?? (bool)SMTC.ChartLegend.ToggleSeriesVisibilityProperty.DefaultValue;
                    }
                    break;
                case nameof(ItemsLayout):
                    ItemsLayout = (RenderFragment)value;
                    break;
                case nameof(ItemTemplate):
                    ItemTemplate = (RenderFragment)value;
                    break;
                case nameof(LabelStyle):
                    LabelStyle = (RenderFragment)value;
                    break;
                case nameof(OnLegendItemCreated):
                    if (!Equals(OnLegendItemCreated, value))
                    {
                        void NativeControlLegendItemCreated(object sender, SMT.LegendItemEventArgs e) => InvokeEventCallback(OnLegendItemCreated, e);

                        OnLegendItemCreated = (EventCallback<SMT.LegendItemEventArgs>)value;
                        NativeControl.LegendItemCreated -= NativeControlLegendItemCreated;
                        NativeControl.LegendItemCreated += NativeControlLegendItemCreated;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartLegend>(builder, sequence++, ItemsLayout, (x, value) => x.ItemsLayout = (MC.Layout)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.ChartLegend>(builder, sequence++, ItemTemplate, (x, template) => x.ItemTemplate = template);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartLegend>(builder, sequence++, LabelStyle, (x, value) => x.LabelStyle = (SMTC.ChartLegendLabelStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
