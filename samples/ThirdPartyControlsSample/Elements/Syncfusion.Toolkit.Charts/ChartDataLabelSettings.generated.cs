// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Represents a base class for the <see cref="T:Syncfusion.Maui.Toolkit.Charts.CartesianDataLabelSettings" />, <see cref="T:Syncfusion.Maui.Toolkit.Charts.CircularDataLabelSettings" /> , <see cref="T:Syncfusion.Maui.Toolkit.Charts.PyramidDataLabelSettings" /> , <see cref="T:Syncfusion.Maui.Toolkit.Charts.FunnelDataLabelSettings" /> and <see cref="T:Syncfusion.Maui.Toolkit.Charts.PolarDataLabelSettings" /> classes.
    /// </summary>
    public abstract partial class ChartDataLabelSettings : BlazorBindings.Maui.Elements.BindableObject
    {
        static ChartDataLabelSettings()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Determines the placement of data labels relative to the data points in a chart, such as inside, outside, or at the center of the data point.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.DataLabelPlacement" /> values and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.DataLabelPlacement.Auto" />.
        /// </value>
        [Parameter] public SMTC.DataLabelPlacement? LabelPlacement { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the background of the data label should be filled with the series color or not.
        /// </summary>
        /// <value>
        /// It accepts the <c>bool</c> value and its default value is <c>True</c>.
        /// </value>
        [Parameter] public bool? UseSeriesPalette { get; set; }
        /// <summary>
        /// Gets or sets a value for customizing the data labels.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartDataLabelStyle" /> and its default value is null.
        /// </value>
        /// <remarks>
        /// Accepts single ChartDataLabelStyle element.
        /// </remarks>
        [Parameter] public RenderFragment LabelStyle { get; set; }

        public new SMTC.ChartDataLabelSettings NativeControl => (SMTC.ChartDataLabelSettings)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(LabelPlacement):
                    if (!Equals(LabelPlacement, value))
                    {
                        LabelPlacement = (SMTC.DataLabelPlacement?)value;
                        NativeControl.LabelPlacement = LabelPlacement ?? (SMTC.DataLabelPlacement)SMTC.ChartDataLabelSettings.LabelPlacementProperty.DefaultValue;
                    }
                    break;
                case nameof(UseSeriesPalette):
                    if (!Equals(UseSeriesPalette, value))
                    {
                        UseSeriesPalette = (bool?)value;
                        NativeControl.UseSeriesPalette = UseSeriesPalette ?? (bool)SMTC.ChartDataLabelSettings.UseSeriesPaletteProperty.DefaultValue;
                    }
                    break;
                case nameof(LabelStyle):
                    LabelStyle = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartDataLabelSettings>(builder, sequence++, LabelStyle, (x, value) => x.LabelStyle = (SMTC.ChartDataLabelStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
