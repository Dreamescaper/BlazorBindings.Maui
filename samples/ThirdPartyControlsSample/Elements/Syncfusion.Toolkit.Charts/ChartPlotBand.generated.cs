// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Serves as a base class for <see cref="T:Syncfusion.Maui.Toolkit.Charts.NumericalPlotBand" />, <see cref="T:Syncfusion.Maui.Toolkit.Charts.DateTimePlotBand" />. This class provides options to customize the appearance of plot bands.
    /// </summary>
    public abstract partial class ChartPlotBand : BlazorBindings.Maui.Elements.Element
    {
        static ChartPlotBand()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the end value for the plot band segmentation. It can be a double, date, time or logarithmic value.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:System.Object" /> value and the default value is null.
        /// </value>
        [Parameter] public object AssociatedAxisEnd { get; set; }
        /// <summary>
        /// Gets or sets the name of the segment axis for the plot band.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:System.String" /> value and the default value is string.Empty.
        /// </value>
        [Parameter] public string AssociatedAxisName { get; set; }
        /// <summary>
        /// Gets or sets the start value for the plot band segmentation. It can be a double, date ,time or logarithmic value.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:System.Object" /> value.
        /// </value>
        [Parameter] public object AssociatedAxisStart { get; set; }
        /// <summary>
        /// Gets or sets the color of the plot band.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Microsoft.Maui.Controls.Brush" /> value.
        /// </value>
        [Parameter] public Color FillColor { get; set; }
        /// <summary>
        /// Gets or sets the bool value to indicate the plot band recurrence.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:System.Boolean" /> value. Its default value is false.
        /// </value>
        [Parameter] public bool? IsRepeatable { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the plot band is visible on the axis.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Boolean" /> values and the default value is true.
        /// </value>
        [Parameter] public bool? IsVisible { get; set; }
        /// <summary>
        /// Gets or sets the frequency of the plot band.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:System.Double" /> value. Its default value is double.NaN.
        /// </value>
        [Parameter] public double? RepeatEvery { get; set; }
        /// <summary>
        /// Gets or sets the size of the plot band.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:System.Double" /> value. Its default value is double.NaN.
        /// </value>
        [Parameter] public double? Size { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the outer stroke appearance of the plot band.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates the stroke thickness of the plot band.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values and the default value is 1.
        /// </value>
        [Parameter] public double? StrokeWidth { get; set; }
        /// <summary>
        /// Gets or sets the text to be displayed on the plot band.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:System.String" /> value and the default value is string.Empty.
        /// </value>
        [Parameter] public string Text { get; set; }
        /// <summary>
        /// Gets or sets the color of the plot band.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Microsoft.Maui.Controls.Brush" /> value.
        /// </value>
        [Parameter] public RenderFragment Fill { get; set; }
        /// <summary>
        /// Gets or sets the customized style for the plot band labels.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartPlotBandLabelStyle" /> as its value.
        /// </value>
        [Parameter] public RenderFragment LabelStyle { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the outer stroke appearance of the plot band.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        [Parameter] public RenderFragment Stroke { get; set; }

        public new SMTC.ChartPlotBand NativeControl => (SMTC.ChartPlotBand)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AssociatedAxisEnd):
                    if (!Equals(AssociatedAxisEnd, value))
                    {
                        AssociatedAxisEnd = (object)value;
                        NativeControl.AssociatedAxisEnd = AssociatedAxisEnd;
                    }
                    break;
                case nameof(AssociatedAxisName):
                    if (!Equals(AssociatedAxisName, value))
                    {
                        AssociatedAxisName = (string)value;
                        NativeControl.AssociatedAxisName = AssociatedAxisName;
                    }
                    break;
                case nameof(AssociatedAxisStart):
                    if (!Equals(AssociatedAxisStart, value))
                    {
                        AssociatedAxisStart = (object)value;
                        NativeControl.AssociatedAxisStart = AssociatedAxisStart;
                    }
                    break;
                case nameof(FillColor):
                    if (!Equals(FillColor, value))
                    {
                        FillColor = (Color)value;
                        NativeControl.Fill = FillColor;
                    }
                    break;
                case nameof(IsRepeatable):
                    if (!Equals(IsRepeatable, value))
                    {
                        IsRepeatable = (bool?)value;
                        NativeControl.IsRepeatable = IsRepeatable ?? (bool)SMTC.ChartPlotBand.IsRepeatableProperty.DefaultValue;
                    }
                    break;
                case nameof(IsVisible):
                    if (!Equals(IsVisible, value))
                    {
                        IsVisible = (bool?)value;
                        NativeControl.IsVisible = IsVisible ?? (bool)SMTC.ChartPlotBand.IsVisibleProperty.DefaultValue;
                    }
                    break;
                case nameof(RepeatEvery):
                    if (!Equals(RepeatEvery, value))
                    {
                        RepeatEvery = (double?)value;
                        NativeControl.RepeatEvery = RepeatEvery ?? (double)SMTC.ChartPlotBand.RepeatEveryProperty.DefaultValue;
                    }
                    break;
                case nameof(Size):
                    if (!Equals(Size, value))
                    {
                        Size = (double?)value;
                        NativeControl.Size = Size ?? (double)SMTC.ChartPlotBand.SizeProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(StrokeWidth):
                    if (!Equals(StrokeWidth, value))
                    {
                        StrokeWidth = (double?)value;
                        NativeControl.StrokeWidth = StrokeWidth ?? (double)SMTC.ChartPlotBand.StrokeWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(Fill):
                    Fill = (RenderFragment)value;
                    break;
                case nameof(LabelStyle):
                    LabelStyle = (RenderFragment)value;
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartPlotBand>(builder, sequence++, Fill, (x, value) => x.Fill = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartPlotBand>(builder, sequence++, LabelStyle, (x, value) => x.LabelStyle = (SMTC.ChartPlotBandLabelStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartPlotBand>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
