// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// ShapeAnnotation allows you to add annotations in the form of shapes such as rectangles, ellipses, lines, horizontal lines, and vertical lines at specific areas of interest within the chart area.
    /// </summary>
    public abstract partial class ShapeAnnotation : ChartAnnotation
    {
        static ShapeAnnotation()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the fill color of the shape annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Microsoft.Maui.Controls.Brush" /> as its value.
        /// </value>
        [Parameter] public Color FillColor { get; set; }
        /// <summary>
        /// Gets or sets the stroke for the annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Microsoft.Maui.Controls.Brush" /> as its value.
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates the width of the annotations stroke.
        /// </summary>
        /// <value>
        /// This property takes the <c>double</c> as its value and its default value is 1
        /// </value>
        [Parameter] public double? StrokeWidth { get; set; }
        /// <summary>
        /// Gets or sets the string value that represents the text to be displayed on the annotation.
        /// </summary>
        /// <value>
        /// This property takes the <c>string</c> as its value and its default value is string.Empty.
        /// </value>
        [Parameter] public string Text { get; set; }
        /// <summary>
        /// Gets or sets the DateTime or double value that represents the x2 position of the annotation.
        /// </summary>
        /// <value>
        /// This property takes the <c>object</c> as its value and its default value is null.
        /// </value>
        [Parameter] public object X2 { get; set; }
        /// <summary>
        /// Gets or sets the double value that represents the y2 position of the annotation.
        /// </summary>
        /// <value>
        /// This property takes the <c>double</c> as its value and its default value is double.NaN.
        /// </value>
        [Parameter] public double? Y2 { get; set; }
        /// <summary>
        /// Gets or sets the fill color of the shape annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Microsoft.Maui.Controls.Brush" /> as its value.
        /// </value>
        [Parameter] public RenderFragment Fill { get; set; }
        /// <summary>
        /// Gets or sets the value to customize the appearance of shape annotation text.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAnnotationLabelStyle" /> as its value.
        /// </value>
        [Parameter] public RenderFragment LabelStyle { get; set; }
        /// <summary>
        /// Gets or sets the stroke for the annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Microsoft.Maui.Controls.Brush" /> as its value.
        /// </value>
        [Parameter] public RenderFragment Stroke { get; set; }

        public new SMTC.ShapeAnnotation NativeControl => (SMTC.ShapeAnnotation)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(FillColor):
                    if (!Equals(FillColor, value))
                    {
                        FillColor = (Color)value;
                        NativeControl.Fill = FillColor;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(StrokeWidth):
                    if (!Equals(StrokeWidth, value))
                    {
                        StrokeWidth = (double?)value;
                        NativeControl.StrokeWidth = StrokeWidth ?? (double)SMTC.ShapeAnnotation.StrokeWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(X2):
                    if (!Equals(X2, value))
                    {
                        X2 = (object)value;
                        NativeControl.X2 = X2;
                    }
                    break;
                case nameof(Y2):
                    if (!Equals(Y2, value))
                    {
                        Y2 = (double?)value;
                        NativeControl.Y2 = Y2 ?? (double)SMTC.ShapeAnnotation.Y2Property.DefaultValue;
                    }
                    break;
                case nameof(Fill):
                    Fill = (RenderFragment)value;
                    break;
                case nameof(LabelStyle):
                    LabelStyle = (RenderFragment)value;
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ShapeAnnotation>(builder, sequence++, Fill, (x, value) => x.Fill = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ShapeAnnotation>(builder, sequence++, LabelStyle, (x, value) => x.LabelStyle = (SMTC.ChartAnnotationLabelStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ShapeAnnotation>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
