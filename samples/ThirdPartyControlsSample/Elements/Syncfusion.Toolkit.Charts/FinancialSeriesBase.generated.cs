// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Represents an abstract base class for financial chart series such as Candle and OHLC (Open-High-Low-Close).
    /// </summary>
    public abstract partial class FinancialSeriesBase : CartesianSeries
    {
        static FinancialSeriesBase()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the brush to be used for bearish points in a financial chart. It is typically used in conjunction with a <see cref="T:Syncfusion.Maui.Toolkit.Charts.CandleSeries" /> or <see cref="T:Syncfusion.Maui.Toolkit.Charts.HiLoOpenCloseSeries" /> series to visually represent negative price movements or bearish market conditions.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.Brush" /> values
        /// </value>
        [Parameter] public Color BearishFillColor { get; set; }
        /// <summary>
        /// Gets or sets the brush to be used for bullish points in a financial chart. It is typically used in conjunction with a <see cref="T:Syncfusion.Maui.Toolkit.Charts.CandleSeries" /> or <see cref="T:Syncfusion.Maui.Toolkit.Charts.HiLoOpenCloseSeries" /> series to visually represent positive price movements or bullish market conditions.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.Brush" /> values
        /// </value>
        [Parameter] public Color BullishFillColor { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a close value to the series.
        /// </summary>
        /// <value>
        /// The <c>string</c> that represents the property name for the y (close) plotting data, and its default value is <c>string.Empty</c>.
        /// </value>
        [Parameter] public string Close { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a high value to the series.
        /// </summary>
        /// <value>
        /// The <c>string</c> that represents the property name for the y (high) plotting data, and its default value is <c>string.Empty</c>&gt;.
        /// </value>
        [Parameter] public string High { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a low value to the series.
        /// </summary>
        /// <value>
        /// The <c>string</c> that represents the property name for the y (low) plotting data, and its default value is <c>string.Empty</c>.
        /// </value>
        [Parameter] public string Low { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a open value to the series.
        /// </summary>
        /// <value>
        /// The <c>string</c> that represents the property name for the y (open) plotting data, and its default value is <c>string.Empty</c>.
        /// </value>
        [Parameter] public string Open { get; set; }
        /// <summary>
        /// Gets or sets a value to indicate spacing between the data points across the series.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values ranging from 0 to 1, where the default value is 0.
        /// </value>
        [Parameter] public double? Spacing { get; set; }
        /// <summary>
        /// Gets or sets a value to change the width of the data points across the series.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values ranging from 0 to 1, where the default value is <c>0.8</c>.
        /// </value>
        [Parameter] public double? Width { get; set; }
        /// <summary>
        /// Gets or sets the brush to be used for bearish points in a financial chart. It is typically used in conjunction with a <see cref="T:Syncfusion.Maui.Toolkit.Charts.CandleSeries" /> or <see cref="T:Syncfusion.Maui.Toolkit.Charts.HiLoOpenCloseSeries" /> series to visually represent negative price movements or bearish market conditions.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.Brush" /> values
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment BearishFill { get; set; }
        /// <summary>
        /// Gets or sets the brush to be used for bullish points in a financial chart. It is typically used in conjunction with a <see cref="T:Syncfusion.Maui.Toolkit.Charts.CandleSeries" /> or <see cref="T:Syncfusion.Maui.Toolkit.Charts.HiLoOpenCloseSeries" /> series to visually represent positive price movements or bullish market conditions.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.Brush" /> values
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment BullishFill { get; set; }

        public new SMTC.FinancialSeriesBase NativeControl => (SMTC.FinancialSeriesBase)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BearishFillColor):
                    if (!Equals(BearishFillColor, value))
                    {
                        BearishFillColor = (Color)value;
                        NativeControl.BearishFill = BearishFillColor;
                    }
                    break;
                case nameof(BullishFillColor):
                    if (!Equals(BullishFillColor, value))
                    {
                        BullishFillColor = (Color)value;
                        NativeControl.BullishFill = BullishFillColor;
                    }
                    break;
                case nameof(Close):
                    if (!Equals(Close, value))
                    {
                        Close = (string)value;
                        NativeControl.Close = Close;
                    }
                    break;
                case nameof(High):
                    if (!Equals(High, value))
                    {
                        High = (string)value;
                        NativeControl.High = High;
                    }
                    break;
                case nameof(Low):
                    if (!Equals(Low, value))
                    {
                        Low = (string)value;
                        NativeControl.Low = Low;
                    }
                    break;
                case nameof(Open):
                    if (!Equals(Open, value))
                    {
                        Open = (string)value;
                        NativeControl.Open = Open;
                    }
                    break;
                case nameof(Spacing):
                    if (!Equals(Spacing, value))
                    {
                        Spacing = (double?)value;
                        NativeControl.Spacing = Spacing ?? (double)SMTC.FinancialSeriesBase.SpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(Width):
                    if (!Equals(Width, value))
                    {
                        Width = (double?)value;
                        NativeControl.Width = Width ?? (double)SMTC.FinancialSeriesBase.WidthProperty.DefaultValue;
                    }
                    break;
                case nameof(BearishFill):
                    BearishFill = (RenderFragment)value;
                    break;
                case nameof(BullishFill):
                    BullishFill = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.FinancialSeriesBase>(builder, sequence++, BearishFill, (x, value) => x.BearishFill = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.FinancialSeriesBase>(builder, sequence++, BullishFill, (x, value) => x.BullishFill = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
