// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// It is the base class for all types of polar series.
    /// </summary>
    public abstract partial class PolarSeries : ChartSeries
    {
        static PolarSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether the area path for the polar series should be closed or opened.
        /// </summary>
        /// <value>
        /// This property takes the <c>bool</c> as its value and its default value is true.
        /// </value>
        [Parameter] public bool? IsClosed { get; set; }
        /// <summary>
        /// Gets or sets a value displayed in the associated legend item.
        /// </summary>
        /// <value>
        /// It accepts a <c>string</c> value, and its default value is <c>string.Empty</c>.
        /// </value>
        [Parameter] public string Label { get; set; }
        /// <summary>
        /// Gets or sets the value indicating whether to show markers for the series data point.
        /// </summary>
        /// <value>
        /// It accepts <c>bool</c> values and its default value is false.
        /// </value>
        [Parameter] public bool? ShowMarkers { get; set; }
        /// <summary>
        /// Gets or sets a value to specify the stroke width of a chart series.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values, and its default value is 2.
        /// </value>
        [Parameter] public double? StrokeWidth { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a y value to the series.
        /// </summary>
        /// <value>
        /// The <c>string</c> that represents the property name for the y plotting data, and its default value is null.
        /// </value>
        [Parameter] public string YBindingPath { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the appearance of the displaying data labels in the polar series.
        /// </summary>
        /// <value>
        /// It takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.PolarDataLabelSettings" />.
        /// </value>
        /// <remarks>
        /// Accepts single PolarDataLabelSettings element.
        /// </remarks>
        [Parameter] public RenderFragment DataLabelSettings { get; set; }
        /// <summary>
        /// Gets or sets the option for customize the series markers.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartMarkerSettings" />.
        /// </value>
        /// <remarks>
        /// Accepts single ChartMarkerSettings element.
        /// </remarks>
        [Parameter] public RenderFragment MarkerSettings { get; set; }

        public new SMTC.PolarSeries NativeControl => (SMTC.PolarSeries)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(IsClosed):
                    if (!Equals(IsClosed, value))
                    {
                        IsClosed = (bool?)value;
                        NativeControl.IsClosed = IsClosed ?? (bool)SMTC.PolarSeries.IsClosedProperty.DefaultValue;
                    }
                    break;
                case nameof(Label):
                    if (!Equals(Label, value))
                    {
                        Label = (string)value;
                        NativeControl.Label = Label;
                    }
                    break;
                case nameof(ShowMarkers):
                    if (!Equals(ShowMarkers, value))
                    {
                        ShowMarkers = (bool?)value;
                        NativeControl.ShowMarkers = ShowMarkers ?? (bool)SMTC.PolarSeries.ShowMarkersProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeWidth):
                    if (!Equals(StrokeWidth, value))
                    {
                        StrokeWidth = (double?)value;
                        NativeControl.StrokeWidth = StrokeWidth ?? (double)SMTC.PolarSeries.StrokeWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(YBindingPath):
                    if (!Equals(YBindingPath, value))
                    {
                        YBindingPath = (string)value;
                        NativeControl.YBindingPath = YBindingPath;
                    }
                    break;
                case nameof(DataLabelSettings):
                    DataLabelSettings = (RenderFragment)value;
                    break;
                case nameof(MarkerSettings):
                    MarkerSettings = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.PolarSeries>(builder, sequence++, DataLabelSettings, (x, value) => x.DataLabelSettings = (SMTC.PolarDataLabelSettings)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.PolarSeries>(builder, sequence++, MarkerSettings, (x, value) => x.MarkerSettings = (SMTC.ChartMarkerSettings)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
