// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.WaterfallSeries" /> shows that an initial value is affected by a series of intermediate positive or negative values, leading to a final value.
    /// </summary>
    public partial class WaterfallSeries : XYDataSeries
    {
        static WaterfallSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that determines whether the intermediate sum values in a series should be automatically calculated or not.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Boolean" /> values, and its default value is true.
        /// </value>
        [Parameter] public bool? AllowAutoSum { get; set; }
        /// <summary>
        /// Gets or sets a brush value that indicates the Negative segment's interior.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        [Parameter] public Color NegativePointsColor { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to enable the connector line between the segments or not.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Boolean" /> values, and its default value is true.
        /// </value>
        [Parameter] public bool? ShowConnectorLine { get; set; }
        /// <summary>
        /// Gets or sets the spacing between the segments across the series in cluster mode.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values and its default value is 0d
        /// </value>
        [Parameter] public double? Spacing { get; set; }
        /// <summary>
        /// Gets or sets a string value that indicates the sum of previous segments.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.String" /> values, and its default value is <c>string.Empty</c>.
        /// </value>
        [Parameter] public string SummaryBindingPath { get; set; }
        /// <summary>
        /// Gets or sets a brush value that indicates the summary segment's interior.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        [Parameter] public Color SummaryPointsColor { get; set; }
        /// <summary>
        /// Gets or sets the width of each segment.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values between 0 to 1 and its default value is 0.8
        /// </value>
        [Parameter] public double? Width { get; set; }
        /// <summary>
        /// Gets or sets a style for connector lines, and it is often used to customize the appearance of connector lines for visual purposes.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLineStyle" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single ChartLineStyle element.
        /// </remarks>
        [Parameter] public RenderFragment ConnectorLineStyle { get; set; }
        /// <summary>
        /// Gets or sets a brush value that indicates the Negative segment's interior.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment NegativePointsBrush { get; set; }
        /// <summary>
        /// Gets or sets a brush value that indicates the summary segment's interior.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment SummaryPointsBrush { get; set; }

        public new SMTC.WaterfallSeries NativeControl => (SMTC.WaterfallSeries)((BindableObject)this).NativeControl;

        protected override SMTC.WaterfallSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AllowAutoSum):
                    if (!Equals(AllowAutoSum, value))
                    {
                        AllowAutoSum = (bool?)value;
                        NativeControl.AllowAutoSum = AllowAutoSum ?? (bool)SMTC.WaterfallSeries.AllowAutoSumProperty.DefaultValue;
                    }
                    break;
                case nameof(NegativePointsColor):
                    if (!Equals(NegativePointsColor, value))
                    {
                        NegativePointsColor = (Color)value;
                        NativeControl.NegativePointsBrush = NegativePointsColor;
                    }
                    break;
                case nameof(ShowConnectorLine):
                    if (!Equals(ShowConnectorLine, value))
                    {
                        ShowConnectorLine = (bool?)value;
                        NativeControl.ShowConnectorLine = ShowConnectorLine ?? default;
                    }
                    break;
                case nameof(Spacing):
                    if (!Equals(Spacing, value))
                    {
                        Spacing = (double?)value;
                        NativeControl.Spacing = Spacing ?? (double)SMTC.WaterfallSeries.SpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(SummaryBindingPath):
                    if (!Equals(SummaryBindingPath, value))
                    {
                        SummaryBindingPath = (string)value;
                        NativeControl.SummaryBindingPath = SummaryBindingPath;
                    }
                    break;
                case nameof(SummaryPointsColor):
                    if (!Equals(SummaryPointsColor, value))
                    {
                        SummaryPointsColor = (Color)value;
                        NativeControl.SummaryPointsBrush = SummaryPointsColor;
                    }
                    break;
                case nameof(Width):
                    if (!Equals(Width, value))
                    {
                        Width = (double?)value;
                        NativeControl.Width = Width ?? (double)SMTC.WaterfallSeries.WidthProperty.DefaultValue;
                    }
                    break;
                case nameof(ConnectorLineStyle):
                    ConnectorLineStyle = (RenderFragment)value;
                    break;
                case nameof(NegativePointsBrush):
                    NegativePointsBrush = (RenderFragment)value;
                    break;
                case nameof(SummaryPointsBrush):
                    SummaryPointsBrush = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.WaterfallSeries>(builder, sequence++, ConnectorLineStyle, (x, value) => x.ConnectorLineStyle = (SMTC.ChartLineStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.WaterfallSeries>(builder, sequence++, NegativePointsBrush, (x, value) => x.NegativePointsBrush = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.WaterfallSeries>(builder, sequence++, SummaryPointsBrush, (x, value) => x.SummaryPointsBrush = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
