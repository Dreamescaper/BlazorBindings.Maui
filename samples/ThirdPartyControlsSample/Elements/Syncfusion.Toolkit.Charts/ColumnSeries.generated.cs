// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.ColumnSeries" /> displays a set of vertical bars for the given data point values.
    /// </summary>
    public partial class ColumnSeries : XYDataSeries
    {
        static ColumnSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the corner radius that smooths the edges of columns in a column series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.CornerRadius" /> value.
        /// </value>
        [Parameter] public CornerRadius? CornerRadius { get; set; }
        /// <summary>
        /// Gets or sets a value to indicate spacing between the segments across the series.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values ranging from 0 to 1, where the default value is 0.
        /// </value>
        [Parameter] public double? Spacing { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the stroke appearance of the column series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values and its default value is <c>Transparent</c>.
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets a value to change the width of the column segment.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values ranging from 0 to 1, where the default value is <c>0.8</c>.
        /// </value>
        [Parameter] public double? Width { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the stroke appearance of the column series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values and its default value is <c>Transparent</c>.
        /// </value>
        [Parameter] public RenderFragment Stroke { get; set; }

        public new SMTC.ColumnSeries NativeControl => (SMTC.ColumnSeries)((BindableObject)this).NativeControl;

        protected override SMTC.ColumnSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (CornerRadius?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (CornerRadius)SMTC.ColumnSeries.CornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(Spacing):
                    if (!Equals(Spacing, value))
                    {
                        Spacing = (double?)value;
                        NativeControl.Spacing = Spacing ?? (double)SMTC.ColumnSeries.SpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(Width):
                    if (!Equals(Width, value))
                    {
                        Width = (double?)value;
                        NativeControl.Width = Width ?? (double)SMTC.ColumnSeries.WidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ColumnSeries>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
