// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Represents the chart axis's label style class.
    /// </summary>
    public partial class ChartAxisLabelStyle : ChartLabelStyle
    {
        static ChartAxisLabelStyle()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that indicates the position of the axis label.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAxisLabelAlignment" /> values and the default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartAxisLabelAlignment.Center" />.
        /// </value>
        [Parameter] public SMTC.ChartAxisLabelAlignment? LabelAlignment { get; set; }
        /// <summary>
        /// Gets or sets the maximum width value for wrapped axis labels.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values and its default value is double.NaN.
        /// </value>
        [Parameter] public double? MaxWidth { get; set; }
        /// <summary>
        /// Gets or sets the value to align wrapped axis labels based upon the labels rect.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAxisLabelAlignment" /> values and the default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartAxisLabelAlignment.Start" />.
        /// </value>
        [Parameter] public SMTC.ChartAxisLabelAlignment? WrappedLabelAlignment { get; set; }

        public new SMTC.ChartAxisLabelStyle NativeControl => (SMTC.ChartAxisLabelStyle)((BindableObject)this).NativeControl;

        protected override SMTC.ChartAxisLabelStyle CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(LabelAlignment):
                    if (!Equals(LabelAlignment, value))
                    {
                        LabelAlignment = (SMTC.ChartAxisLabelAlignment?)value;
                        NativeControl.LabelAlignment = LabelAlignment ?? (SMTC.ChartAxisLabelAlignment)SMTC.ChartAxisLabelStyle.LabelAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(MaxWidth):
                    if (!Equals(MaxWidth, value))
                    {
                        MaxWidth = (double?)value;
                        NativeControl.MaxWidth = MaxWidth ?? (double)SMTC.ChartAxisLabelStyle.MaxWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(WrappedLabelAlignment):
                    if (!Equals(WrappedLabelAlignment, value))
                    {
                        WrappedLabelAlignment = (SMTC.ChartAxisLabelAlignment?)value;
                        NativeControl.WrappedLabelAlignment = WrappedLabelAlignment ?? (SMTC.ChartAxisLabelAlignment)SMTC.ChartAxisLabelStyle.WrappedLabelAlignmentProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
