// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// <see cref="T:Syncfusion.Maui.Toolkit.Charts.CartesianSeries" /> is the base class for all cartesian based series such as column, line, area, and so on.
    /// </summary>
    public abstract partial class CartesianSeries : ChartSeries
    {
        static CartesianSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that will be displayed in the associated legend item.
        /// </summary>
        /// <value>
        /// It accepts a <c>string</c> value and its default value is <c>string.Empty</c>.
        /// </value>
        [Parameter] public string Label { get; set; }
        /// <summary>
        /// Gets or sets whether to show trackball label on the corresponding series
        /// </summary>
        /// <value>
        /// This property takes the <c>bool</c> as its value and its default value is true.
        /// </value>
        [Parameter] public bool? ShowTrackballLabel { get; set; }
        /// <summary>
        /// Gets or sets the name of the (horizontal) axis in the <see cref="P:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart.XAxes" /> collection which is used to plot the series with particular axis.
        /// </summary>
        /// <value>
        /// It takes the <c>string</c> value and its default value is null.
        /// </value>
        [Parameter] public string XAxisName { get; set; }
        /// <summary>
        /// Gets or sets the name of the (vertical) axis in the <see cref="P:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart.YAxes" /> collection which is used to plot the series with particular axis.
        /// </summary>
        /// <value>
        /// It takes the <c>string</c> value and its default value is null.
        /// </value>
        [Parameter] public string YAxisName { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the appearance of the displaying data labels in the cartesian series.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.CartesianDataLabelSettings" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single CartesianDataLabelSettings element.
        /// </remarks>
        [Parameter] public RenderFragment DataLabelSettings { get; set; }
        /// <summary>
        /// Gets or sets the DataTemplate to customize the appearance of the corresponding series Trackball labels.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.DataTemplate" />value and its default value is null.
        /// </value>
        [Parameter] public RenderFragment TrackballLabelTemplate { get; set; }

        public new SMTC.CartesianSeries NativeControl => (SMTC.CartesianSeries)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Label):
                    if (!Equals(Label, value))
                    {
                        Label = (string)value;
                        NativeControl.Label = Label;
                    }
                    break;
                case nameof(ShowTrackballLabel):
                    if (!Equals(ShowTrackballLabel, value))
                    {
                        ShowTrackballLabel = (bool?)value;
                        NativeControl.ShowTrackballLabel = ShowTrackballLabel ?? (bool)SMTC.CartesianSeries.ShowTrackballLabelProperty.DefaultValue;
                    }
                    break;
                case nameof(XAxisName):
                    if (!Equals(XAxisName, value))
                    {
                        XAxisName = (string)value;
                        NativeControl.XAxisName = XAxisName;
                    }
                    break;
                case nameof(YAxisName):
                    if (!Equals(YAxisName, value))
                    {
                        YAxisName = (string)value;
                        NativeControl.YAxisName = YAxisName;
                    }
                    break;
                case nameof(DataLabelSettings):
                    DataLabelSettings = (RenderFragment)value;
                    break;
                case nameof(TrackballLabelTemplate):
                    TrackballLabelTemplate = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.CartesianSeries>(builder, sequence++, DataLabelSettings, (x, value) => x.DataLabelSettings = (SMTC.CartesianDataLabelSettings)value);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.CartesianSeries>(builder, sequence++, TrackballLabelTemplate, (x, template) => x.TrackballLabelTemplate = template);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
