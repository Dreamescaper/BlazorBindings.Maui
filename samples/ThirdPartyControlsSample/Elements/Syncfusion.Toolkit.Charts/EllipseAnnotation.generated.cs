// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// This class is used to add an ellipse annotation in the <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart" />. An instance of this class needs to be added to the <see cref="P:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart.Annotations" /> collection.
    /// </summary>
    public partial class EllipseAnnotation : ShapeAnnotation
    {
        static EllipseAnnotation()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the height value for the ellipse annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:System.Double" /> as its value and its default value is 10.
        /// </value>
        [Parameter] public double? Height { get; set; }
        /// <summary>
        /// Gets or sets the horizontal alignment of the ellipse annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAlignment" /> as its value and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartAlignment.Center" />.
        /// </value>
        [Parameter] public SMTC.ChartAlignment? HorizontalAlignment { get; set; }
        /// <summary>
        /// Gets or sets the vertical alignment of the ellipse annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAlignment" /> as its value. Its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartAlignment.Center" />.
        /// </value>
        [Parameter] public SMTC.ChartAlignment? VerticalAlignment { get; set; }
        /// <summary>
        /// Gets or sets the width value for the ellipse annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:System.Double" /> as its value and its default value is 10.
        /// </value>
        [Parameter] public double? Width { get; set; }

        public new SMTC.EllipseAnnotation NativeControl => (SMTC.EllipseAnnotation)((BindableObject)this).NativeControl;

        protected override SMTC.EllipseAnnotation CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Height):
                    if (!Equals(Height, value))
                    {
                        Height = (double?)value;
                        NativeControl.Height = Height ?? (double)SMTC.EllipseAnnotation.HeightProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalAlignment):
                    if (!Equals(HorizontalAlignment, value))
                    {
                        HorizontalAlignment = (SMTC.ChartAlignment?)value;
                        NativeControl.HorizontalAlignment = HorizontalAlignment ?? (SMTC.ChartAlignment)SMTC.EllipseAnnotation.HorizontalAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalAlignment):
                    if (!Equals(VerticalAlignment, value))
                    {
                        VerticalAlignment = (SMTC.ChartAlignment?)value;
                        NativeControl.VerticalAlignment = VerticalAlignment ?? (SMTC.ChartAlignment)SMTC.EllipseAnnotation.VerticalAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(Width):
                    if (!Equals(Width, value))
                    {
                        Width = (double?)value;
                        NativeControl.Width = Width ?? (double)SMTC.EllipseAnnotation.WidthProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
