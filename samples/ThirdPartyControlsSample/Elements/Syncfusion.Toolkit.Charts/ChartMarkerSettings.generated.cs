// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Used to customize the data marker symbol
    /// </summary>
    public partial class ChartMarkerSettings : BlazorBindings.Maui.Elements.BindableObject
    {
        static ChartMarkerSettings()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the value to fill marker.
        /// </summary>
        [Parameter] public Color FillColor { get; set; }
        /// <summary>
        /// Gets or sets the value for marker height.
        /// </summary>
        [Parameter] public double? Height { get; set; }
        /// <summary>
        /// Gets or sets the value for marker stroke.
        /// </summary>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets the value for marker stroke width.
        /// </summary>
        [Parameter] public double? StrokeWidth { get; set; }
        /// <summary>
        /// Gets or sets the option for marker shape type.
        /// </summary>
        [Parameter] public SMTC.ShapeType? Type { get; set; }
        /// <summary>
        /// Gets or sets the value for marker width.
        /// </summary>
        [Parameter] public double? Width { get; set; }
        /// <summary>
        /// Gets or sets the value to fill marker.
        /// </summary>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment Fill { get; set; }
        /// <summary>
        /// Gets or sets the value for marker stroke.
        /// </summary>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment Stroke { get; set; }

        public new SMTC.ChartMarkerSettings NativeControl => (SMTC.ChartMarkerSettings)((BindableObject)this).NativeControl;

        protected override SMTC.ChartMarkerSettings CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(FillColor):
                    if (!Equals(FillColor, value))
                    {
                        FillColor = (Color)value;
                        NativeControl.Fill = FillColor;
                    }
                    break;
                case nameof(Height):
                    if (!Equals(Height, value))
                    {
                        Height = (double?)value;
                        NativeControl.Height = Height ?? (double)SMTC.ChartMarkerSettings.HeightProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(StrokeWidth):
                    if (!Equals(StrokeWidth, value))
                    {
                        StrokeWidth = (double?)value;
                        NativeControl.StrokeWidth = StrokeWidth ?? (double)SMTC.ChartMarkerSettings.StrokeWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Type):
                    if (!Equals(Type, value))
                    {
                        Type = (SMTC.ShapeType?)value;
                        NativeControl.Type = Type ?? (SMTC.ShapeType)SMTC.ChartMarkerSettings.TypeProperty.DefaultValue;
                    }
                    break;
                case nameof(Width):
                    if (!Equals(Width, value))
                    {
                        Width = (double?)value;
                        NativeControl.Width = Width ?? (double)SMTC.ChartMarkerSettings.WidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Fill):
                    Fill = (RenderFragment)value;
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartMarkerSettings>(builder, sequence++, Fill, (x, value) => x.Fill = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartMarkerSettings>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
