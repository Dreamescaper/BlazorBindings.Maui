// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarSeries" /> indicate the uncertainty or error in data points, making it easy to identify patterns and trends in the data.
    /// </summary>
    public partial class ErrorBarSeries : XYDataSeries
    {
        static ErrorBarSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the direction to specify whether to show positive, negative or both directions of horizontal error values to display.
        /// </summary>
        /// <value>
        /// It accept the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarDirection" /> values and its defaults is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ErrorBarDirection.Both"></see>
        /// </value>
        [Parameter] public SMTC.ErrorBarDirection? HorizontalDirection { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a horizontal error value to the series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.String" /> and the default <c>String.Empty</c>.
        /// </value>
        [Parameter] public string HorizontalErrorPath { get; set; }
        /// <summary>
        /// Gets or sets the value of the horizontal errors of the series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> and the default value is 0.
        /// </value>
        [Parameter] public double? HorizontalErrorValue { get; set; }
        /// <summary>
        /// Gets or sets the mode of the error bar to be displayed, whether horizontal, vertical, or both.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarMode" /> values and its defaults is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ErrorBarMode.Both" />
        /// </value>
        [Parameter] public SMTC.ErrorBarMode? Mode { get; set; }
        /// <summary>
        /// Gets or sets the error bar type, whether it is specified as a standard deviation, a standard error, a percentage, or a fixed value.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarType" /> values and its defaults is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ErrorBarType.Fixed" />
        /// </value>
        [Parameter] public SMTC.ErrorBarType? Type { get; set; }
        /// <summary>
        /// Gets or sets the direction to specify whether to show positive, negative or both directions of vertical error values to display.
        /// </summary>
        /// <value>
        /// It accept the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarDirection" /> values and its defaults is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ErrorBarDirection.Both"></see>
        /// </value>
        [Parameter] public SMTC.ErrorBarDirection? VerticalDirection { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a vertical error value to the series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.String" />and the default is <c>String.Empty</c>.
        /// </value>
        [Parameter] public string VerticalErrorPath { get; set; }
        /// <summary>
        /// Gets or sets the value of the vertical errors of the series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> and the default is 0.
        /// </value>
        [Parameter] public double? VerticalErrorValue { get; set; }
        /// <summary>
        /// Gets or sets the style for horizontal caps, and it is often used to customize the appearance of horizontal caps in the error bar for visual purposes.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarCapLineStyle" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single ErrorBarCapLineStyle element.
        /// </remarks>
        [Parameter] public RenderFragment HorizontalCapLineStyle { get; set; }
        /// <summary>
        /// Gets or sets the style for horizontal lines, and it is often used to customize the appearance of horizontal error bars for visual purposes.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarLineStyle" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single ErrorBarLineStyle element.
        /// </remarks>
        [Parameter] public RenderFragment HorizontalLineStyle { get; set; }
        /// <summary>
        /// Gets or sets the style for vertical caps, and it is often used to customize the appearance of vertical caps in the error bar for visual purposes.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarCapLineStyle" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single ErrorBarCapLineStyle element.
        /// </remarks>
        [Parameter] public RenderFragment VerticalCapLineStyle { get; set; }
        /// <summary>
        /// Gets or sets the style for vertical lines, and it is often used to customize the appearance of the vertical error bar for visual purposes.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ErrorBarLineStyle" /> values.
        /// </value>
        /// <remarks>
        /// Accepts single ErrorBarLineStyle element.
        /// </remarks>
        [Parameter] public RenderFragment VerticalLineStyle { get; set; }

        public new SMTC.ErrorBarSeries NativeControl => (SMTC.ErrorBarSeries)((BindableObject)this).NativeControl;

        protected override SMTC.ErrorBarSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(HorizontalDirection):
                    if (!Equals(HorizontalDirection, value))
                    {
                        HorizontalDirection = (SMTC.ErrorBarDirection?)value;
                        NativeControl.HorizontalDirection = HorizontalDirection ?? (SMTC.ErrorBarDirection)SMTC.ErrorBarSeries.HorizontalDirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalErrorPath):
                    if (!Equals(HorizontalErrorPath, value))
                    {
                        HorizontalErrorPath = (string)value;
                        NativeControl.HorizontalErrorPath = HorizontalErrorPath;
                    }
                    break;
                case nameof(HorizontalErrorValue):
                    if (!Equals(HorizontalErrorValue, value))
                    {
                        HorizontalErrorValue = (double?)value;
                        NativeControl.HorizontalErrorValue = HorizontalErrorValue ?? (double)SMTC.ErrorBarSeries.HorizontalErrorValueProperty.DefaultValue;
                    }
                    break;
                case nameof(Mode):
                    if (!Equals(Mode, value))
                    {
                        Mode = (SMTC.ErrorBarMode?)value;
                        NativeControl.Mode = Mode ?? (SMTC.ErrorBarMode)SMTC.ErrorBarSeries.ModeProperty.DefaultValue;
                    }
                    break;
                case nameof(Type):
                    if (!Equals(Type, value))
                    {
                        Type = (SMTC.ErrorBarType?)value;
                        NativeControl.Type = Type ?? (SMTC.ErrorBarType)SMTC.ErrorBarSeries.TypeProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalDirection):
                    if (!Equals(VerticalDirection, value))
                    {
                        VerticalDirection = (SMTC.ErrorBarDirection?)value;
                        NativeControl.VerticalDirection = VerticalDirection ?? (SMTC.ErrorBarDirection)SMTC.ErrorBarSeries.VerticalDirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalErrorPath):
                    if (!Equals(VerticalErrorPath, value))
                    {
                        VerticalErrorPath = (string)value;
                        NativeControl.VerticalErrorPath = VerticalErrorPath;
                    }
                    break;
                case nameof(VerticalErrorValue):
                    if (!Equals(VerticalErrorValue, value))
                    {
                        VerticalErrorValue = (double?)value;
                        NativeControl.VerticalErrorValue = VerticalErrorValue ?? (double)SMTC.ErrorBarSeries.VerticalErrorValueProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalCapLineStyle):
                    HorizontalCapLineStyle = (RenderFragment)value;
                    break;
                case nameof(HorizontalLineStyle):
                    HorizontalLineStyle = (RenderFragment)value;
                    break;
                case nameof(VerticalCapLineStyle):
                    VerticalCapLineStyle = (RenderFragment)value;
                    break;
                case nameof(VerticalLineStyle):
                    VerticalLineStyle = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ErrorBarSeries>(builder, sequence++, HorizontalCapLineStyle, (x, value) => x.HorizontalCapLineStyle = (SMTC.ErrorBarCapLineStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ErrorBarSeries>(builder, sequence++, HorizontalLineStyle, (x, value) => x.HorizontalLineStyle = (SMTC.ErrorBarLineStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ErrorBarSeries>(builder, sequence++, VerticalCapLineStyle, (x, value) => x.VerticalCapLineStyle = (SMTC.ErrorBarCapLineStyle)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ErrorBarSeries>(builder, sequence++, VerticalLineStyle, (x, value) => x.VerticalLineStyle = (SMTC.ErrorBarLineStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
