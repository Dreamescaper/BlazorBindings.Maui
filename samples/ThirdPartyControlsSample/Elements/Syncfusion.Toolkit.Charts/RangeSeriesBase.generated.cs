// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Serves as a base class for all types of range series.
    /// </summary>
    public abstract partial class RangeSeriesBase : CartesianSeries
    {
        static RangeSeriesBase()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a path value on the source object to serve a high value to the series.
        /// </summary>
        /// <value>
        /// The <c>string</c> representing the property name for the higher plotting data and its default value is empty.
        /// </value>
        [Parameter] public string High { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a low value to the series.
        /// </summary>
        /// <value>
        /// The <c>string</c> representing the property name for the lower plotting data and its default value is empty.
        /// </value>
        [Parameter] public string Low { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the border appearance of the range series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values, and its default value is <c>Transparent</c>.
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets a value to specify the border width of the range series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> values, and its default value is 0.
        /// </value>
        [Parameter] public double? StrokeWidth { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the border appearance of the range series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" /> values, and its default value is <c>Transparent</c>.
        /// </value>
        [Parameter] public RenderFragment Stroke { get; set; }

        public new SMTC.RangeSeriesBase NativeControl => (SMTC.RangeSeriesBase)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(High):
                    if (!Equals(High, value))
                    {
                        High = (string)value;
                        NativeControl.High = High;
                    }
                    break;
                case nameof(Low):
                    if (!Equals(Low, value))
                    {
                        Low = (string)value;
                        NativeControl.Low = Low;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(StrokeWidth):
                    if (!Equals(StrokeWidth, value))
                    {
                        StrokeWidth = (double?)value;
                        NativeControl.StrokeWidth = StrokeWidth ?? (double)SMTC.RangeSeriesBase.StrokeWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.RangeSeriesBase>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
