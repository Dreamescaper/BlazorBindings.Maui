// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.DoughnutSeries" /> displays data as a proportion of the whole. Its most commonly used to make comparisons among a set of given data.
    /// </summary>
    public partial class DoughnutSeries : PieSeries
    {
        static DoughnutSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that can be used to define the inner circle.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values, and the default value is 0.4. Here, the value is between 0 and 1.
        /// </value>
        [Parameter] public double? InnerRadius { get; set; }
        /// <summary>
        /// Gets or sets the view to be added to the center of the doughnut.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.View" /> values and its defaults is null.
        /// </value>
        /// <remarks>
        /// Accepts single View element.
        /// </remarks>
        [Parameter] public RenderFragment CenterView { get; set; }

        public new SMTC.DoughnutSeries NativeControl => (SMTC.DoughnutSeries)((BindableObject)this).NativeControl;

        protected override SMTC.DoughnutSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(InnerRadius):
                    if (!Equals(InnerRadius, value))
                    {
                        InnerRadius = (double?)value;
                        NativeControl.InnerRadius = InnerRadius ?? (double)SMTC.DoughnutSeries.InnerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(CenterView):
                    CenterView = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.DoughnutSeries>(builder, sequence++, CenterView, (x, value) => x.CenterView = (MC.View)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
