// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The DateTimePlotBand class can render the plot band using the DateTime values.
    /// </summary>
    public partial class DateTimePlotBand : ChartPlotBand
    {
        static DateTimePlotBand()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the axis value representing where the plot band should end on the axis.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:System.DateTime" /> as its value and the default value is null.
        /// </value>
        [Parameter] public Nullable<DateTime> End { get; set; }
        /// <summary>
        /// Gets or sets the date time unit of the value specified in the <b> RepeatEvery </b> property.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.DateTimeIntervalType" /> value and the default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.DateTimeIntervalType.Auto" />.
        /// </value>
        [Parameter] public SMTC.DateTimeIntervalType? RepeatEveryType { get; set; }
        /// <summary>
        /// Gets or sets the axis value that determines how long the plot band will be repeated along the axis.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:System.DateTime" /> as its value and the default value is null.
        /// </value>
        [Parameter] public Nullable<DateTime> RepeatUntil { get; set; }
        /// <summary>
        /// Gets or sets the date time unit specified in the <b> SizeType </b> property to determine the size of the plot band.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.DateTimeIntervalType" /> value and the default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.DateTimeIntervalType.Auto" />.
        /// </value>
        [Parameter] public SMTC.DateTimeIntervalType? SizeType { get; set; }
        /// <summary>
        /// Gets or sets the axis value representing where the plot band should start on the axis.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:System.DateTime" /> as its value and the default value is null.
        /// </value>
        [Parameter] public Nullable<DateTime> Start { get; set; }

        public new SMTC.DateTimePlotBand NativeControl => (SMTC.DateTimePlotBand)((BindableObject)this).NativeControl;

        protected override SMTC.DateTimePlotBand CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(End):
                    if (!Equals(End, value))
                    {
                        End = (Nullable<DateTime>)value;
                        NativeControl.End = End;
                    }
                    break;
                case nameof(RepeatEveryType):
                    if (!Equals(RepeatEveryType, value))
                    {
                        RepeatEveryType = (SMTC.DateTimeIntervalType?)value;
                        NativeControl.RepeatEveryType = RepeatEveryType ?? (SMTC.DateTimeIntervalType)SMTC.DateTimePlotBand.RepeatEveryTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(RepeatUntil):
                    if (!Equals(RepeatUntil, value))
                    {
                        RepeatUntil = (Nullable<DateTime>)value;
                        NativeControl.RepeatUntil = RepeatUntil;
                    }
                    break;
                case nameof(SizeType):
                    if (!Equals(SizeType, value))
                    {
                        SizeType = (SMTC.DateTimeIntervalType?)value;
                        NativeControl.SizeType = SizeType ?? (SMTC.DateTimeIntervalType)SMTC.DateTimePlotBand.SizeTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(Start):
                    if (!Equals(Start, value))
                    {
                        Start = (Nullable<DateTime>)value;
                        NativeControl.Start = Start;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
