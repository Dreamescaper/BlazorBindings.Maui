// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.BubbleSeries" /> displays a collection of data points represented by a bubble of different size.
    /// </summary>
    public partial class BubbleSeries : XYDataSeries
    {
        static BubbleSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets maximum radius to the bubble series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> and its default is 10.
        /// </value>
        [Parameter] public double? MaximumRadius { get; set; }
        /// <summary>
        /// Gets or sets minimum radius to the bubble series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Double" /> and its default is 3.
        /// </value>
        [Parameter] public double? MinimumRadius { get; set; }
        /// <summary>
        /// Gets or sets the option to show zero size bubble. When it's true, the zero-size bubble renders with a minimum radius.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.Boolean" /> and its default is true.
        /// </value>
        [Parameter] public bool? ShowZeroSizeBubbles { get; set; }
        /// <summary>
        /// Gets or sets a path value on the source object to serve a size to the bubble series.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:System.String" /> and its default is <c>string.Empty</c>.
        /// </value>
        [Parameter] public string SizeValuePath { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the border appearance of the bubble.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" />, and its default is Transparent.
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the border appearance of the bubble.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.Brush" />, and its default is Transparent.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment Stroke { get; set; }

        public new SMTC.BubbleSeries NativeControl => (SMTC.BubbleSeries)((BindableObject)this).NativeControl;

        protected override SMTC.BubbleSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(MaximumRadius):
                    if (!Equals(MaximumRadius, value))
                    {
                        MaximumRadius = (double?)value;
                        NativeControl.MaximumRadius = MaximumRadius ?? (double)SMTC.BubbleSeries.MaximumRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(MinimumRadius):
                    if (!Equals(MinimumRadius, value))
                    {
                        MinimumRadius = (double?)value;
                        NativeControl.MinimumRadius = MinimumRadius ?? (double)SMTC.BubbleSeries.MinimumRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowZeroSizeBubbles):
                    if (!Equals(ShowZeroSizeBubbles, value))
                    {
                        ShowZeroSizeBubbles = (bool?)value;
                        NativeControl.ShowZeroSizeBubbles = ShowZeroSizeBubbles ?? (bool)SMTC.BubbleSeries.ShowZeroSizeBubblesProperty.DefaultValue;
                    }
                    break;
                case nameof(SizeValuePath):
                    if (!Equals(SizeValuePath, value))
                    {
                        SizeValuePath = (string)value;
                        NativeControl.SizeValuePath = SizeValuePath;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.BubbleSeries>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
