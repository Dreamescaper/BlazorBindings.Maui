// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Represents properties for customizing annotation labels.
    /// </summary>
    public partial class ChartAnnotationLabelStyle : ChartLabelStyle
    {
        static ChartAnnotationLabelStyle()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the horizontal text alignment of chart annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLabelAlignment" /> as its value and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartAlignment.Center" />.
        /// </value>
        [Parameter] public SMTC.ChartLabelAlignment? HorizontalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets the vertical text alignment of chart annotation.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLabelAlignment" /> as its value and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartAlignment.Center" />.
        /// </value>
        [Parameter] public SMTC.ChartLabelAlignment? VerticalTextAlignment { get; set; }

        public new SMTC.ChartAnnotationLabelStyle NativeControl => (SMTC.ChartAnnotationLabelStyle)((BindableObject)this).NativeControl;

        protected override SMTC.ChartAnnotationLabelStyle CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(HorizontalTextAlignment):
                    if (!Equals(HorizontalTextAlignment, value))
                    {
                        HorizontalTextAlignment = (SMTC.ChartLabelAlignment?)value;
                        NativeControl.HorizontalTextAlignment = HorizontalTextAlignment ?? (SMTC.ChartLabelAlignment)SMTC.ChartAnnotationLabelStyle.HorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalTextAlignment):
                    if (!Equals(VerticalTextAlignment, value))
                    {
                        VerticalTextAlignment = (SMTC.ChartLabelAlignment?)value;
                        NativeControl.VerticalTextAlignment = VerticalTextAlignment ?? (SMTC.ChartLabelAlignment)SMTC.ChartAnnotationLabelStyle.VerticalTextAlignmentProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
