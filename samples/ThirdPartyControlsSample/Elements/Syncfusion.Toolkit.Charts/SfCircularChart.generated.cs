// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Renders different types of circular charts, including doughnut, pie and radial bar charts. Each chart type presents data in a unique way, designed to enhance user-friendliness.
    /// </summary>
    public partial class SfCircularChart : ChartBase
    {
        static SfCircularChart()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a collection of chart series to be added to the circular chart.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartSeriesCollection" /> instance as value.
        /// </value>
        /// <remarks>
        /// Accepts one or more ChartSeries elements.
        /// </remarks>
        [Parameter] public RenderFragment ChildContent { get; set; }

        public new SMTC.SfCircularChart NativeControl => (SMTC.SfCircularChart)((BindableObject)this).NativeControl;

        protected override SMTC.SfCircularChart CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfCircularChart, SMTC.ChartSeries>(builder, sequence++, ChildContent, x => x.Series);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
