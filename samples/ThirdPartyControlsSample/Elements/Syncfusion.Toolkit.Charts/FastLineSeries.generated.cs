// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.FastLineSeries" /> is a special kind of line series that can render a collection with a large number of data points.
    /// </summary>
    public partial class FastLineSeries : XYDataSeries
    {
        static FastLineSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether to enable smooth line drawing for <see cref="T:Syncfusion.Maui.Toolkit.Charts.FastLineSeries" />.
        /// </summary>
        /// <value>
        /// It accepts <c>bool</c> values and the default value is <c>false</c>.
        /// </value>
        [Parameter] public bool? EnableAntiAliasing { get; set; }

        public new SMTC.FastLineSeries NativeControl => (SMTC.FastLineSeries)((BindableObject)this).NativeControl;

        protected override SMTC.FastLineSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(EnableAntiAliasing):
                    if (!Equals(EnableAntiAliasing, value))
                    {
                        EnableAntiAliasing = (bool?)value;
                        NativeControl.EnableAntiAliasing = EnableAntiAliasing ?? (bool)SMTC.FastLineSeries.EnableAntiAliasingProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
