// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// ZoomPanBehavior enables zooming and panning operations over a cartesian chart.
    /// </summary>
    public partial class ChartZoomPanBehavior : ChartBehavior
    {
        static ChartZoomPanBehavior()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether zooming is enabled using the direction of the axis.
        /// </summary>
        /// <value>
        /// It accept the <c>bool</c> values and the default value is <c>false</c>.
        /// </value>
        [Parameter] public bool? EnableDirectionalZooming { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether zooming is enabled through double tapping.
        /// </summary>
        /// <value>
        /// It accepts the <c>bool</c> values and the default value is <c>true</c>.
        /// </value>
        [Parameter] public bool? EnableDoubleTap { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the panning is enabled.
        /// </summary>
        /// <value>
        /// It accepts the <c>bool</c> values and the default value is <c>true</c>.
        /// </value>
        [Parameter] public bool? EnablePanning { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the finger gesture is enabled or disabled.
        /// </summary>
        /// <value>
        /// It accepts the <c>bool</c> values and its default value is <c>true</c>.
        /// </value>
        [Parameter] public bool? EnablePinchZooming { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the selection zooming is enabled.
        /// </summary>
        /// <value>
        /// It accept the <c>bool</c> values and the default value is <c>false</c>.
        /// </value>
        [Parameter] public bool? EnableSelectionZooming { get; set; }
        /// <summary>
        /// Gets or sets the value that determines the maximum zoom level of the chart.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values and its default value is double.NaN.
        /// </value>
        [Parameter] public double? MaximumZoomLevel { get; set; }
        /// <summary>
        /// Gets or sets the fill color of the selection rectangle.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Microsoft.Maui.Controls.Brush" /> as its value.
        /// </value>
        [Parameter] public Color SelectionRectFillColor { get; set; }
        /// <summary>
        /// Gets or sets the stroke color of the selection rectangle.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Microsoft.Maui.Controls.Brush" /> as its value.
        /// </value>
        [Parameter] public Color SelectionRectStrokeColor { get; set; }
        /// <summary>
        /// Gets or sets the stroke width of the selection rectangle.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values, and the default value is 1.
        /// </value>
        [Parameter] public double? SelectionRectStrokeWidth { get; set; }
        /// <summary>
        /// Gets or sets the mode for zooming direction.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ZoomMode" /> values and the default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ZoomMode.XY" />.
        /// </value>
        [Parameter] public SMTC.ZoomMode? ZoomMode { get; set; }
        /// <summary>
        /// Gets or sets the fill color of the selection rectangle.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Microsoft.Maui.Controls.Brush" /> as its value.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment SelectionRectFill { get; set; }
        /// <summary>
        /// Gets or sets the stroke color of the selection rectangle.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Microsoft.Maui.Controls.Brush" /> as its value.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment SelectionRectStroke { get; set; }

        public new SMTC.ChartZoomPanBehavior NativeControl => (SMTC.ChartZoomPanBehavior)((BindableObject)this).NativeControl;

        protected override SMTC.ChartZoomPanBehavior CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(EnableDirectionalZooming):
                    if (!Equals(EnableDirectionalZooming, value))
                    {
                        EnableDirectionalZooming = (bool?)value;
                        NativeControl.EnableDirectionalZooming = EnableDirectionalZooming ?? (bool)SMTC.ChartZoomPanBehavior.EnableDirectionalZoomingProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableDoubleTap):
                    if (!Equals(EnableDoubleTap, value))
                    {
                        EnableDoubleTap = (bool?)value;
                        NativeControl.EnableDoubleTap = EnableDoubleTap ?? (bool)SMTC.ChartZoomPanBehavior.EnableDoubleTapProperty.DefaultValue;
                    }
                    break;
                case nameof(EnablePanning):
                    if (!Equals(EnablePanning, value))
                    {
                        EnablePanning = (bool?)value;
                        NativeControl.EnablePanning = EnablePanning ?? (bool)SMTC.ChartZoomPanBehavior.EnablePanningProperty.DefaultValue;
                    }
                    break;
                case nameof(EnablePinchZooming):
                    if (!Equals(EnablePinchZooming, value))
                    {
                        EnablePinchZooming = (bool?)value;
                        NativeControl.EnablePinchZooming = EnablePinchZooming ?? (bool)SMTC.ChartZoomPanBehavior.EnablePinchZoomingProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableSelectionZooming):
                    if (!Equals(EnableSelectionZooming, value))
                    {
                        EnableSelectionZooming = (bool?)value;
                        NativeControl.EnableSelectionZooming = EnableSelectionZooming ?? (bool)SMTC.ChartZoomPanBehavior.EnableSelectionZoomingProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumZoomLevel):
                    if (!Equals(MaximumZoomLevel, value))
                    {
                        MaximumZoomLevel = (double?)value;
                        NativeControl.MaximumZoomLevel = MaximumZoomLevel ?? (double)SMTC.ChartZoomPanBehavior.MaximumZoomLevelProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectionRectFillColor):
                    if (!Equals(SelectionRectFillColor, value))
                    {
                        SelectionRectFillColor = (Color)value;
                        NativeControl.SelectionRectFill = SelectionRectFillColor;
                    }
                    break;
                case nameof(SelectionRectStrokeColor):
                    if (!Equals(SelectionRectStrokeColor, value))
                    {
                        SelectionRectStrokeColor = (Color)value;
                        NativeControl.SelectionRectStroke = SelectionRectStrokeColor;
                    }
                    break;
                case nameof(SelectionRectStrokeWidth):
                    if (!Equals(SelectionRectStrokeWidth, value))
                    {
                        SelectionRectStrokeWidth = (double?)value;
                        NativeControl.SelectionRectStrokeWidth = SelectionRectStrokeWidth ?? (double)SMTC.ChartZoomPanBehavior.SelectionRectStrokeWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(ZoomMode):
                    if (!Equals(ZoomMode, value))
                    {
                        ZoomMode = (SMTC.ZoomMode?)value;
                        NativeControl.ZoomMode = ZoomMode ?? (SMTC.ZoomMode)SMTC.ChartZoomPanBehavior.ZoomModeProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectionRectFill):
                    SelectionRectFill = (RenderFragment)value;
                    break;
                case nameof(SelectionRectStroke):
                    SelectionRectStroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartZoomPanBehavior>(builder, sequence++, SelectionRectFill, (x, value) => x.SelectionRectFill = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartZoomPanBehavior>(builder, sequence++, SelectionRectStroke, (x, value) => x.SelectionRectStroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
