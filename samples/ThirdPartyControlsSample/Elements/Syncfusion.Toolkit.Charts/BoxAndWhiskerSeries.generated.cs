// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.BoxAndWhiskerSeries" /> class represents a series that plots box-and-whisker diagrams in a <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart" />.
    /// </summary>
    public partial class BoxAndWhiskerSeries : XYDataSeries
    {
        static BoxAndWhiskerSeries()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the plot mode, which defines how the box plot series should be rendered.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.BoxPlotMode" /> values and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.BoxPlotMode.Exclusive" />.
        /// </value>
        [Parameter] public SMTC.BoxPlotMode? BoxPlotMode { get; set; }
        /// <summary>
        /// Gets or sets the shape type for the outlier.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Syncfusion.Maui.Toolkit.Charts.ShapeType" /> values and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.ShapeType.Circle" />.
        /// </value>
        [Parameter] public SMTC.ShapeType? OutlierShapeType { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to show the median in the box plot or not.
        /// </summary>
        /// <value>
        /// Its accepts the <c>bool</c> values and its default is <c>False</c>
        /// </value>
        [Parameter] public bool? ShowMedian { get; set; }
        /// <summary>
        /// Gets or sets the value that indicates whether to show or hide the outlier of the box plot.
        /// </summary>
        /// <value>
        /// Its accepts the <c>bool</c> values and its default is <c>True</c>
        /// </value>
        [Parameter] public bool? ShowOutlier { get; set; }
        /// <summary>
        /// Gets or sets a value to indicate gap between the segments across the series.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values ranging from 0 to 1, where the default value is 0.
        /// </value>
        [Parameter] public double? Spacing { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the border's appearance of the BoxAndWhisker series.
        /// </summary>
        /// <value>
        /// It accept the <see cref="T:Microsoft.Maui.Controls.Brush" /> values and its default is <c>Black</c>.
        /// </value>
        [Parameter] public Color StrokeColor { get; set; }
        /// <summary>
        /// Gets or sets a value to indicate the width of the box plot.
        /// </summary>
        /// <value>
        /// It accepts <c>double</c> values ranging from 0 to 1, where the default value is <c>0.8</c>.
        /// </value>
        [Parameter] public double? Width { get; set; }
        /// <summary>
        /// Gets or sets a value to customize the border's appearance of the BoxAndWhisker series.
        /// </summary>
        /// <value>
        /// It accept the <see cref="T:Microsoft.Maui.Controls.Brush" /> values and its default is <c>Black</c>.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment Stroke { get; set; }

        public new SMTC.BoxAndWhiskerSeries NativeControl => (SMTC.BoxAndWhiskerSeries)((BindableObject)this).NativeControl;

        protected override SMTC.BoxAndWhiskerSeries CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BoxPlotMode):
                    if (!Equals(BoxPlotMode, value))
                    {
                        BoxPlotMode = (SMTC.BoxPlotMode?)value;
                        NativeControl.BoxPlotMode = BoxPlotMode ?? (SMTC.BoxPlotMode)SMTC.BoxAndWhiskerSeries.BoxPlotModeProperty.DefaultValue;
                    }
                    break;
                case nameof(OutlierShapeType):
                    if (!Equals(OutlierShapeType, value))
                    {
                        OutlierShapeType = (SMTC.ShapeType?)value;
                        NativeControl.OutlierShapeType = OutlierShapeType ?? (SMTC.ShapeType)SMTC.BoxAndWhiskerSeries.OutlierShapeTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowMedian):
                    if (!Equals(ShowMedian, value))
                    {
                        ShowMedian = (bool?)value;
                        NativeControl.ShowMedian = ShowMedian ?? (bool)SMTC.BoxAndWhiskerSeries.ShowMedianProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowOutlier):
                    if (!Equals(ShowOutlier, value))
                    {
                        ShowOutlier = (bool?)value;
                        NativeControl.ShowOutlier = ShowOutlier ?? (bool)SMTC.BoxAndWhiskerSeries.ShowOutlierProperty.DefaultValue;
                    }
                    break;
                case nameof(Spacing):
                    if (!Equals(Spacing, value))
                    {
                        Spacing = (double?)value;
                        NativeControl.Spacing = Spacing ?? (double)SMTC.BoxAndWhiskerSeries.SpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(StrokeColor):
                    if (!Equals(StrokeColor, value))
                    {
                        StrokeColor = (Color)value;
                        NativeControl.Stroke = StrokeColor;
                    }
                    break;
                case nameof(Width):
                    if (!Equals(Width, value))
                    {
                        Width = (double?)value;
                        NativeControl.Width = Width ?? (double)SMTC.BoxAndWhiskerSeries.WidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Stroke):
                    Stroke = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.BoxAndWhiskerSeries>(builder, sequence++, Stroke, (x, value) => x.Stroke = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
