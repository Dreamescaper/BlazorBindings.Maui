// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Renders different types of cartesian-type charts, each representing a unique style of representing data with a more user-friendly and greater UI visualization.
    /// </summary>
    public partial class SfCartesianChart : ChartBase
    {
        static SfCartesianChart()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a <see cref="T:System.Boolean" /> value that indicates whether the series are placed side by side or overlapped.
        /// </summary>
        /// <value>
        /// This property takes the boolean value and its default value is <c>true</c>.
        /// </value>
        [Parameter] public bool? EnableSideBySideSeriesPlacement { get; set; }
        /// <summary>
        /// Gets or sets a <see cref="T:System.Boolean" /> value that indicates whether to change the cartesian chart orientation.
        /// </summary>
        /// <value>
        /// This property takes the boolean value and its default value is <c>false</c>.
        /// </value>
        [Parameter] public bool? IsTransposed { get; set; }
        /// <summary>
        /// Gets or sets a collection of annotations to the chart.
        /// </summary>
        /// <value>
        /// This property takes a<see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAnnotationCollection" /> instance as a value, and its default value is null.
        /// </value>
        [Parameter] public RenderFragment Annotations { get; set; }
        /// <summary>
        /// Gets or sets the palette brushes for chart.
        /// </summary>
        /// <value>
        /// This property takes the list of <see cref="T:Microsoft.Maui.Controls.Brush" /> and its default value is predefined palette.
        /// </value>
        [Parameter] public RenderFragment PaletteBrushes { get; set; }
        /// <summary>
        /// Gets or sets a value for initiating selection or highlighting of a single or multiple series in the chart.
        /// </summary>
        /// <value>
        /// This property takes a <see cref="T:Syncfusion.Maui.Toolkit.Charts.SeriesSelectionBehavior" /> instance as a value, and its default value is null.
        /// </value>
        [Parameter] public RenderFragment SelectionBehavior { get; set; }
        /// <summary>
        /// Gets or sets a collection of chart series to be added in cartesian chart.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartSeriesCollection" /> instance as value.
        /// </value>
        [Parameter] public RenderFragment ChildContent { get; set; }
        /// <summary>
        /// Gets or sets a value for initiating trackball, which displays the tooltip for the data points that are closer to the point where you interact on the chart area.
        /// </summary>
        /// <value>
        /// This property takes a<see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartTrackballBehavior" /> instance as a value, and its default value is null.
        /// </value>
        [Parameter] public RenderFragment TrackballBehavior { get; set; }
        /// <summary>
        /// Gets the collection of horizontal axes in the chart.
        /// </summary>
        /// <value>
        /// Returns the collection of <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAxis" />.
        /// </value>
        [Parameter] public RenderFragment XAxes { get; set; }
        /// <summary>
        /// Gets the collection of vertical axes in the chart.
        /// </summary>
        /// <value>
        /// Returns the collection of <see cref="T:Syncfusion.Maui.Toolkit.Charts.RangeAxisBase" />.
        /// </value>
        [Parameter] public RenderFragment YAxes { get; set; }
        /// <summary>
        /// Gets or sets a value for initiating the zooming and panning operations in chart.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartZoomPanBehavior" /> value and its default value is null.
        /// </value>
        [Parameter] public RenderFragment ZoomPanBehavior { get; set; }
        /// <summary>
        /// This event is raised when the trackball is moved from one data point to another. This helps to customize the trackball label and marker based on the condition.
        /// </summary>
        [Parameter] public EventCallback<SMTC.TrackballEventArgs> OnTrackballCreated { get; set; }
        /// <summary>
        /// This event is triggered when zooming begins.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartZoomStartEventArgs> OnZoomStart { get; set; }
        /// <summary>
        /// This event is triggered during the zooming process.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartZoomDeltaEventArgs> OnZoomDelta { get; set; }
        /// <summary>
        /// This event is triggered when zooming concludes.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartZoomEventArgs> OnZoomEnd { get; set; }
        /// <summary>
        /// This event is triggered when a selection zoom action begins.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartSelectionZoomEventArgs> OnSelectionZoomStart { get; set; }
        /// <summary>
        /// This event is triggered during the process of selection zooming.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartSelectionZoomDeltaEventArgs> OnSelectionZoomDelta { get; set; }
        /// <summary>
        /// This event is triggered when a selection zoom action concludes.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartSelectionZoomEventArgs> OnSelectionZoomEnd { get; set; }
        /// <summary>
        /// This event is triggered when panning the chart.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartScrollEventArgs> OnScroll { get; set; }
        /// <summary>
        /// This event is triggered when reset the chart.
        /// </summary>
        [Parameter] public EventCallback<SMTC.ChartResetZoomEventArgs> OnResetZoom { get; set; }

        public new SMTC.SfCartesianChart NativeControl => (SMTC.SfCartesianChart)((BindableObject)this).NativeControl;

        protected override SMTC.SfCartesianChart CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(EnableSideBySideSeriesPlacement):
                    if (!Equals(EnableSideBySideSeriesPlacement, value))
                    {
                        EnableSideBySideSeriesPlacement = (bool?)value;
                        NativeControl.EnableSideBySideSeriesPlacement = EnableSideBySideSeriesPlacement ?? (bool)SMTC.SfCartesianChart.EnableSideBySideSeriesPlacementProperty.DefaultValue;
                    }
                    break;
                case nameof(IsTransposed):
                    if (!Equals(IsTransposed, value))
                    {
                        IsTransposed = (bool?)value;
                        NativeControl.IsTransposed = IsTransposed ?? (bool)SMTC.SfCartesianChart.IsTransposedProperty.DefaultValue;
                    }
                    break;
                case nameof(Annotations):
                    Annotations = (RenderFragment)value;
                    break;
                case nameof(PaletteBrushes):
                    PaletteBrushes = (RenderFragment)value;
                    break;
                case nameof(SelectionBehavior):
                    SelectionBehavior = (RenderFragment)value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;
                case nameof(TrackballBehavior):
                    TrackballBehavior = (RenderFragment)value;
                    break;
                case nameof(XAxes):
                    XAxes = (RenderFragment)value;
                    break;
                case nameof(YAxes):
                    YAxes = (RenderFragment)value;
                    break;
                case nameof(ZoomPanBehavior):
                    ZoomPanBehavior = (RenderFragment)value;
                    break;
                case nameof(OnTrackballCreated):
                    if (!Equals(OnTrackballCreated, value))
                    {
                        void NativeControlTrackballCreated(object sender, SMTC.TrackballEventArgs e) => InvokeEventCallback(OnTrackballCreated, e);

                        OnTrackballCreated = (EventCallback<SMTC.TrackballEventArgs>)value;
                        NativeControl.TrackballCreated -= NativeControlTrackballCreated;
                        NativeControl.TrackballCreated += NativeControlTrackballCreated;
                    }
                    break;
                case nameof(OnZoomStart):
                    if (!Equals(OnZoomStart, value))
                    {
                        void NativeControlZoomStart(object sender, SMTC.ChartZoomStartEventArgs e) => InvokeEventCallback(OnZoomStart, e);

                        OnZoomStart = (EventCallback<SMTC.ChartZoomStartEventArgs>)value;
                        NativeControl.ZoomStart -= NativeControlZoomStart;
                        NativeControl.ZoomStart += NativeControlZoomStart;
                    }
                    break;
                case nameof(OnZoomDelta):
                    if (!Equals(OnZoomDelta, value))
                    {
                        void NativeControlZoomDelta(object sender, SMTC.ChartZoomDeltaEventArgs e) => InvokeEventCallback(OnZoomDelta, e);

                        OnZoomDelta = (EventCallback<SMTC.ChartZoomDeltaEventArgs>)value;
                        NativeControl.ZoomDelta -= NativeControlZoomDelta;
                        NativeControl.ZoomDelta += NativeControlZoomDelta;
                    }
                    break;
                case nameof(OnZoomEnd):
                    if (!Equals(OnZoomEnd, value))
                    {
                        void NativeControlZoomEnd(object sender, SMTC.ChartZoomEventArgs e) => InvokeEventCallback(OnZoomEnd, e);

                        OnZoomEnd = (EventCallback<SMTC.ChartZoomEventArgs>)value;
                        NativeControl.ZoomEnd -= NativeControlZoomEnd;
                        NativeControl.ZoomEnd += NativeControlZoomEnd;
                    }
                    break;
                case nameof(OnSelectionZoomStart):
                    if (!Equals(OnSelectionZoomStart, value))
                    {
                        void NativeControlSelectionZoomStart(object sender, SMTC.ChartSelectionZoomEventArgs e) => InvokeEventCallback(OnSelectionZoomStart, e);

                        OnSelectionZoomStart = (EventCallback<SMTC.ChartSelectionZoomEventArgs>)value;
                        NativeControl.SelectionZoomStart -= NativeControlSelectionZoomStart;
                        NativeControl.SelectionZoomStart += NativeControlSelectionZoomStart;
                    }
                    break;
                case nameof(OnSelectionZoomDelta):
                    if (!Equals(OnSelectionZoomDelta, value))
                    {
                        void NativeControlSelectionZoomDelta(object sender, SMTC.ChartSelectionZoomDeltaEventArgs e) => InvokeEventCallback(OnSelectionZoomDelta, e);

                        OnSelectionZoomDelta = (EventCallback<SMTC.ChartSelectionZoomDeltaEventArgs>)value;
                        NativeControl.SelectionZoomDelta -= NativeControlSelectionZoomDelta;
                        NativeControl.SelectionZoomDelta += NativeControlSelectionZoomDelta;
                    }
                    break;
                case nameof(OnSelectionZoomEnd):
                    if (!Equals(OnSelectionZoomEnd, value))
                    {
                        void NativeControlSelectionZoomEnd(object sender, SMTC.ChartSelectionZoomEventArgs e) => InvokeEventCallback(OnSelectionZoomEnd, e);

                        OnSelectionZoomEnd = (EventCallback<SMTC.ChartSelectionZoomEventArgs>)value;
                        NativeControl.SelectionZoomEnd -= NativeControlSelectionZoomEnd;
                        NativeControl.SelectionZoomEnd += NativeControlSelectionZoomEnd;
                    }
                    break;
                case nameof(OnScroll):
                    if (!Equals(OnScroll, value))
                    {
                        void NativeControlScroll(object sender, SMTC.ChartScrollEventArgs e) => InvokeEventCallback(OnScroll, e);

                        OnScroll = (EventCallback<SMTC.ChartScrollEventArgs>)value;
                        NativeControl.Scroll -= NativeControlScroll;
                        NativeControl.Scroll += NativeControlScroll;
                    }
                    break;
                case nameof(OnResetZoom):
                    if (!Equals(OnResetZoom, value))
                    {
                        void NativeControlResetZoom(object sender, SMTC.ChartResetZoomEventArgs e) => InvokeEventCallback(OnResetZoom, e);

                        OnResetZoom = (EventCallback<SMTC.ChartResetZoomEventArgs>)value;
                        NativeControl.ResetZoom -= NativeControlResetZoom;
                        NativeControl.ResetZoom += NativeControlResetZoom;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfCartesianChart, SMTC.ChartAnnotation>(builder, sequence++, Annotations, x => x.Annotations);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfCartesianChart, MC.Brush>(builder, sequence++, PaletteBrushes, x => x.PaletteBrushes);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCartesianChart>(builder, sequence++, SelectionBehavior, (x, value) => x.SelectionBehavior = (SMTC.SeriesSelectionBehavior)value);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfCartesianChart, SMTC.ChartSeries>(builder, sequence++, ChildContent, x => x.Series);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCartesianChart>(builder, sequence++, TrackballBehavior, (x, value) => x.TrackballBehavior = (SMTC.ChartTrackballBehavior)value);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfCartesianChart, SMTC.ChartAxis>(builder, sequence++, XAxes, x => x.XAxes);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfCartesianChart, SMTC.RangeAxisBase>(builder, sequence++, YAxes, x => x.YAxes);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCartesianChart>(builder, sequence++, ZoomPanBehavior, (x, value) => x.ZoomPanBehavior = (SMTC.ChartZoomPanBehavior)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
