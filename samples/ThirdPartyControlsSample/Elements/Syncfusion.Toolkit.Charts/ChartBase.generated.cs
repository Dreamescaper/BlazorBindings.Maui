// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartBase" /> class is the base for <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart" />, <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfCircularChart" />, <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfFunnelChart" />, <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfPyramidChart" /> and <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfPolarChart" /> types.
    /// </summary>
    public abstract partial class ChartBase : BlazorBindings.Maui.Elements.View
    {
        static ChartBase()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the title for chart. It supports the string or any view as title.
        /// </summary>
        /// <value>
        /// This property takes the <c>object</c> as its value. Its default value is null.
        /// </value>
        [Parameter] public object Title { get; set; }
        /// <summary>
        /// Gets or sets the interactive behavior that allows to override and customize the touch interaction methods.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartInteractiveBehavior" /> instance as value and its default value is null.
        /// </value>
        [Parameter] public RenderFragment InteractiveBehavior { get; set; }
        /// <summary>
        /// Gets or sets the legend that helps to identify the corresponding series or data point in chart.
        /// </summary>
        /// <value>
        /// This property takes a <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLegend" /> instance as value and its default value is null.
        /// </value>
        [Parameter] public RenderFragment Legend { get; set; }
        /// <summary>
        /// Gets or sets the view to the background of chart area.
        /// </summary>
        /// <value>
        /// This property takes the <c>View</c> as its value. Its default value is null.
        /// </value>
        [Parameter] public RenderFragment PlotAreaBackgroundView { get; set; }
        /// <summary>
        /// Gets or sets a tooltip behavior that allows to customize the default tooltip appearance in the chart.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartTooltipBehavior" /> instance as value and its default value is null.
        /// </value>
        [Parameter] public RenderFragment TooltipBehavior { get; set; }

        public new SMTC.ChartBase NativeControl => (SMTC.ChartBase)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Title):
                    if (!Equals(Title, value))
                    {
                        Title = (object)value;
                        NativeControl.Title = Title;
                    }
                    break;
                case nameof(InteractiveBehavior):
                    InteractiveBehavior = (RenderFragment)value;
                    break;
                case nameof(Legend):
                    Legend = (RenderFragment)value;
                    break;
                case nameof(PlotAreaBackgroundView):
                    PlotAreaBackgroundView = (RenderFragment)value;
                    break;
                case nameof(TooltipBehavior):
                    TooltipBehavior = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartBase>(builder, sequence++, InteractiveBehavior, (x, value) => x.InteractiveBehavior = (SMTC.ChartInteractiveBehavior)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartBase>(builder, sequence++, Legend, (x, value) => x.Legend = (SMTC.ChartLegend)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartBase>(builder, sequence++, PlotAreaBackgroundView, (x, value) => x.PlotAreaBackgroundView = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartBase>(builder, sequence++, TooltipBehavior, (x, value) => x.TooltipBehavior = (SMTC.ChartTooltipBehavior)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
