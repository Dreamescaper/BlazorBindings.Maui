// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// This class is used to add a horizontal line annotation to the <see cref="T:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart" />. An instance of this class needs to be added to the <see cref="P:Syncfusion.Maui.Toolkit.Charts.SfCartesianChart.Annotations" /> collection.
    /// </summary>
    public partial class HorizontalLineAnnotation : LineAnnotation
    {
        static HorizontalLineAnnotation()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether to enable or disable the display of the annotation label on the axis.
        /// </summary>
        /// <value>
        /// This property takes the <c>bool</c> as its value and its default value is false.
        /// </value>
        [Parameter] public bool? ShowAxisLabel { get; set; }
        /// <summary>
        /// Gets or sets the customized style for the annotation axis label.
        /// </summary>
        /// <value>
        /// This property takes the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartLabelStyle" /> as its value.
        /// </value>
        [Parameter] public RenderFragment AxisLabelStyle { get; set; }

        public new SMTC.HorizontalLineAnnotation NativeControl => (SMTC.HorizontalLineAnnotation)((BindableObject)this).NativeControl;

        protected override SMTC.HorizontalLineAnnotation CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ShowAxisLabel):
                    if (!Equals(ShowAxisLabel, value))
                    {
                        ShowAxisLabel = (bool?)value;
                        NativeControl.ShowAxisLabel = ShowAxisLabel ?? (bool)SMTC.HorizontalLineAnnotation.ShowAxisLabelProperty.DefaultValue;
                    }
                    break;
                case nameof(AxisLabelStyle):
                    AxisLabelStyle = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.HorizontalLineAnnotation>(builder, sequence++, AxisLabelStyle, (x, value) => x.AxisLabelStyle = (SMTC.ChartLabelStyle)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
