// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// Renders polar line and area charts for data representation and enhanced user interface visualization.
    /// </summary>
    public partial class SfPolarChart : ChartBase
    {
        static SfPolarChart()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the gridline type value that can be used to modify the polar chart grid line type to Polygon or Circle.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.PolarChartGridLineType" /> value and its default value is <see cref="F:Syncfusion.Maui.Toolkit.Charts.PolarChartGridLineType.Circle" />.
        /// </value>
        [Parameter] public SMTC.PolarChartGridLineType? GridLineType { get; set; }
        /// <summary>
        /// Gets or sets the value that can be used to modify the series starting angle.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartPolarAngle" /> value and it has the default value of <see cref="F:Syncfusion.Maui.Toolkit.Charts.ChartPolarAngle.Rotate270" />.
        /// </value>
        [Parameter] public SMTC.ChartPolarAngle? StartAngle { get; set; }
        /// <summary>
        /// Gets or sets the palette brushes for the chart.
        /// </summary>
        /// <value>
        /// This property takes the list of <see cref="T:Microsoft.Maui.Controls.Brush" />, and comes with a set of predefined brushes by default.
        /// </value>
        [Parameter] public RenderFragment PaletteBrushes { get; set; }
        /// <summary>
        /// Gets or sets the primary axis in the chart.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartAxis" /> value.
        /// </value>
        [Parameter] public RenderFragment PrimaryAxis { get; set; }
        /// <summary>
        /// Gets or sets the collection of vertical axis in the chart.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.Charts.RangeAxisBase" /> value.
        /// </value>
        [Parameter] public RenderFragment SecondaryAxis { get; set; }
        /// <summary>
        /// Gets or sets a collection of chart series to be added in Polar chart.
        /// </summary>
        /// <value>
        /// This property takes <see cref="T:Syncfusion.Maui.Toolkit.Charts.ChartPolarSeriesCollection" /> instance as value.
        /// </value>
        [Parameter] public RenderFragment ChildContent { get; set; }

        public new SMTC.SfPolarChart NativeControl => (SMTC.SfPolarChart)((BindableObject)this).NativeControl;

        protected override SMTC.SfPolarChart CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(GridLineType):
                    if (!Equals(GridLineType, value))
                    {
                        GridLineType = (SMTC.PolarChartGridLineType?)value;
                        NativeControl.GridLineType = GridLineType ?? (SMTC.PolarChartGridLineType)SMTC.SfPolarChart.GridLineTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(StartAngle):
                    if (!Equals(StartAngle, value))
                    {
                        StartAngle = (SMTC.ChartPolarAngle?)value;
                        NativeControl.StartAngle = StartAngle ?? (SMTC.ChartPolarAngle)SMTC.SfPolarChart.StartAngleProperty.DefaultValue;
                    }
                    break;
                case nameof(PaletteBrushes):
                    PaletteBrushes = (RenderFragment)value;
                    break;
                case nameof(PrimaryAxis):
                    PrimaryAxis = (RenderFragment)value;
                    break;
                case nameof(SecondaryAxis):
                    SecondaryAxis = (RenderFragment)value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfPolarChart, MC.Brush>(builder, sequence++, PaletteBrushes, x => x.PaletteBrushes);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfPolarChart>(builder, sequence++, PrimaryAxis, (x, value) => x.PrimaryAxis = (SMTC.ChartAxis)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfPolarChart>(builder, sequence++, SecondaryAxis, (x, value) => x.SecondaryAxis = (SMTC.RangeAxisBase)value);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfPolarChart, SMTC.PolarSeries>(builder, sequence++, ChildContent, x => x.Series);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
