// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Charts;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Charts
{
    /// <summary>
    /// ChartTooltipBehavior is often used to specify extra information when the mouse pointer moved over an element.
    /// </summary>
    public partial class ChartTooltipBehavior : ChartBehavior
    {
        static ChartTooltipBehavior()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the brush value to customize the tooltip background.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.Brush" /> value and the default value is Black.
        /// </value>
        [Parameter] public Color BackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets a value to specify the duration time in seconds for which tooltip will be displayed.
        /// </summary>
        /// <value>
        /// It accepts the <c>int</c>&gt; values and the default value is 2.
        /// </value>
        [Parameter] public int? Duration { get; set; }
        /// <summary>
        /// Gets or sets a value to specify the FontAttributes for the tooltip label.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Controls.FontAttributes" /> values and the default value is <see cref="F:Microsoft.Maui.Controls.FontAttributes.None" />.
        /// </value>
        [Parameter] public MC.FontAttributes? FontAttributes { get; set; }
        /// <summary>
        /// Gets or sets a value to specify the FontFamily for the tooltip label.
        /// </summary>
        /// <value>
        /// It accepts <c>string</c> values and its default value is null.
        /// </value>
        [Parameter] public string FontFamily { get; set; }
        /// <summary>
        /// Gets or sets a value to change the label's text size.
        /// </summary>
        /// <value>
        /// It accepts the float values and the default value is 14.
        /// </value>
        [Parameter] public float? FontSize { get; set; }
        /// <summary>
        /// Gets or sets a thickness value to adjust the tooltip margin.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Thickness" /> values and the default value is 0.
        /// </value>
        [Parameter] public Thickness? Margin { get; set; }
        /// <summary>
        /// Gets or sets the color value to customize the text color of the tooltip label.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Graphics.Color" /> values and the default value is White.
        /// </value>
        [Parameter] public Color TextColor { get; set; }
        /// <summary>
        /// Gets or sets the brush value to customize the tooltip background.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Microsoft.Maui.Controls.Brush" /> value and the default value is Black.
        /// </value>
        /// <remarks>
        /// Accepts single Brush element.
        /// </remarks>
        [Parameter] public RenderFragment Background { get; set; }

        public new SMTC.ChartTooltipBehavior NativeControl => (SMTC.ChartTooltipBehavior)((BindableObject)this).NativeControl;

        protected override SMTC.ChartTooltipBehavior CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundColor):
                    if (!Equals(BackgroundColor, value))
                    {
                        BackgroundColor = (Color)value;
                        NativeControl.Background = BackgroundColor;
                    }
                    break;
                case nameof(Duration):
                    if (!Equals(Duration, value))
                    {
                        Duration = (int?)value;
                        NativeControl.Duration = Duration ?? (int)SMTC.ChartTooltipBehavior.DurationProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAttributes):
                    if (!Equals(FontAttributes, value))
                    {
                        FontAttributes = (MC.FontAttributes?)value;
                        NativeControl.FontAttributes = FontAttributes ?? (MC.FontAttributes)SMTC.ChartTooltipBehavior.FontAttributesProperty.DefaultValue;
                    }
                    break;
                case nameof(FontFamily):
                    if (!Equals(FontFamily, value))
                    {
                        FontFamily = (string)value;
                        NativeControl.FontFamily = FontFamily;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (float?)value;
                        NativeControl.FontSize = FontSize ?? (float)SMTC.ChartTooltipBehavior.FontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(Margin):
                    if (!Equals(Margin, value))
                    {
                        Margin = (Thickness?)value;
                        NativeControl.Margin = Margin ?? (Thickness)SMTC.ChartTooltipBehavior.MarginProperty.DefaultValue;
                    }
                    break;
                case nameof(TextColor):
                    if (!Equals(TextColor, value))
                    {
                        TextColor = (Color)value;
                        NativeControl.TextColor = TextColor;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.ChartTooltipBehavior>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
