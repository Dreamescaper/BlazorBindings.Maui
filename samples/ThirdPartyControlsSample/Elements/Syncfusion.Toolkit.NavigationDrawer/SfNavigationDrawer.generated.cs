// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using SMTN = Syncfusion.Maui.Toolkit.NavigationDrawer;
using System;
using System.ComponentModel;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.NavigationDrawer
{
    /// <summary>
    /// Represents the <see cref="T:Syncfusion.Maui.Toolkit.NavigationDrawer.SfNavigationDrawer" /> control that contains multiple items that share the same space on the screen.
    /// </summary>
    public partial class SfNavigationDrawer : SfNavigationDrawerExt
    {
        static SfNavigationDrawer()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether to open or close the drawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.SfNavigationDrawer.IsOpen" /> values and the default value is false.
        /// </value>
        [Parameter] public bool? IsOpen { get; set; }
        /// <summary>
        /// Gets or sets the view that can be used to customize the content view of SfNavigationDrawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.SfNavigationDrawer.ContentView" /> values and the default value is null.
        /// </value>
        [Parameter] public RenderFragment ContentView { get; set; }
        /// <summary>
        /// Gets or sets the settings for the navigation drawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.SfNavigationDrawer.DrawerSettings" /> values and the default value is a new instance of <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.SfNavigationDrawer.DrawerSettings" />.
        /// </value>
        [Parameter] public RenderFragment DrawerSettings { get; set; }
        [Parameter] public EventCallback OnDrawerClosed { get; set; }
        [Parameter] public EventCallback OnDrawerOpened { get; set; }
        [Parameter] public EventCallback<SMTN.ToggledEventArgs> OnDrawerToggled { get; set; }
        [Parameter] public EventCallback<CancelEventArgs> OnDrawerClosing { get; set; }
        [Parameter] public EventCallback<CancelEventArgs> OnDrawerOpening { get; set; }

        public new SMTN.SfNavigationDrawer NativeControl => (SMTN.SfNavigationDrawer)((BindableObject)this).NativeControl;

        protected override SMTN.SfNavigationDrawer CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(FlowDirection):
                    if (!Equals(FlowDirection, value))
                    {
                        FlowDirection = (FlowDirection?)value;
                        NativeControl.FlowDirection = FlowDirection ?? (FlowDirection)SMTN.SfNavigationDrawer.FlowDirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(IsOpen):
                    if (!Equals(IsOpen, value))
                    {
                        IsOpen = (bool?)value;
                        NativeControl.IsOpen = IsOpen ?? (bool)SMTN.SfNavigationDrawer.IsOpenProperty.DefaultValue;
                    }
                    break;
                case nameof(ContentView):
                    ContentView = (RenderFragment)value;
                    break;
                case nameof(DrawerSettings):
                    DrawerSettings = (RenderFragment)value;
                    break;
                case nameof(OnDrawerClosed):
                    if (!Equals(OnDrawerClosed, value))
                    {
                        void NativeControlDrawerClosed(object sender, EventArgs e) => InvokeEventCallback(OnDrawerClosed);

                        OnDrawerClosed = (EventCallback)value;
                        NativeControl.DrawerClosed -= NativeControlDrawerClosed;
                        NativeControl.DrawerClosed += NativeControlDrawerClosed;
                    }
                    break;
                case nameof(OnDrawerOpened):
                    if (!Equals(OnDrawerOpened, value))
                    {
                        void NativeControlDrawerOpened(object sender, EventArgs e) => InvokeEventCallback(OnDrawerOpened);

                        OnDrawerOpened = (EventCallback)value;
                        NativeControl.DrawerOpened -= NativeControlDrawerOpened;
                        NativeControl.DrawerOpened += NativeControlDrawerOpened;
                    }
                    break;
                case nameof(OnDrawerToggled):
                    if (!Equals(OnDrawerToggled, value))
                    {
                        void NativeControlDrawerToggled(object sender, SMTN.ToggledEventArgs e) => InvokeEventCallback(OnDrawerToggled, e);

                        OnDrawerToggled = (EventCallback<SMTN.ToggledEventArgs>)value;
                        NativeControl.DrawerToggled -= NativeControlDrawerToggled;
                        NativeControl.DrawerToggled += NativeControlDrawerToggled;
                    }
                    break;
                case nameof(OnDrawerClosing):
                    if (!Equals(OnDrawerClosing, value))
                    {
                        void NativeControlDrawerClosing(object sender, CancelEventArgs e) => InvokeEventCallback(OnDrawerClosing, e);

                        OnDrawerClosing = (EventCallback<CancelEventArgs>)value;
                        NativeControl.DrawerClosing -= NativeControlDrawerClosing;
                        NativeControl.DrawerClosing += NativeControlDrawerClosing;
                    }
                    break;
                case nameof(OnDrawerOpening):
                    if (!Equals(OnDrawerOpening, value))
                    {
                        void NativeControlDrawerOpening(object sender, CancelEventArgs e) => InvokeEventCallback(OnDrawerOpening, e);

                        OnDrawerOpening = (EventCallback<CancelEventArgs>)value;
                        NativeControl.DrawerOpening -= NativeControlDrawerOpening;
                        NativeControl.DrawerOpening += NativeControlDrawerOpening;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTN.SfNavigationDrawer>(builder, sequence++, ContentView, (x, value) => x.ContentView = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTN.SfNavigationDrawer>(builder, sequence++, DrawerSettings, (x, value) => x.DrawerSettings = (SMTN.DrawerSettings)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
