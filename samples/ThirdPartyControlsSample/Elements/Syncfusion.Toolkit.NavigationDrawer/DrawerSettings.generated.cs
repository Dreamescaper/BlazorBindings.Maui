// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTN = Syncfusion.Maui.Toolkit.NavigationDrawer;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.NavigationDrawer
{
    /// <summary>
    /// Drawer settings class for customize the drawer.
    /// </summary>
    public partial class DrawerSettings : BlazorBindings.Maui.Elements.Element
    {
        static DrawerSettings()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that can be used to customize the background color of the drawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.ContentBackground" /> values and the default value is "#F7F2FB".
        /// </value>
        [Parameter] public Color ContentBackground { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the navigation drawer's footer height.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.DrawerFooterHeight" /> values and the default value is 50d.
        /// </value>
        [Parameter] public double? DrawerFooterHeight { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the navigation drawer's header height.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.DrawerHeaderHeight" /> values and the default value is 50d.
        /// </value>
        [Parameter] public double? DrawerHeaderHeight { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to modify the drawer's height.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.DrawerHeight" /> values and the default value is 500d.
        /// </value>
        [Parameter] public double? DrawerHeight { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to modify the drawer's width.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.DrawerWidth" /> values and the default value is 200d.
        /// </value>
        [Parameter] public double? DrawerWidth { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to modify the animation duration of the drawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.Duration" /> values and the default value is 400d.
        /// </value>
        [Parameter] public double? Duration { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the swiping gesture to open the drawer is enabled or not.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.EnableSwipeGesture" /> values and the default value is true.
        /// </value>
        [Parameter] public bool? EnableSwipeGesture { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the drawer's position.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.Position" /> values and the default value is <see cref="F:Syncfusion.Maui.Toolkit.NavigationDrawer.Position.Left" />.
        /// </value>
        [Parameter] public SMTN.Position? Position { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to modify the touch threshold of the drawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.TouchThreshold" /> values and the default value is 120d.
        /// </value>
        [Parameter] public double? TouchThreshold { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to modify the animation of the drawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.Transition" /> values and the default value is <see cref="F:Syncfusion.Maui.Toolkit.NavigationDrawer.Transition.SlideOnTop" />.
        /// </value>
        [Parameter] public SMTN.Transition? Transition { get; set; }
        /// <summary>
        /// Gets or sets the view that can be used to customize the drawer content view of SfNavigationDrawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.DrawerContentView" /> values and the default value is null.
        /// </value>
        [Parameter] public RenderFragment DrawerContentView { get; set; }
        /// <summary>
        /// Gets or sets the view that can be used to customize the drawer footer view of SfNavigationDrawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.DrawerFooterView" /> values and the default value is null.
        /// </value>
        [Parameter] public RenderFragment DrawerFooterView { get; set; }
        /// <summary>
        /// Gets or sets the view that can be used to customize the drawer header view of SfNavigationDrawer.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.NavigationDrawer.DrawerSettings.DrawerHeaderView" /> values and the default value is null.
        /// </value>
        [Parameter] public RenderFragment DrawerHeaderView { get; set; }

        public new SMTN.DrawerSettings NativeControl => (SMTN.DrawerSettings)((BindableObject)this).NativeControl;

        protected override SMTN.DrawerSettings CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ContentBackground):
                    if (!Equals(ContentBackground, value))
                    {
                        ContentBackground = (Color)value;
                        NativeControl.ContentBackground = ContentBackground;
                    }
                    break;
                case nameof(DrawerFooterHeight):
                    if (!Equals(DrawerFooterHeight, value))
                    {
                        DrawerFooterHeight = (double?)value;
                        NativeControl.DrawerFooterHeight = DrawerFooterHeight ?? (double)SMTN.DrawerSettings.DrawerFooterHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(DrawerHeaderHeight):
                    if (!Equals(DrawerHeaderHeight, value))
                    {
                        DrawerHeaderHeight = (double?)value;
                        NativeControl.DrawerHeaderHeight = DrawerHeaderHeight ?? (double)SMTN.DrawerSettings.DrawerHeaderHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(DrawerHeight):
                    if (!Equals(DrawerHeight, value))
                    {
                        DrawerHeight = (double?)value;
                        NativeControl.DrawerHeight = DrawerHeight ?? (double)SMTN.DrawerSettings.DrawerHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(DrawerWidth):
                    if (!Equals(DrawerWidth, value))
                    {
                        DrawerWidth = (double?)value;
                        NativeControl.DrawerWidth = DrawerWidth ?? (double)SMTN.DrawerSettings.DrawerWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Duration):
                    if (!Equals(Duration, value))
                    {
                        Duration = (double?)value;
                        NativeControl.Duration = Duration ?? (double)SMTN.DrawerSettings.DurationProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableSwipeGesture):
                    if (!Equals(EnableSwipeGesture, value))
                    {
                        EnableSwipeGesture = (bool?)value;
                        NativeControl.EnableSwipeGesture = EnableSwipeGesture ?? (bool)SMTN.DrawerSettings.EnableSwipeGestureProperty.DefaultValue;
                    }
                    break;
                case nameof(Position):
                    if (!Equals(Position, value))
                    {
                        Position = (SMTN.Position?)value;
                        NativeControl.Position = Position ?? (SMTN.Position)SMTN.DrawerSettings.PositionProperty.DefaultValue;
                    }
                    break;
                case nameof(TouchThreshold):
                    if (!Equals(TouchThreshold, value))
                    {
                        TouchThreshold = (double?)value;
                        NativeControl.TouchThreshold = TouchThreshold ?? (double)SMTN.DrawerSettings.TouchThresholdProperty.DefaultValue;
                    }
                    break;
                case nameof(Transition):
                    if (!Equals(Transition, value))
                    {
                        Transition = (SMTN.Transition?)value;
                        NativeControl.Transition = Transition ?? (SMTN.Transition)SMTN.DrawerSettings.TransitionProperty.DefaultValue;
                    }
                    break;
                case nameof(DrawerContentView):
                    DrawerContentView = (RenderFragment)value;
                    break;
                case nameof(DrawerFooterView):
                    DrawerFooterView = (RenderFragment)value;
                    break;
                case nameof(DrawerHeaderView):
                    DrawerHeaderView = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTN.DrawerSettings>(builder, sequence++, DrawerContentView, (x, value) => x.DrawerContentView = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTN.DrawerSettings>(builder, sequence++, DrawerFooterView, (x, value) => x.DrawerFooterView = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTN.DrawerSettings>(builder, sequence++, DrawerHeaderView, (x, value) => x.DrawerHeaderView = (MC.View)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
