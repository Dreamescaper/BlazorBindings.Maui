// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Chips;
using System;
using System.Collections;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Chips
{
    /// <summary>
    /// Represents a grouping control which adds <see cref="T:Syncfusion.Maui.Toolkit.Chips.SfChip" /> control to a layout and grouped them for selection.
    /// </summary>
    public partial class SfChipGroup : BlazorBindings.Maui.Elements.ContentView
    {
        static SfChipGroup()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the value of ChipBackgroundColor. This property can be used to change the background color of the chip in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip background color. The default value is SolidColorBrush(Colors.Transparent).
        /// </value>
        [Parameter] public Color ChipBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the value of ChipCornerRadius. This property can be used to customize the corners of the chip control.
        /// </summary>
        /// <value>
        /// Specifies the corner radius. The default value is CornerRadius(8).
        /// </value>
        [Parameter] public CornerRadius? ChipCornerRadius { get; set; }
        /// <summary>
        /// Gets or sets the value of ChipFontAttributes. This property can be used to change the font of the chip text in either bold or italic in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip text font attributes. The default value is <see cref="F:Microsoft.Maui.Controls.FontAttributes.None" />.
        /// </value>
        [Parameter] public MC.FontAttributes? ChipFontAttributes { get; set; }
        /// <summary>
        /// Gets or sets the font family for the chip text.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.String" /> representing the font family to be used for the chip text. The default value is string.Empty.
        /// </value>
        [Parameter] public string ChipFontFamily { get; set; }
        /// <summary>
        /// Gets or sets the value of the ChipImageSize. This property can be used to customize the width and height of the chip image.
        /// </summary>
        /// <value>
        /// Specifies the chip image size. The default value is 18d.
        /// </value>
        [Parameter] public double? ChipImageSize { get; set; }
        /// <summary>
        /// Gets or sets the value of ChipPadding. This chip padding is used for arranging the items with padding.
        /// </summary>
        /// <value>
        /// Specifies the chip padding. The default value is Thickness(2d, 1d, 1d, 1d).
        /// </value>
        [Parameter] public Thickness? ChipPadding { get; set; }
        /// <summary>
        /// Gets or sets the value of the ChipStroke. This property can be used to change the border color of the chip in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip stroke color. The default value is SolidColorBrush(Color.FromArgb("#79747E")).
        /// </value>
        [Parameter] public Color ChipStrokeColor { get; set; }
        /// <summary>
        /// Gets or sets the value of the ChipStrokeThickness. This property can be used to change the border width of chips.
        /// </summary>
        /// <value>
        /// Specifies the chip border width. The default value is 1d.
        /// </value>
        [Parameter] public double? ChipStrokeThickness { get; set; }
        /// <summary>
        /// Gets or sets the value of ChipTextColor. This property can be used to change the text color of the chip in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip text color. The default value is Color.FromArgb("#49454F").
        /// </value>
        [Parameter] public Color ChipTextColor { get; set; }
        /// <summary>
        /// Gets or sets the value of ChipTextSize. This property can be used to change the text size for the chip in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip text size. The default value is 14d.
        /// </value>
        [Parameter] public double? ChipTextSize { get; set; }
        /// <summary>
        /// Gets or sets the value of ChipType. This property can be used to set the type of the chips in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip type. The default value is <see cref="F:Syncfusion.Maui.Toolkit.Chips.SfChipsType.Input" />.
        /// </value>
        [Parameter] public SMTC.SfChipsType? ChipType { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates the selection mode of chip item in the <see cref="F:Syncfusion.Maui.Toolkit.Chips.SfChipsType.Choice" /> type.
        /// </summary>
        /// <value>
        /// Specifies the choice mode. The default value is <see cref="F:Syncfusion.Maui.Toolkit.Chips.ChoiceMode.Single" />.
        /// </value>
        [Parameter] public SMTC.ChoiceMode? ChoiceMode { get; set; }
        /// <summary>
        /// Gets or sets the value of CloseButtonColor. Using this property, you can change the color of the close button in chip.
        /// </summary>
        /// <value>
        /// Specifies the close button color. The default value is Color.FromArgb("#1C1B1F").
        /// </value>
        [Parameter] public Color CloseButtonColor { get; set; }
        /// <summary>
        /// Gets or sets the value of DisplayMemberPath, which is the member path value of the display text in the chip.
        /// </summary>
        /// <value>
        /// Specifies the display member path. The default value is string.Empty.
        /// </value>
        [Parameter] public string DisplayMemberPath { get; set; }
        /// <summary>
        /// Gets or sets the value of ImageMemberPath. It is the member path for the icon image of the chip in a chip group.
        /// </summary>
        /// <value>
        /// Specifies the image member path. The default value is string.Empty.
        /// </value>
        [Parameter] public string ImageMemberPath { get; set; }
        /// <summary>
        /// Gets or sets the value of the ItemHeight. This property can be used to customize the height of the chips in the group.
        /// </summary>
        /// <value>
        /// Specifies the height of the item. The default value is double.NaN.
        /// </value>
        [Parameter] public double? ItemHeight { get; set; }
        /// <summary>
        /// Gets or sets the value of ItemsSource. It is a collection of items to generate the chips in <see cref="T:Syncfusion.Maui.Toolkit.Chips.SfChipGroup" />.
        /// </summary>
        /// <value>
        /// The collection used to populate the items. The default is null.
        /// </value>
        [Parameter] public IList ItemsSource { get; set; }
        /// <summary>
        /// Gets or sets a color value that can be used to customize the background color of the selected chips in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the background color of the selected chips. The default value is SolidColorBrush(Color.FromArgb("#E8DEF8")).
        /// </value>
        [Parameter] public Color SelectedChipBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets a color value that can be used to customize the text color of the selected chips in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the text color of the selected chips. The default value is Color.FromArgb("#1D192B").
        /// </value>
        [Parameter] public Color SelectedChipTextColor { get; set; }
        /// <summary>
        /// Gets or sets the value of SelectedItem. This property can be used to select a particular item in the choice and fliter chip group.
        /// </summary>
        /// <value>
        /// Specifies the selected item. The default value is null.
        /// </value>
        [Parameter] public object SelectedItem { get; set; }
        /// <summary>
        /// Gets or sets the value of SelectionIndicatorColor. Using this property, you can change the color of the selection indicator in chip.
        /// </summary>
        /// <value>
        /// Specifies the selection indicator color. The default value is Color.FromArgb("#49454F").
        /// </value>
        [Parameter] public Color SelectionIndicatorColor { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether an icon is shown in chips. The icon is in the visible state when the ShowIcon property is true; otherwise, icons will be collapsed.
        /// </summary>
        /// <value>
        /// Specifies whether to show the icon. The default value is false.
        /// </value>
        [Parameter] public bool? ShowIcon { get; set; }
        /// <summary>
        /// Gets or sets the value of ChipBackgroundColor. This property can be used to change the background color of the chip in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip background color. The default value is SolidColorBrush(Colors.Transparent).
        /// </value>
        [Parameter] public RenderFragment ChipBackground { get; set; }
        /// <summary>
        /// Gets or sets the value of ChipLayout. This property can be used to add all the chips in a chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip layout. The default value is null.
        /// </value>
        [Parameter] public RenderFragment ChipLayout { get; set; }
        /// <summary>
        /// Gets or sets the value of the ChipStroke. This property can be used to change the border color of the chip in the chip group.
        /// </summary>
        /// <value>
        /// Specifies the chip stroke color. The default value is SolidColorBrush(Color.FromArgb("#79747E")).
        /// </value>
        [Parameter] public RenderFragment ChipStroke { get; set; }
        /// <summary>
        /// Gets or sets the value of InputView. This property can be used to set input view or editor in the input chip group.
        /// </summary>
        /// <value>
        /// Specifies the input view. The default value is null.
        /// </value>
        [Parameter] public RenderFragment InputView { get; set; }
        /// <summary>
        /// Gets or sets the value of the ChipCollection. This chip collection of <see cref="T:Syncfusion.Maui.Toolkit.Chips.SfChip" /> is used to generate the chips in <see cref="T:Syncfusion.Maui.Toolkit.Chips.SfChipGroup" />.
        /// </summary>
        /// <value>
        /// The collection used to populate the chip items. The default is null.
        /// </value>
        [Parameter] public RenderFragment ChildContent { get; set; }
        /// <summary>
        /// Gets or sets the value of ItemTemplate. This property can be used to set custom content for data item in the chip group control.
        /// </summary>
        /// <value>
        /// A DataTemplate object that is used to display the custom content. The default is null.
        /// </value>
        [Parameter] public RenderFragment ItemTemplate { get; set; }
        [Parameter] public EventCallback OnChipClicked { get; set; }
        [Parameter] public EventCallback<SMTC.SelectionChangingEventArgs> OnSelectionChanging { get; set; }
        [Parameter] public EventCallback<SMTC.SelectionChangedEventArgs> OnSelectionChanged { get; set; }
        [Parameter] public EventCallback<SMTC.SelectionChangedEventArgs> OnItemRemoved { get; set; }

        public new SMTC.SfChipGroup NativeControl => (SMTC.SfChipGroup)((BindableObject)this).NativeControl;

        protected override SMTC.SfChipGroup CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ChipBackgroundColor):
                    if (!Equals(ChipBackgroundColor, value))
                    {
                        ChipBackgroundColor = (Color)value;
                        NativeControl.ChipBackground = ChipBackgroundColor;
                    }
                    break;
                case nameof(ChipCornerRadius):
                    if (!Equals(ChipCornerRadius, value))
                    {
                        ChipCornerRadius = (CornerRadius?)value;
                        NativeControl.ChipCornerRadius = ChipCornerRadius ?? (CornerRadius)SMTC.SfChipGroup.ChipCornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(ChipFontAttributes):
                    if (!Equals(ChipFontAttributes, value))
                    {
                        ChipFontAttributes = (MC.FontAttributes?)value;
                        NativeControl.ChipFontAttributes = ChipFontAttributes ?? (MC.FontAttributes)SMTC.SfChipGroup.ChipFontAttributesProperty.DefaultValue;
                    }
                    break;
                case nameof(ChipFontFamily):
                    if (!Equals(ChipFontFamily, value))
                    {
                        ChipFontFamily = (string)value;
                        NativeControl.ChipFontFamily = ChipFontFamily;
                    }
                    break;
                case nameof(ChipImageSize):
                    if (!Equals(ChipImageSize, value))
                    {
                        ChipImageSize = (double?)value;
                        NativeControl.ChipImageSize = ChipImageSize ?? (double)SMTC.SfChipGroup.ChipImageSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(ChipPadding):
                    if (!Equals(ChipPadding, value))
                    {
                        ChipPadding = (Thickness?)value;
                        NativeControl.ChipPadding = ChipPadding ?? (Thickness)SMTC.SfChipGroup.ChipPaddingProperty.DefaultValue;
                    }
                    break;
                case nameof(ChipStrokeColor):
                    if (!Equals(ChipStrokeColor, value))
                    {
                        ChipStrokeColor = (Color)value;
                        NativeControl.ChipStroke = ChipStrokeColor;
                    }
                    break;
                case nameof(ChipStrokeThickness):
                    if (!Equals(ChipStrokeThickness, value))
                    {
                        ChipStrokeThickness = (double?)value;
                        NativeControl.ChipStrokeThickness = ChipStrokeThickness ?? (double)SMTC.SfChipGroup.ChipStrokeThicknessProperty.DefaultValue;
                    }
                    break;
                case nameof(ChipTextColor):
                    if (!Equals(ChipTextColor, value))
                    {
                        ChipTextColor = (Color)value;
                        NativeControl.ChipTextColor = ChipTextColor;
                    }
                    break;
                case nameof(ChipTextSize):
                    if (!Equals(ChipTextSize, value))
                    {
                        ChipTextSize = (double?)value;
                        NativeControl.ChipTextSize = ChipTextSize ?? (double)SMTC.SfChipGroup.ChipTextSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(ChipType):
                    if (!Equals(ChipType, value))
                    {
                        ChipType = (SMTC.SfChipsType?)value;
                        NativeControl.ChipType = ChipType ?? (SMTC.SfChipsType)SMTC.SfChipGroup.ChipTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(ChoiceMode):
                    if (!Equals(ChoiceMode, value))
                    {
                        ChoiceMode = (SMTC.ChoiceMode?)value;
                        NativeControl.ChoiceMode = ChoiceMode ?? (SMTC.ChoiceMode)SMTC.SfChipGroup.ChoiceModeProperty.DefaultValue;
                    }
                    break;
                case nameof(CloseButtonColor):
                    if (!Equals(CloseButtonColor, value))
                    {
                        CloseButtonColor = (Color)value;
                        NativeControl.CloseButtonColor = CloseButtonColor;
                    }
                    break;
                case nameof(DisplayMemberPath):
                    if (!Equals(DisplayMemberPath, value))
                    {
                        DisplayMemberPath = (string)value;
                        NativeControl.DisplayMemberPath = DisplayMemberPath;
                    }
                    break;
                case nameof(ImageMemberPath):
                    if (!Equals(ImageMemberPath, value))
                    {
                        ImageMemberPath = (string)value;
                        NativeControl.ImageMemberPath = ImageMemberPath;
                    }
                    break;
                case nameof(ItemHeight):
                    if (!Equals(ItemHeight, value))
                    {
                        ItemHeight = (double?)value;
                        NativeControl.ItemHeight = ItemHeight ?? (double)SMTC.SfChipGroup.ItemHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(ItemsSource):
                    if (!Equals(ItemsSource, value))
                    {
                        ItemsSource = (IList)value;
                        NativeControl.ItemsSource = ItemsSource;
                    }
                    break;
                case nameof(SelectedChipBackgroundColor):
                    if (!Equals(SelectedChipBackgroundColor, value))
                    {
                        SelectedChipBackgroundColor = (Color)value;
                        NativeControl.SelectedChipBackground = SelectedChipBackgroundColor;
                    }
                    break;
                case nameof(SelectedChipTextColor):
                    if (!Equals(SelectedChipTextColor, value))
                    {
                        SelectedChipTextColor = (Color)value;
                        NativeControl.SelectedChipTextColor = SelectedChipTextColor;
                    }
                    break;
                case nameof(SelectedItem):
                    if (!Equals(SelectedItem, value))
                    {
                        SelectedItem = (object)value;
                        NativeControl.SelectedItem = SelectedItem;
                    }
                    break;
                case nameof(SelectionIndicatorColor):
                    if (!Equals(SelectionIndicatorColor, value))
                    {
                        SelectionIndicatorColor = (Color)value;
                        NativeControl.SelectionIndicatorColor = SelectionIndicatorColor;
                    }
                    break;
                case nameof(ShowIcon):
                    if (!Equals(ShowIcon, value))
                    {
                        ShowIcon = (bool?)value;
                        NativeControl.ShowIcon = ShowIcon ?? (bool)SMTC.SfChipGroup.ShowIconProperty.DefaultValue;
                    }
                    break;
                case nameof(ChipBackground):
                    ChipBackground = (RenderFragment)value;
                    break;
                case nameof(ChipLayout):
                    ChipLayout = (RenderFragment)value;
                    break;
                case nameof(ChipStroke):
                    ChipStroke = (RenderFragment)value;
                    break;
                case nameof(InputView):
                    InputView = (RenderFragment)value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;
                case nameof(ItemTemplate):
                    ItemTemplate = (RenderFragment)value;
                    break;
                case nameof(OnChipClicked):
                    if (!Equals(OnChipClicked, value))
                    {
                        void NativeControlChipClicked(object sender, EventArgs e) => InvokeEventCallback(OnChipClicked);

                        OnChipClicked = (EventCallback)value;
                        NativeControl.ChipClicked -= NativeControlChipClicked;
                        NativeControl.ChipClicked += NativeControlChipClicked;
                    }
                    break;
                case nameof(OnSelectionChanging):
                    if (!Equals(OnSelectionChanging, value))
                    {
                        void NativeControlSelectionChanging(object sender, SMTC.SelectionChangingEventArgs e) => InvokeEventCallback(OnSelectionChanging, e);

                        OnSelectionChanging = (EventCallback<SMTC.SelectionChangingEventArgs>)value;
                        NativeControl.SelectionChanging -= NativeControlSelectionChanging;
                        NativeControl.SelectionChanging += NativeControlSelectionChanging;
                    }
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, SMTC.SelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<SMTC.SelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;
                case nameof(OnItemRemoved):
                    if (!Equals(OnItemRemoved, value))
                    {
                        void NativeControlItemRemoved(object sender, SMTC.SelectionChangedEventArgs e) => InvokeEventCallback(OnItemRemoved, e);

                        OnItemRemoved = (EventCallback<SMTC.SelectionChangedEventArgs>)value;
                        NativeControl.ItemRemoved -= NativeControlItemRemoved;
                        NativeControl.ItemRemoved += NativeControlItemRemoved;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfChipGroup>(builder, sequence++, ChipBackground, (x, value) => x.ChipBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfChipGroup>(builder, sequence++, ChipLayout, (x, value) => x.ChipLayout = (MC.Layout)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfChipGroup>(builder, sequence++, ChipStroke, (x, value) => x.ChipStroke = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfChipGroup>(builder, sequence++, InputView, (x, value) => x.InputView = (MC.View)value);
            RenderTreeBuilderHelper.AddListContentProperty<SMTC.SfChipGroup, SMTC.SfChip>(builder, sequence++, ChildContent, x => x.Items);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.SfChipGroup>(builder, sequence++, ItemTemplate, (x, template) => x.ItemTemplate = template);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
