// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Graphics;
using SMTC = Syncfusion.Maui.Toolkit.Chips;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Chips
{
    /// <summary>
    /// Represents a Chip control which can be added in a layout and grouped using SfChipGroup. Represents the <see cref="T:Syncfusion.Maui.Toolkit.Chips.SfChip" /> class.
    /// </summary>
    public partial class SfChip : BlazorBindings.Maui.Elements.Syncfusion.Toolkit.ButtonBase
    {
        static SfChip()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the value that can be used to change the color of the close button.
        /// </summary>
        /// <value>
        /// It accepts <see cref="T:Microsoft.Maui.Graphics.Color" /> values and the default value is Color.FromArgb("#1C1B1F").
        /// </value>
        [Parameter] public Color CloseButtonColor { get; set; }
        /// <summary>
        /// Gets or sets the value of CloseButtonPath. This property can be used to customize the close button.
        /// </summary>
        /// <value>
        /// Specifies the close button path. The default value is <see cref="F:System.String.Empty" />.
        /// </value>
        [Parameter] public string CloseButtonPath { get; set; }
        /// <summary>
        /// Gets or sets the value of SelectionIndicatorColor. This property can be used to change the color of the selection indicator.
        /// </summary>
        /// <value>
        /// Specifies the selection indicator color. The default value is Color.FromArgb("#49454F").
        /// </value>
        [Parameter] public Color SelectionIndicatorColor { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the close button is visible or not. The close button is in a visible state when this property is set to true.
        /// </summary>
        /// <value>
        /// Specifies the show close button property. The default value is false.
        /// </value>
        [Parameter] public bool? ShowCloseButton { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the selection indicator is visible or not. The selection indicator is in a visible state when this property is set to true.
        /// </summary>
        /// <value>
        /// Specifies the show selection indicator property. The default value is false.
        /// </value>
        [Parameter] public bool? ShowSelectionIndicator { get; set; }
        /// <summary>
        /// Occurs when the close button is clicked/tapped.
        /// </summary>
        [Parameter] public EventCallback OnCloseButtonClicked { get; set; }

        public new SMTC.SfChip NativeControl => (SMTC.SfChip)((BindableObject)this).NativeControl;

        protected override SMTC.SfChip CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CloseButtonColor):
                    if (!Equals(CloseButtonColor, value))
                    {
                        CloseButtonColor = (Color)value;
                        NativeControl.CloseButtonColor = CloseButtonColor;
                    }
                    break;
                case nameof(CloseButtonPath):
                    if (!Equals(CloseButtonPath, value))
                    {
                        CloseButtonPath = (string)value;
                        NativeControl.CloseButtonPath = CloseButtonPath;
                    }
                    break;
                case nameof(SelectionIndicatorColor):
                    if (!Equals(SelectionIndicatorColor, value))
                    {
                        SelectionIndicatorColor = (Color)value;
                        NativeControl.SelectionIndicatorColor = SelectionIndicatorColor;
                    }
                    break;
                case nameof(ShowCloseButton):
                    if (!Equals(ShowCloseButton, value))
                    {
                        ShowCloseButton = (bool?)value;
                        NativeControl.ShowCloseButton = ShowCloseButton ?? (bool)SMTC.SfChip.ShowCloseButtonProperty.DefaultValue;
                    }
                    break;
                case nameof(ShowSelectionIndicator):
                    if (!Equals(ShowSelectionIndicator, value))
                    {
                        ShowSelectionIndicator = (bool?)value;
                        NativeControl.ShowSelectionIndicator = ShowSelectionIndicator ?? (bool)SMTC.SfChip.ShowSelectionIndicatorProperty.DefaultValue;
                    }
                    break;
                case nameof(OnCloseButtonClicked):
                    if (!Equals(OnCloseButtonClicked, value))
                    {
                        void NativeControlCloseButtonClicked(object sender, EventArgs e) => InvokeEventCallback(OnCloseButtonClicked);

                        OnCloseButtonClicked = (EventCallback)value;
                        NativeControl.CloseButtonClicked -= NativeControlCloseButtonClicked;
                        NativeControl.CloseButtonClicked += NativeControlCloseButtonClicked;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
