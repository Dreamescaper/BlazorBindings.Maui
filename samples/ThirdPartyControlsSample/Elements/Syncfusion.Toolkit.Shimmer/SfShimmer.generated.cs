// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using SMTS = Syncfusion.Maui.Toolkit.Shimmer;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Shimmer
{
    /// <summary>
    /// Represents a loading indicator control that provides modern animations when data is being loaded.
    /// </summary>
    public partial class SfShimmer : BlazorBindings.Maui.Elements.Syncfusion.Toolkit.SfContentView
    {
        static SfShimmer()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the duration of the wave animation in milliseconds.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.AnimationDuration" /> is 1000 milliseconds.
        /// </value>
        [Parameter] public double? AnimationDuration { get; set; }
        /// <summary>
        /// Gets or sets the background color of the shimmer view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.Fill" /> is "#F3EDF6".
        /// </value>
        [Parameter] public Color FillColor { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to load the actual content of the <see cref="T:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer" />.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.IsActive" /> is true.
        /// </value>
        [Parameter] public bool? IsActive { get; set; }
        /// <summary>
        /// Gets or sets the number of times the built-in view should be repeated.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.RepeatCount" /> is 1.
        /// </value>
        [Parameter] public int? RepeatCount { get; set; }
        /// <summary>
        /// Gets or sets the built-in shimmer view type.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.Type" /> is <see cref="F:Syncfusion.Maui.Toolkit.Shimmer.ShimmerType.CirclePersona" />.
        /// </value>
        [Parameter] public SMTS.ShimmerType? Type { get; set; }
        /// <summary>
        /// Gets or sets the shimmer wave color.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.WaveColor" /> is "#FFFBFE".
        /// </value>
        [Parameter] public Color WaveColor { get; set; }
        /// <summary>
        /// Gets or sets the animation direction for Shimmer.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.WaveDirection" /> is <see cref="F:Syncfusion.Maui.Toolkit.Shimmer.ShimmerWaveDirection.Default" />.
        /// </value>
        [Parameter] public SMTS.ShimmerWaveDirection? WaveDirection { get; set; }
        /// <summary>
        /// Gets or sets the width of the wave.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.WaveWidth" /> is 200.
        /// </value>
        [Parameter] public double? WaveWidth { get; set; }
        /// <summary>
        /// Gets or sets the custom view that is used for the loading view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.CustomView" /> is null.
        /// </value>
        [Parameter] public RenderFragment CustomView { get; set; }
        /// <summary>
        /// Gets or sets the background color of the shimmer view.
        /// </summary>
        /// <value>
        /// The default value of <see cref="P:Syncfusion.Maui.Toolkit.Shimmer.SfShimmer.Fill" /> is "#F3EDF6".
        /// </value>
        [Parameter] public RenderFragment Fill { get; set; }

        public new SMTS.SfShimmer NativeControl => (SMTS.SfShimmer)((BindableObject)this).NativeControl;

        protected override SMTS.SfShimmer CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AnimationDuration):
                    if (!Equals(AnimationDuration, value))
                    {
                        AnimationDuration = (double?)value;
                        NativeControl.AnimationDuration = AnimationDuration ?? (double)SMTS.SfShimmer.AnimationDurationProperty.DefaultValue;
                    }
                    break;
                case nameof(FillColor):
                    if (!Equals(FillColor, value))
                    {
                        FillColor = (Color)value;
                        NativeControl.Fill = FillColor;
                    }
                    break;
                case nameof(IsActive):
                    if (!Equals(IsActive, value))
                    {
                        IsActive = (bool?)value;
                        NativeControl.IsActive = IsActive ?? (bool)SMTS.SfShimmer.IsActiveProperty.DefaultValue;
                    }
                    break;
                case nameof(RepeatCount):
                    if (!Equals(RepeatCount, value))
                    {
                        RepeatCount = (int?)value;
                        NativeControl.RepeatCount = RepeatCount ?? (int)SMTS.SfShimmer.RepeatCountProperty.DefaultValue;
                    }
                    break;
                case nameof(Type):
                    if (!Equals(Type, value))
                    {
                        Type = (SMTS.ShimmerType?)value;
                        NativeControl.Type = Type ?? (SMTS.ShimmerType)SMTS.SfShimmer.TypeProperty.DefaultValue;
                    }
                    break;
                case nameof(WaveColor):
                    if (!Equals(WaveColor, value))
                    {
                        WaveColor = (Color)value;
                        NativeControl.WaveColor = WaveColor;
                    }
                    break;
                case nameof(WaveDirection):
                    if (!Equals(WaveDirection, value))
                    {
                        WaveDirection = (SMTS.ShimmerWaveDirection?)value;
                        NativeControl.WaveDirection = WaveDirection ?? (SMTS.ShimmerWaveDirection)SMTS.SfShimmer.WaveDirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(WaveWidth):
                    if (!Equals(WaveWidth, value))
                    {
                        WaveWidth = (double?)value;
                        NativeControl.WaveWidth = WaveWidth ?? (double)SMTS.SfShimmer.WaveWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(CustomView):
                    CustomView = (RenderFragment)value;
                    break;
                case nameof(Fill):
                    Fill = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfShimmer>(builder, sequence++, CustomView, (x, value) => x.CustomView = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTS.SfShimmer>(builder, sequence++, Fill, (x, value) => x.Fill = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
