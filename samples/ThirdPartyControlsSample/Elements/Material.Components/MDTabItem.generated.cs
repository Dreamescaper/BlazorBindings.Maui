// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class MDTabItem : SKTouchCanvasView
    {
        static MDTabItem()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public Color ActiveIndicatorColor { get; set; }
        [Parameter] public float? ActiveIndicatorOpacity { get; set; }
        [Parameter] public MCM.Tokens.Shape? ActiveIndicatorShape { get; set; }
        [Parameter] public Color BackgroundColour { get; set; }
        [Parameter] public string FontFamily { get; set; }
        [Parameter] public bool? FontItalic { get; set; }
        [Parameter] public float? FontSize { get; set; }
        [Parameter] public int? FontWeight { get; set; }
        [Parameter] public Color ForegroundColor { get; set; }
        [Parameter] public bool? HasIcon { get; set; }
        [Parameter] public bool? HasLabel { get; set; }
        [Parameter] public string IconData { get; set; }
        [Parameter] public global::IconPacks.Material.IconKind? IconKind { get; set; }
        [Parameter] public global::SkiaSharp.SKPicture IconSource { get; set; }
        [Parameter] public bool? IsActived { get; set; }
        [Parameter] public Color RippleColor { get; set; }
        [Parameter] public Color StateLayerColor { get; set; }
        [Parameter] public string Text { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }

        public new MCM.TabItem NativeControl => (MCM.TabItem)((BindableObject)this).NativeControl;

        protected override MCM.TabItem CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ActiveIndicatorColor):
                    if (!Equals(ActiveIndicatorColor, value))
                    {
                        ActiveIndicatorColor = (Color)value;
                        NativeControl.ActiveIndicatorColor = ActiveIndicatorColor;
                    }
                    break;
                case nameof(ActiveIndicatorOpacity):
                    if (!Equals(ActiveIndicatorOpacity, value))
                    {
                        ActiveIndicatorOpacity = (float?)value;
                        NativeControl.ActiveIndicatorOpacity = ActiveIndicatorOpacity ?? (float)MCM.TabItem.ActiveIndicatorOpacityProperty.DefaultValue;
                    }
                    break;
                case nameof(ActiveIndicatorShape):
                    if (!Equals(ActiveIndicatorShape, value))
                    {
                        ActiveIndicatorShape = (MCM.Tokens.Shape?)value;
                        NativeControl.ActiveIndicatorShape = ActiveIndicatorShape ?? (MCM.Tokens.Shape)MCM.TabItem.ActiveIndicatorShapeProperty.DefaultValue;
                    }
                    break;
                case nameof(BackgroundColour):
                    if (!Equals(BackgroundColour, value))
                    {
                        BackgroundColour = (Color)value;
                        NativeControl.BackgroundColour = BackgroundColour;
                    }
                    break;
                case nameof(FontFamily):
                    if (!Equals(FontFamily, value))
                    {
                        FontFamily = (string)value;
                        NativeControl.FontFamily = FontFamily;
                    }
                    break;
                case nameof(FontItalic):
                    if (!Equals(FontItalic, value))
                    {
                        FontItalic = (bool?)value;
                        NativeControl.FontItalic = FontItalic ?? (bool)MCM.TabItem.FontItalicProperty.DefaultValue;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (float?)value;
                        NativeControl.FontSize = FontSize ?? (float)MCM.TabItem.FontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(FontWeight):
                    if (!Equals(FontWeight, value))
                    {
                        FontWeight = (int?)value;
                        NativeControl.FontWeight = FontWeight ?? (int)MCM.TabItem.FontWeightProperty.DefaultValue;
                    }
                    break;
                case nameof(ForegroundColor):
                    if (!Equals(ForegroundColor, value))
                    {
                        ForegroundColor = (Color)value;
                        NativeControl.ForegroundColor = ForegroundColor;
                    }
                    break;
                case nameof(HasIcon):
                    if (!Equals(HasIcon, value))
                    {
                        HasIcon = (bool?)value;
                        NativeControl.HasIcon = HasIcon ?? (bool)MCM.TabItem.HasIconProperty.DefaultValue;
                    }
                    break;
                case nameof(HasLabel):
                    if (!Equals(HasLabel, value))
                    {
                        HasLabel = (bool?)value;
                        NativeControl.HasLabel = HasLabel ?? (bool)MCM.TabItem.HasLabelProperty.DefaultValue;
                    }
                    break;
                case nameof(IconData):
                    if (!Equals(IconData, value))
                    {
                        IconData = (string)value;
                        NativeControl.IconData = IconData;
                    }
                    break;
                case nameof(IconKind):
                    if (!Equals(IconKind, value))
                    {
                        IconKind = (global::IconPacks.Material.IconKind?)value;
                        NativeControl.IconKind = IconKind ?? (global::IconPacks.Material.IconKind)MCM.TabItem.IconKindProperty.DefaultValue;
                    }
                    break;
                case nameof(IconSource):
                    if (!Equals(IconSource, value))
                    {
                        IconSource = (global::SkiaSharp.SKPicture)value;
                        NativeControl.IconSource = IconSource;
                    }
                    break;
                case nameof(IsActived):
                    if (!Equals(IsActived, value))
                    {
                        IsActived = (bool?)value;
                        NativeControl.IsActived = IsActived ?? (bool)MCM.TabItem.IsActivedProperty.DefaultValue;
                    }
                    break;
                case nameof(RippleColor):
                    if (!Equals(RippleColor, value))
                    {
                        RippleColor = (Color)value;
                        NativeControl.RippleColor = RippleColor;
                    }
                    break;
                case nameof(StateLayerColor):
                    if (!Equals(StateLayerColor, value))
                    {
                        StateLayerColor = (Color)value;
                        NativeControl.StateLayerColor = StateLayerColor;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<MCM.TabItem>(builder, sequence++, ChildContent, (x, value) => x.Content = (MC.View)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
