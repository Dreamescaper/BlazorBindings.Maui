// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class MDWrapLayout : BlazorBindings.Maui.Elements.Layout
    {
        static MDWrapLayout()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public double? HorizontalSpacing { get; set; }
        [Parameter] public MC.StackOrientation? Orientation { get; set; }
        [Parameter] public double? Spacing { get; set; }
        [Parameter] public double? VerticalSpacing { get; set; }

        public new MCM.WrapLayout NativeControl => (MCM.WrapLayout)((BindableObject)this).NativeControl;

        protected override MCM.WrapLayout CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(HorizontalSpacing):
                    if (!Equals(HorizontalSpacing, value))
                    {
                        HorizontalSpacing = (double?)value;
                        NativeControl.HorizontalSpacing = HorizontalSpacing ?? (double)MCM.WrapLayout.HorizontalSpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(Orientation):
                    if (!Equals(Orientation, value))
                    {
                        Orientation = (MC.StackOrientation?)value;
                        NativeControl.Orientation = Orientation ?? (MC.StackOrientation)MCM.WrapLayout.OrientationProperty.DefaultValue;
                    }
                    break;
                case nameof(Spacing):
                    if (!Equals(Spacing, value))
                    {
                        Spacing = (double?)value;
                        NativeControl.Spacing = Spacing ?? (double)MCM.WrapLayout.SpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalSpacing):
                    if (!Equals(VerticalSpacing, value))
                    {
                        VerticalSpacing = (double?)value;
                        NativeControl.VerticalSpacing = VerticalSpacing ?? (double)MCM.WrapLayout.VerticalSpacingProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
