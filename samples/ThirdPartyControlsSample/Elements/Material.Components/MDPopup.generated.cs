// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class MDPopup : BlazorBindings.Maui.Elements.Element
    {
        static MDPopup()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public bool? DismissOnOutside { get; set; }
        [Parameter] public MC.LayoutAlignment? HorizontalOptions { get; set; }
        [Parameter] public int? OffsetX { get; set; }
        [Parameter] public int? OffsetY { get; set; }
        [Parameter] public MC.LayoutAlignment? VerticalOptions { get; set; }
        /// <remarks>
        /// Accepts single View element.
        /// </remarks>
        [Parameter] public RenderFragment ChildContent { get; set; }

        public new MCM.Popup NativeControl => (MCM.Popup)((BindableObject)this).NativeControl;

        protected override MCM.Popup CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(DismissOnOutside):
                    if (!Equals(DismissOnOutside, value))
                    {
                        DismissOnOutside = (bool?)value;
                        NativeControl.DismissOnOutside = DismissOnOutside ?? (bool)MCM.Popup.DismissOnOutsideProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalOptions):
                    if (!Equals(HorizontalOptions, value))
                    {
                        HorizontalOptions = (MC.LayoutAlignment?)value;
                        NativeControl.HorizontalOptions = HorizontalOptions ?? (MC.LayoutAlignment)MCM.Popup.HorizontalOptionsProperty.DefaultValue;
                    }
                    break;
                case nameof(OffsetX):
                    if (!Equals(OffsetX, value))
                    {
                        OffsetX = (int?)value;
                        NativeControl.OffsetX = OffsetX ?? (int)MCM.Popup.OffsetXProperty.DefaultValue;
                    }
                    break;
                case nameof(OffsetY):
                    if (!Equals(OffsetY, value))
                    {
                        OffsetY = (int?)value;
                        NativeControl.OffsetY = OffsetY ?? (int)MCM.Popup.OffsetYProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalOptions):
                    if (!Equals(VerticalOptions, value))
                    {
                        VerticalOptions = (MC.LayoutAlignment?)value;
                        NativeControl.VerticalOptions = VerticalOptions ?? (MC.LayoutAlignment)MCM.Popup.VerticalOptionsProperty.DefaultValue;
                    }
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<MCM.Popup>(builder, sequence++, ChildContent, (x, value) => x.Content = (MC.View)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
