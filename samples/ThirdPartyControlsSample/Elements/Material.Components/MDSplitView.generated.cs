// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class MDSplitView : BlazorBindings.Maui.Elements.View
    {
        static MDSplitView()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public MCM.DrawerDisplayMode? DisplayMode { get; set; }
        [Parameter] public bool? IsPaneOpen { get; set; }
        [Parameter] public RenderFragment Content { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }

        public new MCM.SplitView NativeControl => (MCM.SplitView)((BindableObject)this).NativeControl;

        protected override MCM.SplitView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(DisplayMode):
                    if (!Equals(DisplayMode, value))
                    {
                        DisplayMode = (MCM.DrawerDisplayMode?)value;
                        NativeControl.DisplayMode = DisplayMode ?? (MCM.DrawerDisplayMode)MCM.SplitView.DisplayModeProperty.DefaultValue;
                    }
                    break;
                case nameof(IsPaneOpen):
                    if (!Equals(IsPaneOpen, value))
                    {
                        IsPaneOpen = (bool?)value;
                        NativeControl.IsPaneOpen = IsPaneOpen ?? (bool)MCM.SplitView.IsPaneOpenProperty.DefaultValue;
                    }
                    break;
                case nameof(Content):
                    Content = (RenderFragment)value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<MCM.SplitView>(builder, sequence++, Content, (x, value) => x.Content = (MC.View)value);
            RenderTreeBuilderHelper.AddContentProperty<MCM.SplitView>(builder, sequence++, ChildContent, (x, value) => x.Pane = (MC.View)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
