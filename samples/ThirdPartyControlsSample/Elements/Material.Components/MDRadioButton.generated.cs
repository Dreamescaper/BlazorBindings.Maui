// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class MDRadioButton : MDWrapLayout
    {
        static MDRadioButton()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public int? SelectedIndex { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public EventCallback<int> SelectedIndexChanged { get; set; }

        public new MCM.RadioButton NativeControl => (MCM.RadioButton)((BindableObject)this).NativeControl;

        protected override MCM.RadioButton CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(SelectedIndex):
                    if (!Equals(SelectedIndex, value))
                    {
                        SelectedIndex = (int?)value;
                        NativeControl.SelectedIndex = SelectedIndex ?? (int)MCM.RadioButton.SelectedIndexProperty.DefaultValue;
                    }
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;
                case nameof(SelectedIndexChanged):
                    if (!Equals(SelectedIndexChanged, value))
                    {
                        void NativeControlSelectedIndexChanged(object sender, MCM.Core.SelectedIndexChangedEventArgs e)
                        {
                            var value = NativeControl.SelectedIndex;
                            SelectedIndex = value;
                            InvokeEventCallback(SelectedIndexChanged, value);
                        }

                        SelectedIndexChanged = (EventCallback<int>)value;
                        NativeControl.SelectedIndexChanged -= NativeControlSelectedIndexChanged;
                        NativeControl.SelectedIndexChanged += NativeControlSelectedIndexChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddListContentProperty<MCM.RadioButton, MCM.RadioButtonItem>(builder, sequence++, ChildContent, x => x.Items);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
