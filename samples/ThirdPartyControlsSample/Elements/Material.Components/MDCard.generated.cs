// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class MDCard : BlazorBindings.Maui.Elements.ContentView
    {
        static MDCard()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public Color BackgroundColour { get; set; }
        [Parameter] public MCM.Tokens.Elevation? Elevation { get; set; }
        [Parameter] public bool? EnableTouchEvents { get; set; }
        [Parameter] public Color OutlineColor { get; set; }
        [Parameter] public int? OutlineWidth { get; set; }
        [Parameter] public Color RippleColor { get; set; }
        [Parameter] public MCM.Tokens.Shape? Shape { get; set; }
        [Parameter] public Color StateLayerColor { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs> OnPress { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs> OnMoved { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs> OnRelease { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs> OnLongPressed { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs> OnClick { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs> OnEntered { get; set; }
        [Parameter] public EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs> OnExited { get; set; }

        public new MCM.Card NativeControl => (MCM.Card)((BindableObject)this).NativeControl;

        protected override MCM.Card CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundColour):
                    if (!Equals(BackgroundColour, value))
                    {
                        BackgroundColour = (Color)value;
                        NativeControl.BackgroundColour = BackgroundColour;
                    }
                    break;
                case nameof(Elevation):
                    if (!Equals(Elevation, value))
                    {
                        Elevation = (MCM.Tokens.Elevation?)value;
                        NativeControl.Elevation = Elevation ?? (MCM.Tokens.Elevation)MCM.Card.ElevationProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableTouchEvents):
                    if (!Equals(EnableTouchEvents, value))
                    {
                        EnableTouchEvents = (bool?)value;
                        NativeControl.EnableTouchEvents = EnableTouchEvents ?? (bool)MCM.Card.EnableTouchEventsProperty.DefaultValue;
                    }
                    break;
                case nameof(OutlineColor):
                    if (!Equals(OutlineColor, value))
                    {
                        OutlineColor = (Color)value;
                        NativeControl.OutlineColor = OutlineColor;
                    }
                    break;
                case nameof(OutlineWidth):
                    if (!Equals(OutlineWidth, value))
                    {
                        OutlineWidth = (int?)value;
                        NativeControl.OutlineWidth = OutlineWidth ?? (int)MCM.Card.OutlineWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(RippleColor):
                    if (!Equals(RippleColor, value))
                    {
                        RippleColor = (Color)value;
                        NativeControl.RippleColor = RippleColor;
                    }
                    break;
                case nameof(Shape):
                    if (!Equals(Shape, value))
                    {
                        Shape = (MCM.Tokens.Shape?)value;
                        NativeControl.Shape = Shape ?? (MCM.Tokens.Shape)MCM.Card.ShapeProperty.DefaultValue;
                    }
                    break;
                case nameof(StateLayerColor):
                    if (!Equals(StateLayerColor, value))
                    {
                        StateLayerColor = (Color)value;
                        NativeControl.StateLayerColor = StateLayerColor;
                    }
                    break;
                case nameof(OnPress):
                    if (!Equals(OnPress, value))
                    {
                        void NativeControlPressed(object sender, global::SkiaSharp.Views.Maui.SKTouchEventArgs e) => InvokeEventCallback(OnPress, e);

                        OnPress = (EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs>)value;
                        NativeControl.Pressed -= NativeControlPressed;
                        NativeControl.Pressed += NativeControlPressed;
                    }
                    break;
                case nameof(OnMoved):
                    if (!Equals(OnMoved, value))
                    {
                        void NativeControlMoved(object sender, global::SkiaSharp.Views.Maui.SKTouchEventArgs e) => InvokeEventCallback(OnMoved, e);

                        OnMoved = (EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs>)value;
                        NativeControl.Moved -= NativeControlMoved;
                        NativeControl.Moved += NativeControlMoved;
                    }
                    break;
                case nameof(OnRelease):
                    if (!Equals(OnRelease, value))
                    {
                        void NativeControlReleased(object sender, global::SkiaSharp.Views.Maui.SKTouchEventArgs e) => InvokeEventCallback(OnRelease, e);

                        OnRelease = (EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs>)value;
                        NativeControl.Released -= NativeControlReleased;
                        NativeControl.Released += NativeControlReleased;
                    }
                    break;
                case nameof(OnLongPressed):
                    if (!Equals(OnLongPressed, value))
                    {
                        void NativeControlLongPressed(object sender, global::SkiaSharp.Views.Maui.SKTouchEventArgs e) => InvokeEventCallback(OnLongPressed, e);

                        OnLongPressed = (EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs>)value;
                        NativeControl.LongPressed -= NativeControlLongPressed;
                        NativeControl.LongPressed += NativeControlLongPressed;
                    }
                    break;
                case nameof(OnClick):
                    if (!Equals(OnClick, value))
                    {
                        void NativeControlClicked(object sender, global::SkiaSharp.Views.Maui.SKTouchEventArgs e) => InvokeEventCallback(OnClick, e);

                        OnClick = (EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs>)value;
                        NativeControl.Clicked -= NativeControlClicked;
                        NativeControl.Clicked += NativeControlClicked;
                    }
                    break;
                case nameof(OnEntered):
                    if (!Equals(OnEntered, value))
                    {
                        void NativeControlEntered(object sender, global::SkiaSharp.Views.Maui.SKTouchEventArgs e) => InvokeEventCallback(OnEntered, e);

                        OnEntered = (EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs>)value;
                        NativeControl.Entered -= NativeControlEntered;
                        NativeControl.Entered += NativeControlEntered;
                    }
                    break;
                case nameof(OnExited):
                    if (!Equals(OnExited, value))
                    {
                        void NativeControlExited(object sender, global::SkiaSharp.Views.Maui.SKTouchEventArgs e) => InvokeEventCallback(OnExited, e);

                        OnExited = (EventCallback<global::SkiaSharp.Views.Maui.SKTouchEventArgs>)value;
                        NativeControl.Exited -= NativeControlExited;
                        NativeControl.Exited += NativeControlExited;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
