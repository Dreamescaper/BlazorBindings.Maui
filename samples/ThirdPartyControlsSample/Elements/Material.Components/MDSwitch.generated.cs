// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Material.Components.Maui;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

#pragma warning disable CA2252

namespace BlazorBindings.Maui.Elements.Material.Components
{
    public partial class MDSwitch : SKTouchCanvasView
    {
        static MDSwitch()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public MCM.ControlState? ControlState { get; set; }
        [Parameter] public bool? HasIcon { get; set; }
        [Parameter] public Color IconColor { get; set; }
        [Parameter] public float? IconOpacity { get; set; }
        [Parameter] public bool? IsChecked { get; set; }
        [Parameter] public Color OutlineColor { get; set; }
        [Parameter] public int? OutlineWidth { get; set; }
        [Parameter] public Color RippleColor { get; set; }
        [Parameter] public MCM.Tokens.Shape? Shape { get; set; }
        [Parameter] public Color StateLayerColor { get; set; }
        [Parameter] public Color ThumbColor { get; set; }
        [Parameter] public float? ThumbOpacity { get; set; }
        [Parameter] public Color TrackColor { get; set; }
        [Parameter] public float? TrackOpacity { get; set; }
        [Parameter] public EventCallback<bool> IsCheckedChanged { get; set; }

        public new MCM.Switch NativeControl => (MCM.Switch)((BindableObject)this).NativeControl;

        protected override MCM.Switch CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ControlState):
                    if (!Equals(ControlState, value))
                    {
                        ControlState = (MCM.ControlState?)value;
                        NativeControl.ControlState = ControlState ?? default;
                    }
                    break;
                case nameof(HasIcon):
                    if (!Equals(HasIcon, value))
                    {
                        HasIcon = (bool?)value;
                        NativeControl.HasIcon = HasIcon ?? (bool)MCM.Switch.HasIconProperty.DefaultValue;
                    }
                    break;
                case nameof(IconColor):
                    if (!Equals(IconColor, value))
                    {
                        IconColor = (Color)value;
                        NativeControl.IconColor = IconColor;
                    }
                    break;
                case nameof(IconOpacity):
                    if (!Equals(IconOpacity, value))
                    {
                        IconOpacity = (float?)value;
                        NativeControl.IconOpacity = IconOpacity ?? (float)MCM.Switch.IconOpacityProperty.DefaultValue;
                    }
                    break;
                case nameof(IsChecked):
                    if (!Equals(IsChecked, value))
                    {
                        IsChecked = (bool?)value;
                        NativeControl.IsChecked = IsChecked ?? (bool)MCM.Switch.IsCheckedProperty.DefaultValue;
                    }
                    break;
                case nameof(OutlineColor):
                    if (!Equals(OutlineColor, value))
                    {
                        OutlineColor = (Color)value;
                        NativeControl.OutlineColor = OutlineColor;
                    }
                    break;
                case nameof(OutlineWidth):
                    if (!Equals(OutlineWidth, value))
                    {
                        OutlineWidth = (int?)value;
                        NativeControl.OutlineWidth = OutlineWidth ?? (int)MCM.Switch.OutlineWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(RippleColor):
                    if (!Equals(RippleColor, value))
                    {
                        RippleColor = (Color)value;
                        NativeControl.RippleColor = RippleColor;
                    }
                    break;
                case nameof(Shape):
                    if (!Equals(Shape, value))
                    {
                        Shape = (MCM.Tokens.Shape?)value;
                        NativeControl.Shape = Shape ?? (MCM.Tokens.Shape)MCM.Switch.ShapeProperty.DefaultValue;
                    }
                    break;
                case nameof(StateLayerColor):
                    if (!Equals(StateLayerColor, value))
                    {
                        StateLayerColor = (Color)value;
                        NativeControl.StateLayerColor = StateLayerColor;
                    }
                    break;
                case nameof(ThumbColor):
                    if (!Equals(ThumbColor, value))
                    {
                        ThumbColor = (Color)value;
                        NativeControl.ThumbColor = ThumbColor;
                    }
                    break;
                case nameof(ThumbOpacity):
                    if (!Equals(ThumbOpacity, value))
                    {
                        ThumbOpacity = (float?)value;
                        NativeControl.ThumbOpacity = ThumbOpacity ?? (float)MCM.Switch.ThumbOpacityProperty.DefaultValue;
                    }
                    break;
                case nameof(TrackColor):
                    if (!Equals(TrackColor, value))
                    {
                        TrackColor = (Color)value;
                        NativeControl.TrackColor = TrackColor;
                    }
                    break;
                case nameof(TrackOpacity):
                    if (!Equals(TrackOpacity, value))
                    {
                        TrackOpacity = (float?)value;
                        NativeControl.TrackOpacity = TrackOpacity ?? (float)MCM.Switch.TrackOpacityProperty.DefaultValue;
                    }
                    break;
                case nameof(IsCheckedChanged):
                    if (!Equals(IsCheckedChanged, value))
                    {
                        void NativeControlCheckedChanged(object sender, MC.CheckedChangedEventArgs e)
                        {
                            var value = NativeControl.IsChecked;
                            IsChecked = value;
                            InvokeEventCallback(IsCheckedChanged, value);
                        }

                        IsCheckedChanged = (EventCallback<bool>)value;
                        NativeControl.CheckedChanged -= NativeControlCheckedChanged;
                        NativeControl.CheckedChanged += NativeControlCheckedChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
