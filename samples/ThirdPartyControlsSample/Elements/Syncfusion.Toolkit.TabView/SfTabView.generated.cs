// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using SMTT = Syncfusion.Maui.Toolkit.TabView;
using System.Collections;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.TabView
{
    /// <summary>
    /// Represents a tab view control that contains multiple items that share the same space on the screen.
    /// </summary>
    public partial class SfTabView : BlazorBindings.Maui.Elements.ContentView
    {
        static SfTabView()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that can be used to modify the duration of content transition in the tab view.
        /// </summary>
        /// <value>
        /// A double value that specifies the duration of the content transition. The default value is 100.
        /// </value>
        [Parameter] public double? ContentTransitionDuration { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether swiping is enabled in <see cref="T:Syncfusion.Maui.Toolkit.TabView.SfTabView" />.
        /// </summary>
        /// <value>
        /// A boolean value indicating whether swiping is enabled. The default value is false.
        /// </value>
        [Parameter] public bool? EnableSwiping { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether lazy loading is enabled during the initial load.
        /// </summary>
        /// <value>
        /// A boolean value indicating whether lazy loading is enabled. The default value is false.
        /// </value>
        [Parameter] public bool? EnableVirtualization { get; set; }
        /// <summary>
        /// Gets or sets a value that determines whether the font of the control should scale automatically according to the operating system settings.
        /// </summary>
        /// <value>
        /// A boolean value indicating whether font auto-scaling is enabled. The default value is false.
        /// </value>
        [Parameter] public bool? FontAutoScalingEnabled { get; set; }
        /// <summary>
        /// Gets or sets the display mode for the tab header, determining whether to show the image or text.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="T:Syncfusion.Maui.Toolkit.TabView.TabBarDisplayMode" /> values, and the default value is <see cref="F:Syncfusion.Maui.Toolkit.TabView.TabBarDisplayMode.Default" />.
        /// </value>
        [Parameter] public SMTT.TabBarDisplayMode? HeaderDisplayMode { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the horizontal text alignment in tab header.
        /// </summary>
        /// <value>
        /// It accepts the <see cref="P:Syncfusion.Maui.Toolkit.TabView.SfTabView.HeaderHorizontalTextAlignment" /> values, and the default value is <see cref="F:Microsoft.Maui.TextAlignment.Center" />.
        /// </value>
        [Parameter] public TextAlignment? HeaderHorizontalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets a brush that describes the selection indicator's background.
        /// </summary>
        /// <value>
        /// Specifies the background of the selection indicator. The default value is SolidColorBrush(Color.FromArgb("#6200EE")).
        /// </value>
        [Parameter] public Color IndicatorBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the corner radius of the selection indicator.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.CornerRadius" /> value that specifies the corner radius of the selection indicator. The default value is -1.
        /// </value>
        [Parameter] public CornerRadius? IndicatorCornerRadius { get; set; }
        /// <summary>
        /// Gets or sets the placement of the selection indication.
        /// </summary>
        /// <value>
        /// One of the <see cref="T:Syncfusion.Maui.Toolkit.TabView.TabIndicatorPlacement" /> enumeration that specifies the placement of the selection indicator. The default mode is <see cref="F:Syncfusion.Maui.Toolkit.TabView.TabIndicatorPlacement.Bottom" />.
        /// </value>
        [Parameter] public SMTT.TabIndicatorPlacement? IndicatorPlacement { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the indicator’s border height.
        /// </summary>
        /// <value>
        /// It accepts the double values and the default value is 3.
        /// </value>
        [Parameter] public double? IndicatorStrokeThickness { get; set; }
        /// <summary>
        /// Gets or sets the value that can be used to customize the indicator width in the tab header.
        /// </summary>
        /// <value>
        /// It accepts <see cref="P:Syncfusion.Maui.Toolkit.TabView.SfTabView.IndicatorWidthMode" /> values and the default value is <see cref="F:Syncfusion.Maui.Toolkit.TabView.IndicatorWidthMode.Fit" />.
        /// </value>
        [Parameter] public SMTT.IndicatorWidthMode? IndicatorWidthMode { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to enable the scroll buttons.
        /// </summary>
        /// <value>
        /// A boolean value indicating whether the scroll buttons are enabled. The default value is false.
        /// </value>
        [Parameter] public bool? IsScrollButtonEnabled { get; set; }
        /// <summary>
        /// Gets or sets the collection used to populate the content of the <see cref="T:Syncfusion.Maui.Toolkit.TabView.SfTabView" />.
        /// </summary>
        /// <value>
        /// The collection used to populate the content of the Tab View. The default is an empty collection.
        /// </value>
        [Parameter] public IList ItemsSource { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the scroll button’s background color in the <see cref="T:Syncfusion.Maui.Toolkit.TabView.SfTabView" />.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.Brush" /> value that specifies the background color of the scroll button.
        /// </value>
        [Parameter] public Color ScrollButtonBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the scroll button’s foreground color in the <see cref="T:Syncfusion.Maui.Toolkit.TabView.SfTabView" />.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Graphics.Color" /> value that specifies the foreground color of the scroll button.
        /// </value>
        [Parameter] public Color ScrollButtonColor { get; set; }
        /// <summary>
        /// Gets or sets the index specifying the currently selected item.
        /// </summary>
        /// <value>
        /// A zero-based index of the currently selected item.
        /// </value>
        [Parameter] public int? SelectedIndex { get; set; }
        /// <summary>
        /// Gets or sets the background color of the tab bar.
        /// </summary>
        /// <value>
        /// The background color of the tab bar. The default value is null.
        /// </value>
        [Parameter] public Color TabBarBackgroundColor { get; set; }
        /// <summary>
        /// Gets or sets the height of the tab header.
        /// </summary>
        /// <value>
        /// Specifies the height of the tab header. The default value is 48d.
        /// </value>
        [Parameter] public double? TabBarHeight { get; set; }
        /// <summary>
        /// Gets or sets whether the tab header should be at the bottom or at the top of the tab content.
        /// </summary>
        /// <value>
        /// One of the <see cref="T:Syncfusion.Maui.Toolkit.TabView.TabBarPlacement" /> enumeration that specifies the placement of the tab bar. The default mode is <see cref="F:Syncfusion.Maui.Toolkit.TabView.TabBarPlacement.Top" />.
        /// </value>
        [Parameter] public SMTT.TabBarPlacement? TabBarPlacement { get; set; }
        /// <summary>
        /// Gets or sets the value that can be used to customize the padding of the tab header.
        /// </summary>
        /// <value>
        /// Specifies the padding of the tab header. The default value is new Thickness(52,0,52,0).
        /// </value>
        [Parameter] public Thickness? TabHeaderPadding { get; set; }
        /// <summary>
        /// Gets or sets the value for determining the width mode of each tab.
        /// </summary>
        /// <value>
        /// One of the <see cref="T:Syncfusion.Maui.Toolkit.TabView.TabWidthMode" /> enumeration values that specifies the tab item's width. The default mode is <see cref="F:Syncfusion.Maui.Toolkit.TabView.TabWidthMode.Default" />.
        /// </value>
        [Parameter] public SMTT.TabWidthMode? TabWidthMode { get; set; }
        /// <summary>
        /// Gets or sets the template that is used to display the content.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.DataTemplate" /> object that is used to display the content. The default is null.
        /// </value>
        [Parameter] public RenderFragment ContentItemTemplate { get; set; }
        /// <summary>
        /// Gets or sets the template that is used to display the header item.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.DataTemplate" /> object that is used to display the header item. The default is null.
        /// </value>
        [Parameter] public RenderFragment HeaderItemTemplate { get; set; }
        /// <summary>
        /// Gets or sets a brush that describes the selection indicator's background.
        /// </summary>
        /// <value>
        /// Specifies the background of the selection indicator. The default value is SolidColorBrush(Color.FromArgb("#6200EE")).
        /// </value>
        [Parameter] public RenderFragment IndicatorBackground { get; set; }
        /// <summary>
        /// Gets or sets the collection used to populate the content of the <see cref="T:Syncfusion.Maui.Toolkit.TabView.SfTabView" />.
        /// </summary>
        /// <value>
        /// The collection used to populate the content of the <see cref="T:Syncfusion.Maui.Toolkit.TabView.SfTabView" />. The default is an empty collection.
        /// </value>
        [Parameter] public new RenderFragment ChildContent { get; set; }
        /// <summary>
        /// Gets or sets a value that can be used to customize the scroll button’s background color in the <see cref="T:Syncfusion.Maui.Toolkit.TabView.SfTabView" />.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Controls.Brush" /> value that specifies the background color of the scroll button.
        /// </value>
        [Parameter] public RenderFragment ScrollButtonBackground { get; set; }
        /// <summary>
        /// Gets or sets the background color of the tab bar.
        /// </summary>
        /// <value>
        /// The background color of the tab bar. The default value is null.
        /// </value>
        [Parameter] public RenderFragment TabBarBackground { get; set; }
        [Parameter] public EventCallback<SMTT.TabSelectionChangedEventArgs> OnSelectionChanged { get; set; }
        [Parameter] public EventCallback<SMTT.TabItemTappedEventArgs> OnTabItemTapped { get; set; }
        [Parameter] public EventCallback<SMTT.SelectionChangingEventArgs> OnSelectionChanging { get; set; }

        public new SMTT.SfTabView NativeControl => (SMTT.SfTabView)((BindableObject)this).NativeControl;

        protected override SMTT.SfTabView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ContentTransitionDuration):
                    if (!Equals(ContentTransitionDuration, value))
                    {
                        ContentTransitionDuration = (double?)value;
                        NativeControl.ContentTransitionDuration = ContentTransitionDuration ?? (double)SMTT.SfTabView.ContentTransitionDurationProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableSwiping):
                    if (!Equals(EnableSwiping, value))
                    {
                        EnableSwiping = (bool?)value;
                        NativeControl.EnableSwiping = EnableSwiping ?? (bool)SMTT.SfTabView.EnableSwipingProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableVirtualization):
                    if (!Equals(EnableVirtualization, value))
                    {
                        EnableVirtualization = (bool?)value;
                        NativeControl.EnableVirtualization = EnableVirtualization ?? (bool)SMTT.SfTabView.EnableVirtualizationProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAutoScalingEnabled):
                    if (!Equals(FontAutoScalingEnabled, value))
                    {
                        FontAutoScalingEnabled = (bool?)value;
                        NativeControl.FontAutoScalingEnabled = FontAutoScalingEnabled ?? (bool)SMTT.SfTabView.FontAutoScalingEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(HeaderDisplayMode):
                    if (!Equals(HeaderDisplayMode, value))
                    {
                        HeaderDisplayMode = (SMTT.TabBarDisplayMode?)value;
                        NativeControl.HeaderDisplayMode = HeaderDisplayMode ?? (SMTT.TabBarDisplayMode)SMTT.SfTabView.HeaderDisplayModeProperty.DefaultValue;
                    }
                    break;
                case nameof(HeaderHorizontalTextAlignment):
                    if (!Equals(HeaderHorizontalTextAlignment, value))
                    {
                        HeaderHorizontalTextAlignment = (TextAlignment?)value;
                        NativeControl.HeaderHorizontalTextAlignment = HeaderHorizontalTextAlignment ?? (TextAlignment)SMTT.SfTabView.HeaderHorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(IndicatorBackgroundColor):
                    if (!Equals(IndicatorBackgroundColor, value))
                    {
                        IndicatorBackgroundColor = (Color)value;
                        NativeControl.IndicatorBackground = IndicatorBackgroundColor;
                    }
                    break;
                case nameof(IndicatorCornerRadius):
                    if (!Equals(IndicatorCornerRadius, value))
                    {
                        IndicatorCornerRadius = (CornerRadius?)value;
                        NativeControl.IndicatorCornerRadius = IndicatorCornerRadius ?? (CornerRadius)SMTT.SfTabView.IndicatorCornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(IndicatorPlacement):
                    if (!Equals(IndicatorPlacement, value))
                    {
                        IndicatorPlacement = (SMTT.TabIndicatorPlacement?)value;
                        NativeControl.IndicatorPlacement = IndicatorPlacement ?? (SMTT.TabIndicatorPlacement)SMTT.SfTabView.IndicatorPlacementProperty.DefaultValue;
                    }
                    break;
                case nameof(IndicatorStrokeThickness):
                    if (!Equals(IndicatorStrokeThickness, value))
                    {
                        IndicatorStrokeThickness = (double?)value;
                        NativeControl.IndicatorStrokeThickness = IndicatorStrokeThickness ?? (double)SMTT.SfTabView.IndicatorStrokeThicknessProperty.DefaultValue;
                    }
                    break;
                case nameof(IndicatorWidthMode):
                    if (!Equals(IndicatorWidthMode, value))
                    {
                        IndicatorWidthMode = (SMTT.IndicatorWidthMode?)value;
                        NativeControl.IndicatorWidthMode = IndicatorWidthMode ?? (SMTT.IndicatorWidthMode)SMTT.SfTabView.IndicatorWidthModeProperty.DefaultValue;
                    }
                    break;
                case nameof(IsScrollButtonEnabled):
                    if (!Equals(IsScrollButtonEnabled, value))
                    {
                        IsScrollButtonEnabled = (bool?)value;
                        NativeControl.IsScrollButtonEnabled = IsScrollButtonEnabled ?? (bool)SMTT.SfTabView.IsScrollButtonEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(ItemsSource):
                    if (!Equals(ItemsSource, value))
                    {
                        ItemsSource = (IList)value;
                        NativeControl.ItemsSource = ItemsSource;
                    }
                    break;
                case nameof(ScrollButtonBackgroundColor):
                    if (!Equals(ScrollButtonBackgroundColor, value))
                    {
                        ScrollButtonBackgroundColor = (Color)value;
                        NativeControl.ScrollButtonBackground = ScrollButtonBackgroundColor;
                    }
                    break;
                case nameof(ScrollButtonColor):
                    if (!Equals(ScrollButtonColor, value))
                    {
                        ScrollButtonColor = (Color)value;
                        NativeControl.ScrollButtonColor = ScrollButtonColor;
                    }
                    break;
                case nameof(SelectedIndex):
                    if (!Equals(SelectedIndex, value))
                    {
                        SelectedIndex = (int?)value;
                        NativeControl.SelectedIndex = SelectedIndex ?? (int)SMTT.SfTabView.SelectedIndexProperty.DefaultValue;
                    }
                    break;
                case nameof(TabBarBackgroundColor):
                    if (!Equals(TabBarBackgroundColor, value))
                    {
                        TabBarBackgroundColor = (Color)value;
                        NativeControl.TabBarBackground = TabBarBackgroundColor;
                    }
                    break;
                case nameof(TabBarHeight):
                    if (!Equals(TabBarHeight, value))
                    {
                        TabBarHeight = (double?)value;
                        NativeControl.TabBarHeight = TabBarHeight ?? (double)SMTT.SfTabView.TabBarHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(TabBarPlacement):
                    if (!Equals(TabBarPlacement, value))
                    {
                        TabBarPlacement = (SMTT.TabBarPlacement?)value;
                        NativeControl.TabBarPlacement = TabBarPlacement ?? (SMTT.TabBarPlacement)SMTT.SfTabView.TabBarPlacementProperty.DefaultValue;
                    }
                    break;
                case nameof(TabHeaderPadding):
                    if (!Equals(TabHeaderPadding, value))
                    {
                        TabHeaderPadding = (Thickness?)value;
                        NativeControl.TabHeaderPadding = TabHeaderPadding ?? (Thickness)SMTT.SfTabView.TabHeaderPaddingProperty.DefaultValue;
                    }
                    break;
                case nameof(TabWidthMode):
                    if (!Equals(TabWidthMode, value))
                    {
                        TabWidthMode = (SMTT.TabWidthMode?)value;
                        NativeControl.TabWidthMode = TabWidthMode ?? (SMTT.TabWidthMode)SMTT.SfTabView.TabWidthModeProperty.DefaultValue;
                    }
                    break;
                case nameof(ContentItemTemplate):
                    ContentItemTemplate = (RenderFragment)value;
                    break;
                case nameof(HeaderItemTemplate):
                    HeaderItemTemplate = (RenderFragment)value;
                    break;
                case nameof(IndicatorBackground):
                    IndicatorBackground = (RenderFragment)value;
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;
                case nameof(ScrollButtonBackground):
                    ScrollButtonBackground = (RenderFragment)value;
                    break;
                case nameof(TabBarBackground):
                    TabBarBackground = (RenderFragment)value;
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, SMTT.TabSelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<SMTT.TabSelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;
                case nameof(OnTabItemTapped):
                    if (!Equals(OnTabItemTapped, value))
                    {
                        void NativeControlTabItemTapped(object sender, SMTT.TabItemTappedEventArgs e) => InvokeEventCallback(OnTabItemTapped, e);

                        OnTabItemTapped = (EventCallback<SMTT.TabItemTappedEventArgs>)value;
                        NativeControl.TabItemTapped -= NativeControlTabItemTapped;
                        NativeControl.TabItemTapped += NativeControlTabItemTapped;
                    }
                    break;
                case nameof(OnSelectionChanging):
                    if (!Equals(OnSelectionChanging, value))
                    {
                        void NativeControlSelectionChanging(object sender, SMTT.SelectionChangingEventArgs e) => InvokeEventCallback(OnSelectionChanging, e);

                        OnSelectionChanging = (EventCallback<SMTT.SelectionChangingEventArgs>)value;
                        NativeControl.SelectionChanging -= NativeControlSelectionChanging;
                        NativeControl.SelectionChanging += NativeControlSelectionChanging;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTT.SfTabView>(builder, sequence++, ContentItemTemplate, (x, template) => x.ContentItemTemplate = template);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTT.SfTabView>(builder, sequence++, HeaderItemTemplate, (x, template) => x.HeaderItemTemplate = template);
            RenderTreeBuilderHelper.AddContentProperty<SMTT.SfTabView>(builder, sequence++, IndicatorBackground, (x, value) => x.IndicatorBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddListContentProperty<SMTT.SfTabView, SMTT.SfTabItem>(builder, sequence++, ChildContent, x => x.Items);
            RenderTreeBuilderHelper.AddContentProperty<SMTT.SfTabView>(builder, sequence++, ScrollButtonBackground, (x, value) => x.ScrollButtonBackground = (MC.Brush)value);
            RenderTreeBuilderHelper.AddContentProperty<SMTT.SfTabView>(builder, sequence++, TabBarBackground, (x, value) => x.TabBarBackground = (MC.Brush)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
