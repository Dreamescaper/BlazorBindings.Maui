// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SMTC = Syncfusion.Maui.Toolkit.Carousel;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Syncfusion.Toolkit.Carousel
{
    /// <summary>
    /// The <see cref="T:Syncfusion.Maui.Toolkit.Carousel.SfCarousel" /> class represents a control that allows user navigate through a collection of galleried items.
    /// </summary>
    public partial class SfCarousel : BlazorBindings.Maui.Elements.View
    {
        static SfCarousel()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value indicating whether the carousel control is configured to load additional items dynamically.
        /// </summary>
        /// <value>
        /// <c>true</c> if additional items can be loaded dynamically; otherwise, <c>false</c>.
        /// </value>
        [Parameter] public bool? AllowLoadMore { get; set; }
        /// <summary>
        /// Gets or sets the duration for the selection animation in the carousel, allowing you to adjust the delay of the effect.
        /// </summary>
        /// <value>
        /// The default value is 600 milliseconds.
        /// </value>
        [Parameter] public int? Duration { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether user interaction with the carousel is enabled or disabled.
        /// </summary>
        /// <value>
        /// <c>true</c> if interaction is enabled; otherwise, <c>false</c>.
        /// </value>
        [Parameter] public bool? EnableInteraction { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether the virtualization is enabled or not.
        /// </summary>
        /// <value>
        /// <c>true</c> if virtualization is enabled; otherwise, <c>false</c>.
        /// </value>
        [Parameter] public bool? EnableVirtualization { get; set; }
        /// <summary>
        /// Gets or sets the height of each item in the carousel, allowing customization to suit design specifications.
        /// </summary>
        /// <value>
        /// The default value is 350 for desktop platforms and 300 for mobile devices.
        /// </value>
        [Parameter] public int? ItemHeight { get; set; }
        /// <summary>
        /// Gets or sets the spacing value between items in the carousel. This property adjusts the space separating each item.
        /// </summary>
        /// <value>
        /// The default value is 12.
        /// </value>
        [Parameter] public int? ItemSpacing { get; set; }
        /// <summary>
        /// Gets or sets the collection of items to be displayed in the carousel, allowing each item to have a different view based on the template.
        /// </summary>
        /// <value>
        /// The default value is null, indicating no items are initially set.
        /// </value>
        [Parameter] public IEnumerable<object> ItemsSource { get; set; }
        /// <summary>
        /// Gets or sets the width of each item in the carousel, allowing customization to suit design specifications.
        /// </summary>
        /// <value>
        /// The default value is 250 for desktop platforms and 200 for mobile devices.
        /// </value>
        [Parameter] public int? ItemWidth { get; set; }
        /// <summary>
        /// Gets or sets the number of additional items to load when the load more functionality is triggered in the carousel.
        /// </summary>
        /// <value>
        /// The default value is 3.
        /// </value>
        [Parameter] public int? LoadMoreItemsCount { get; set; }
        /// <summary>
        /// Gets or sets the spacing between each item in the carousel when the view mode is set to default, allowing for visual separation.
        /// </summary>
        /// <value>
        /// The default value is 40f for desktop and 18f for mobile devices.
        /// </value>
        [Parameter] public float? Offset { get; set; }
        /// <summary>
        /// Gets or sets the angle at which unselected items are tilted in the carousel.
        /// </summary>
        /// <value>
        /// The default value is 45 degrees.
        /// </value>
        [Parameter] public int? RotationAngle { get; set; }
        /// <summary>
        /// Gets or sets the scaling ratio that differentiates unselected items in the carousel when the view mode is set to default.
        /// </summary>
        /// <value>
        /// The default value is 0.8f for desktop and 0.7f for mobile devices.
        /// </value>
        [Parameter] public float? ScaleOffset { get; set; }
        /// <summary>
        /// Gets or sets the index of the item that is currently selected and centered in the carousel control.
        /// </summary>
        /// <value>
        /// The default value is 0, indicating the first item.
        /// </value>
        [Parameter] public int? SelectedIndex { get; set; }
        /// <summary>
        /// Gets or sets the space between the selected item and unselected items in the carousel when the view mode is set to default.
        /// </summary>
        /// <value>
        /// The default value is 20 for Windows and 40 for other platforms.
        /// </value>
        [Parameter] public int? SelectedItemOffset { get; set; }
        /// <summary>
        /// Gets or sets the scroll mode for the carousel, determining whether items are scrolled individually or in groups.
        /// </summary>
        [Parameter] public SMTC.SwipeMovementMode? SwipeMovementMode { get; set; }
        /// <summary>
        /// Gets or sets the mode that determines whether the carousel items are arranged in a default 3D layout or a linear horizontal layout.
        /// </summary>
        /// <value>
        /// The default value is "Default", indicating the 3D view mode..
        /// </value>
        [Parameter] public SMTC.ViewMode? ViewMode { get; set; }
        /// <summary>
        /// Gets or sets the data template that defines the visual representation of each item in the carousel.
        /// </summary>
        /// <value>
        /// The default value is null, indicating no template is set initially.
        /// </value>
        [Parameter] public RenderFragment ItemTemplate { get; set; }
        /// <summary>
        /// Gets or sets the custom view displayed when additional items are loaded in the carousel, replacing the default "Load More" label.
        /// </summary>
        /// <value>
        /// The default value is null, indicating no custom view is set initially.
        /// </value>
        /// <remarks>
        /// Accepts single View element.
        /// </remarks>
        [Parameter] public RenderFragment LoadMoreView { get; set; }
        /// <summary>
        /// Triggered when an item is selected from the list of unselected items in the <see cref="T:Syncfusion.Maui.Toolkit.Carousel.SfCarousel" />.
        /// </summary>
        [Parameter] public EventCallback<SMTC.SelectionChangedEventArgs> OnSelectionChanged { get; set; }
        /// <summary>
        /// Triggered when a swipe gesture initiates an item selection in the <see cref="T:Syncfusion.Maui.Toolkit.Carousel.SfCarousel" />.
        /// </summary>
        [Parameter] public EventCallback<SMTC.SwipeStartedEventArgs> OnSwipeStarted { get; set; }
        /// <summary>
        /// Triggered when a swipe gesture is completed in the <see cref="T:Syncfusion.Maui.Toolkit.Carousel.SfCarousel" />.
        /// </summary>
        [Parameter] public EventCallback OnSwipeEnded { get; set; }

        public new SMTC.SfCarousel NativeControl => (SMTC.SfCarousel)((BindableObject)this).NativeControl;

        protected override SMTC.SfCarousel CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AllowLoadMore):
                    if (!Equals(AllowLoadMore, value))
                    {
                        AllowLoadMore = (bool?)value;
                        NativeControl.AllowLoadMore = AllowLoadMore ?? (bool)SMTC.SfCarousel.AllowLoadMoreProperty.DefaultValue;
                    }
                    break;
                case nameof(Duration):
                    if (!Equals(Duration, value))
                    {
                        Duration = (int?)value;
                        NativeControl.Duration = Duration ?? (int)SMTC.SfCarousel.DurationProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableInteraction):
                    if (!Equals(EnableInteraction, value))
                    {
                        EnableInteraction = (bool?)value;
                        NativeControl.EnableInteraction = EnableInteraction ?? (bool)SMTC.SfCarousel.EnableInteractionProperty.DefaultValue;
                    }
                    break;
                case nameof(EnableVirtualization):
                    if (!Equals(EnableVirtualization, value))
                    {
                        EnableVirtualization = (bool?)value;
                        NativeControl.EnableVirtualization = EnableVirtualization ?? (bool)SMTC.SfCarousel.EnableVirtualizationProperty.DefaultValue;
                    }
                    break;
                case nameof(ItemHeight):
                    if (!Equals(ItemHeight, value))
                    {
                        ItemHeight = (int?)value;
                        NativeControl.ItemHeight = ItemHeight ?? (int)SMTC.SfCarousel.ItemHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(ItemSpacing):
                    if (!Equals(ItemSpacing, value))
                    {
                        ItemSpacing = (int?)value;
                        NativeControl.ItemSpacing = ItemSpacing ?? (int)SMTC.SfCarousel.ItemSpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(ItemsSource):
                    if (!Equals(ItemsSource, value))
                    {
                        ItemsSource = (IEnumerable<object>)value;
                        NativeControl.ItemsSource = ItemsSource;
                    }
                    break;
                case nameof(ItemWidth):
                    if (!Equals(ItemWidth, value))
                    {
                        ItemWidth = (int?)value;
                        NativeControl.ItemWidth = ItemWidth ?? (int)SMTC.SfCarousel.ItemWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(LoadMoreItemsCount):
                    if (!Equals(LoadMoreItemsCount, value))
                    {
                        LoadMoreItemsCount = (int?)value;
                        NativeControl.LoadMoreItemsCount = LoadMoreItemsCount ?? (int)SMTC.SfCarousel.LoadMoreItemsCountProperty.DefaultValue;
                    }
                    break;
                case nameof(Offset):
                    if (!Equals(Offset, value))
                    {
                        Offset = (float?)value;
                        NativeControl.Offset = Offset ?? (float)SMTC.SfCarousel.OffsetProperty.DefaultValue;
                    }
                    break;
                case nameof(RotationAngle):
                    if (!Equals(RotationAngle, value))
                    {
                        RotationAngle = (int?)value;
                        NativeControl.RotationAngle = RotationAngle ?? (int)SMTC.SfCarousel.RotationAngleProperty.DefaultValue;
                    }
                    break;
                case nameof(ScaleOffset):
                    if (!Equals(ScaleOffset, value))
                    {
                        ScaleOffset = (float?)value;
                        NativeControl.ScaleOffset = ScaleOffset ?? (float)SMTC.SfCarousel.ScaleOffsetProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectedIndex):
                    if (!Equals(SelectedIndex, value))
                    {
                        SelectedIndex = (int?)value;
                        NativeControl.SelectedIndex = SelectedIndex ?? (int)SMTC.SfCarousel.SelectedIndexProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectedItemOffset):
                    if (!Equals(SelectedItemOffset, value))
                    {
                        SelectedItemOffset = (int?)value;
                        NativeControl.SelectedItemOffset = SelectedItemOffset ?? (int)SMTC.SfCarousel.SelectedItemOffsetProperty.DefaultValue;
                    }
                    break;
                case nameof(SwipeMovementMode):
                    if (!Equals(SwipeMovementMode, value))
                    {
                        SwipeMovementMode = (SMTC.SwipeMovementMode?)value;
                        NativeControl.SwipeMovementMode = SwipeMovementMode ?? (SMTC.SwipeMovementMode)SMTC.SfCarousel.SwipeMovementModeProperty.DefaultValue;
                    }
                    break;
                case nameof(ViewMode):
                    if (!Equals(ViewMode, value))
                    {
                        ViewMode = (SMTC.ViewMode?)value;
                        NativeControl.ViewMode = ViewMode ?? (SMTC.ViewMode)SMTC.SfCarousel.ViewModeProperty.DefaultValue;
                    }
                    break;
                case nameof(ItemTemplate):
                    ItemTemplate = (RenderFragment)value;
                    break;
                case nameof(LoadMoreView):
                    LoadMoreView = (RenderFragment)value;
                    break;
                case nameof(OnSelectionChanged):
                    if (!Equals(OnSelectionChanged, value))
                    {
                        void NativeControlSelectionChanged(object sender, SMTC.SelectionChangedEventArgs e) => InvokeEventCallback(OnSelectionChanged, e);

                        OnSelectionChanged = (EventCallback<SMTC.SelectionChangedEventArgs>)value;
                        NativeControl.SelectionChanged -= NativeControlSelectionChanged;
                        NativeControl.SelectionChanged += NativeControlSelectionChanged;
                    }
                    break;
                case nameof(OnSwipeStarted):
                    if (!Equals(OnSwipeStarted, value))
                    {
                        void NativeControlSwipeStarted(object sender, SMTC.SwipeStartedEventArgs e) => InvokeEventCallback(OnSwipeStarted, e);

                        OnSwipeStarted = (EventCallback<SMTC.SwipeStartedEventArgs>)value;
                        NativeControl.SwipeStarted -= NativeControlSwipeStarted;
                        NativeControl.SwipeStarted += NativeControlSwipeStarted;
                    }
                    break;
                case nameof(OnSwipeEnded):
                    if (!Equals(OnSwipeEnded, value))
                    {
                        void NativeControlSwipeEnded(object sender, EventArgs e) => InvokeEventCallback(OnSwipeEnded);

                        OnSwipeEnded = (EventCallback)value;
                        NativeControl.SwipeEnded -= NativeControlSwipeEnded;
                        NativeControl.SwipeEnded += NativeControlSwipeEnded;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddDataTemplateProperty<SMTC.SfCarousel>(builder, sequence++, ItemTemplate, (x, template) => x.ItemTemplate = template);
            RenderTreeBuilderHelper.AddContentProperty<SMTC.SfCarousel>(builder, sequence++, LoadMoreView, (x, value) => x.LoadMoreView = (MC.View)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
