// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using CMB = CommunityToolkit.Maui.Behaviors;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements.CommunityToolkit.Behaviors
{
    /// <summary>
    /// The MaskedBehavior is a behavior that allows the user to define an input mask for data entry. Adding this behavior to an <see cref="T:Microsoft.Maui.Controls.InputView" /> (i.e. <see cref="T:Microsoft.Maui.Controls.Entry" />) control will force the user to only input values matching a given mask. Examples of its usage include input of a credit card number or a phone number.
    /// </summary>
    public partial class MaskedBehavior : BlazorBindings.Maui.Elements.Behavior
    {
        static MaskedBehavior()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// The mask that the input value needs to match.
        /// </summary>
        [Parameter] public string Mask { get; set; }
        /// <summary>
        /// Gets or sets which character in the <see cref="P:CommunityToolkit.Maui.Behaviors.MaskedBehavior.Mask" /> property that will be visible and entered by a user. Defaults to 'X'. <br /> By default the 'X' character will be unmasked therefore a <see cref="P:CommunityToolkit.Maui.Behaviors.MaskedBehavior.Mask" /> of "XX XX XX" would display "12 34 56". If you wish to include 'X' in your <see cref="P:CommunityToolkit.Maui.Behaviors.MaskedBehavior.Mask" /> then you could set this <see cref="P:CommunityToolkit.Maui.Behaviors.MaskedBehavior.UnmaskedCharacter" /> to something else e.g. '0' and then use a <see cref="P:CommunityToolkit.Maui.Behaviors.MaskedBehavior.Mask" /> of "00X00X00" which would then display "12X34X56".
        /// </summary>
        [Parameter] public char? UnmaskedCharacter { get; set; }

        public new CMB.MaskedBehavior NativeControl => (CMB.MaskedBehavior)((BindableObject)this).NativeControl;

        protected override CMB.MaskedBehavior CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Mask):
                    if (!Equals(Mask, value))
                    {
                        Mask = (string)value;
                        NativeControl.Mask = Mask;
                    }
                    break;
                case nameof(UnmaskedCharacter):
                    if (!Equals(UnmaskedCharacter, value))
                    {
                        UnmaskedCharacter = (char?)value;
                        NativeControl.UnmaskedCharacter = UnmaskedCharacter ?? (char)CMB.MaskedBehavior.UnmaskedCharacterProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
