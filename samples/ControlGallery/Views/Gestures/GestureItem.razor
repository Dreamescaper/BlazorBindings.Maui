<Frame @ref="_element" BackgroundColor="Colors.LightCyan" CornerRadius="7" Padding="20" Margin="4"
       OnTap="OnTap"
       OnDoubleTap="OnDoubleTap"
       OnPanUpdate="OnPanUpdate">

    <Label TextColor="Colors.Black">@Item - @status</Label>
</Frame>

@code {
    [Parameter] public int Item { get; set; }
    [Parameter] public EventCallback<int> OnRemoving { get; set; }

    Frame _element;
    string status = "Pending";
    double _lastX;

    void OnTap() => status = "Tapped";
    void OnDoubleTap() => status = "Double Tapped";

    async Task OnPanUpdate(PanUpdatedEventArgs args)
    {
        if (args.StatusType == GestureStatus.Running)
        {
            _lastX = args.TotalX;
            _element.NativeControl.TranslationX = args.TotalX;
        }
        else if (args.StatusType == GestureStatus.Completed)
        {
            if (Math.Abs(_lastX) > 50)
            {
                var screenWidth = DeviceDisplay.MainDisplayInfo.Width;

                var translateTo = Math.Sign(_lastX) * screenWidth;
                await _element.NativeControl.TranslateTo(translateTo, 0);
                await OnRemoving.InvokeAsync(Item);
            }
            else
            {
                _element.NativeControl.TranslationX = args.TotalX;
            }
        }
    }
}
