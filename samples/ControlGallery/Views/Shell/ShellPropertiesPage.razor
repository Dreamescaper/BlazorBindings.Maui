<ContentPage @ref="page"
             Title="Shell Properties"
             NavBarIsVisible="@navBarVisible"
             TabBarIsVisible="@tabBarVisible"
             TitleColor="@titleColor">

    <ToolbarItems>
        <ToolbarItem Text="Help" OnClick="ShowHelp" />
    </ToolbarItems>

    <ChildContent>
        <ScrollView>
            <StackLayout Spacing="6">
                <HorizontalStackLayout>
                    <Label Text="Enable NavBar: " />
                    <CheckBox @bind-IsChecked="navBarVisible" />
                </HorizontalStackLayout>

                <HorizontalStackLayout>
                    <Label Text="Enable TabBar: " />
                    <CheckBox @bind-IsChecked="tabBarVisible" />
                </HorizontalStackLayout>

                <Button Text="Change Title Color" OnClick="ChangeTitleColor" />
                <Button Text="Change Shell BackgroundColor" OnClick="ChangeShellBackgroundColor" />
                <Button Text="Change Shell ForegroundColor" OnClick="ChangeShellForegroundColor" />
                <Button Text="Change Shell UnselectedColor" OnClick="ChangeShellUnselectedColor" />
                <Button Text="Change Shell TabBarTitleColor" OnClick="ChangeShellTabBarTitleColor" />
                <Button Text="Show page with BackButtonBehavior" OnClick="NavigateToBackButtonBehavior" />
                <Button Text="Show page with SearchHandler" OnClick="NavigateToSearchHandler" />
            </StackLayout>
        </ScrollView>
    </ChildContent>
</ContentPage>

@code {
[Inject] INavigation Navigation { get; set; }

[Parameter] public Color ShellBackgroundColor { get; set; }
[Parameter] public EventCallback<Color> ShellBackgroundColorChanged { get; set; }
[Parameter] public Color ShellForegroundColor { get; set; }
[Parameter] public EventCallback<Color> ShellForegroundColorChanged { get; set; }
[Parameter] public Color ShellUnselectedColor { get; set; }
[Parameter] public EventCallback<Color> ShellUnselectedColorChanged { get; set; }
[Parameter] public Color ShellTabBarTitleColor { get; set; }
[Parameter] public EventCallback<Color> ShellTabBarTitleColorChanged { get; set; }

BlazorBindings.Maui.Elements.Page page;

bool navBarVisible = true;
bool tabBarVisible = true;
Color titleColor;

List<Color> colors = new List<Color> {
Colors.Red,
Colors.Green,
Colors.Blue,
null
};

void ChangeTitleColor()
{
    var index = (colors.IndexOf(titleColor) + 1) % colors.Count;
    titleColor = colors[index];
}

void ChangeShellBackgroundColor()
{
    var index = (colors.IndexOf(ShellBackgroundColor) + 1) % colors.Count;
    ShellBackgroundColor = colors[index];
    ShellBackgroundColorChanged.InvokeAsync(ShellBackgroundColor);
}

void ChangeShellForegroundColor()
{
    var index = (colors.IndexOf(ShellForegroundColor) + 1) % colors.Count;
    ShellForegroundColor = colors[index];
    ShellForegroundColorChanged.InvokeAsync(ShellForegroundColor);
}

void ChangeShellUnselectedColor()
{
    var index = (colors.IndexOf(ShellUnselectedColor) + 1) % colors.Count;
    ShellUnselectedColor = colors[index];
    ShellUnselectedColorChanged.InvokeAsync(ShellUnselectedColor);
}

void ChangeShellTabBarTitleColor()
{
    var index = (colors.IndexOf(ShellTabBarTitleColor) + 1) % colors.Count;
    ShellTabBarTitleColor = colors[index];
    ShellTabBarTitleColorChanged.InvokeAsync(ShellTabBarTitleColor);
}

async Task ShowHelp()
{
    await page.NativeControl.DisplayAlert("Help", "Some help message", "OK");
}

async Task NavigateToBackButtonBehavior()
{
    await Navigation.PushAsync<BackButtonBehaviorPage>();
}

async Task NavigateToSearchHandler()
{
    await Navigation.PushAsync<SearchHandlerPage>();
}
}