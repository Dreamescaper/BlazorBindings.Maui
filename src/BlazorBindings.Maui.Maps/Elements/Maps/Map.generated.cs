// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Microsoft.Maui.Controls.Maps;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Maps;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements.Maps
{
    public partial class Map : BlazorBindings.Maui.Elements.View
    {
        static Map()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public bool? IsScrollEnabled { get; set; }
        [Parameter] public bool? IsShowingUser { get; set; }
        [Parameter] public bool? IsTrafficEnabled { get; set; }
        [Parameter] public bool? IsZoomEnabled { get; set; }
        [Parameter] public MapType? MapType { get; set; }
        [Parameter] public EventCallback<MCM.MapClickedEventArgs> OnMapClicked { get; set; }

        public new MCM.Map NativeControl => (MCM.Map)((BindableObject)this).NativeControl;

        protected override MCM.Map CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(IsScrollEnabled):
                    if (!Equals(IsScrollEnabled, value))
                    {
                        IsScrollEnabled = (bool?)value;
                        NativeControl.IsScrollEnabled = IsScrollEnabled ?? (bool)MCM.Map.IsScrollEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(IsShowingUser):
                    if (!Equals(IsShowingUser, value))
                    {
                        IsShowingUser = (bool?)value;
                        NativeControl.IsShowingUser = IsShowingUser ?? (bool)MCM.Map.IsShowingUserProperty.DefaultValue;
                    }
                    break;
                case nameof(IsTrafficEnabled):
                    if (!Equals(IsTrafficEnabled, value))
                    {
                        IsTrafficEnabled = (bool?)value;
                        NativeControl.IsTrafficEnabled = IsTrafficEnabled ?? (bool)MCM.Map.IsTrafficEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(IsZoomEnabled):
                    if (!Equals(IsZoomEnabled, value))
                    {
                        IsZoomEnabled = (bool?)value;
                        NativeControl.IsZoomEnabled = IsZoomEnabled ?? (bool)MCM.Map.IsZoomEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(MapType):
                    if (!Equals(MapType, value))
                    {
                        MapType = (MapType?)value;
                        NativeControl.MapType = MapType ?? (MapType)MCM.Map.MapTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(OnMapClicked):
                    if (!Equals(OnMapClicked, value))
                    {
                        void NativeControlMapClicked(object sender, MCM.MapClickedEventArgs e) => InvokeEventCallback(OnMapClicked, e);

                        OnMapClicked = (EventCallback<MCM.MapClickedEventArgs>)value;
                        NativeControl.MapClicked -= NativeControlMapClicked;
                        NativeControl.MapClicked += NativeControlMapClicked;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
