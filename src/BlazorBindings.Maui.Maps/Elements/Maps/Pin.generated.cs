// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCM = Microsoft.Maui.Controls.Maps;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Devices.Sensors;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements.Maps
{
    public partial class Pin : BlazorBindings.Maui.Elements.Element
    {
        static Pin()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public string Address { get; set; }
        [Parameter] public string Label { get; set; }
        [Parameter] public Location Location { get; set; }
        [Parameter] public MCM.PinType? Type { get; set; }
        [Parameter] public EventCallback<MCM.PinClickedEventArgs> OnMarkerClicked { get; set; }
        [Parameter] public EventCallback<MCM.PinClickedEventArgs> OnInfoWindowClicked { get; set; }

        public new MCM.Pin NativeControl => (MCM.Pin)((BindableObject)this).NativeControl;

        protected override MCM.Pin CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Address):
                    if (!Equals(Address, value))
                    {
                        Address = (string)value;
                        NativeControl.Address = Address;
                    }
                    break;
                case nameof(Label):
                    if (!Equals(Label, value))
                    {
                        Label = (string)value;
                        NativeControl.Label = Label;
                    }
                    break;
                case nameof(Location):
                    if (!Equals(Location, value))
                    {
                        Location = (Location)value;
                        NativeControl.Location = Location;
                    }
                    break;
                case nameof(Type):
                    if (!Equals(Type, value))
                    {
                        Type = (MCM.PinType?)value;
                        NativeControl.Type = Type ?? (MCM.PinType)MCM.Pin.TypeProperty.DefaultValue;
                    }
                    break;
                case nameof(OnMarkerClicked):
                    if (!Equals(OnMarkerClicked, value))
                    {
                        void NativeControlMarkerClicked(object sender, MCM.PinClickedEventArgs e) => InvokeEventCallback(OnMarkerClicked, e);

                        OnMarkerClicked = (EventCallback<MCM.PinClickedEventArgs>)value;
                        NativeControl.MarkerClicked -= NativeControlMarkerClicked;
                        NativeControl.MarkerClicked += NativeControlMarkerClicked;
                    }
                    break;
                case nameof(OnInfoWindowClicked):
                    if (!Equals(OnInfoWindowClicked, value))
                    {
                        void NativeControlInfoWindowClicked(object sender, MCM.PinClickedEventArgs e) => InvokeEventCallback(OnInfoWindowClicked, e);

                        OnInfoWindowClicked = (EventCallback<MCM.PinClickedEventArgs>)value;
                        NativeControl.InfoWindowClicked -= NativeControlInfoWindowClicked;
                        NativeControl.InfoWindowClicked += NativeControlInfoWindowClicked;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
