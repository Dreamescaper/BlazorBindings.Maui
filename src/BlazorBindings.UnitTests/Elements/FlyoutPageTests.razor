@inherits ElementTestBase

@code {
    [Test]
    public async Task FlyoutDetailPageIsWrappedInNavigationPage()
    {
        var flyoutPage = await Render<MC.FlyoutPage>(
    @<FlyoutPage Title="FlyoutPage">
        <Detail>
            <ContentPage Title="Detail Page" />
        </Detail>
    </FlyoutPage>
    );

        Assert.That(flyoutPage.Detail, Is.TypeOf<MC.NavigationPage>());

        var rootPage = ((MC.NavigationPage)flyoutPage.Detail).RootPage;
        Assert.That(rootPage.Title, Is.EqualTo("Detail Page"));
    }

    [Test]
    public async Task FlyoutPageShouldBeAbleToSwitchContent()
    {
        int pageNumber = 1;
        var flyoutPage = await Render<MC.FlyoutPage>(
    @<FlyoutPage Title="FlyoutPage">
        <Flyout>
            <ContentPage Title="Flyout">
                <Label>Flyout</Label>
            </ContentPage>
        </Flyout>

        <Detail>
            @if (pageNumber == 1)
            {
                <ContentPage Title="First Page">
                    <Label>1</Label>
                </ContentPage>
            }
            else
            {
                <ContentPage Title="Second Page">
                    <Label>2</Label>
                </ContentPage>
            }
        </Detail>
    </FlyoutPage>
    );

        Assert.That(GetPageTitle(), Is.EqualTo("First Page"));
        Assert.That(GetContentLabel(), Is.EqualTo("1"));

        pageNumber = 2;
        StateHasChanged();

        Assert.That(GetPageTitle(), Is.EqualTo("Second Page"));
        Assert.That(GetContentLabel(), Is.EqualTo("2"));

        string GetPageTitle() => (flyoutPage.Detail as MC.NavigationPage)?.RootPage.Title;
        string GetContentLabel() => (((flyoutPage.Detail as MC.NavigationPage)?.RootPage as MC.ContentPage)?.Content as MC.Label)?.Text;
    }
}
