@using Microsoft.Maui.Controls.Internals;

@inherits ElementTestBase

@code {
    [Test]
    public async Task CreateContentFromDataTemplateSelector() {
        var templateSelector = await RenderTemplate<int>(i => i >= 0
        ? @<Label>@i - @(i == 1 ? "one" : "many")</Label>
        : @<Border BackgroundColor="Colors.Red">
        <Label>@i - Negative</Label>
    </Border>);

        var label1 = CreateContent<MC.Label>(templateSelector, 1);
        var label2 = CreateContent<MC.Label>(templateSelector, 2);
        var borderMinus1 = CreateContent<MC.Border>(templateSelector, -1);
        var labelMinus1 = (MC.Label)borderMinus1.Content;

        Assert.That(label1.Text, Is.EqualTo("1 - one"));
        Assert.That(label2.Text, Is.EqualTo("2 - many"));
        Assert.That(labelMinus1.Text, Is.EqualTo("-1 - Negative"));
    }

    [Test]
    public async Task SelectorShouldCreateSeparateDataTemplatesPerChildComponent() {
        var templateSelector = await RenderTemplate<int>(i => i >= 0
        ? @<Label>@i - @(i == 1 ? "one" : "many")</Label>
        : @<Border BackgroundColor="Colors.Red">
        <Label>@i - Negative</Label>
        </Border>
    );

        var templateA1 = templateSelector.SelectTemplate(1, null);
        var templateA2 = templateSelector.SelectTemplate(2, null);
        var templateB1 = templateSelector.SelectTemplate(-1, null);
        var templateB2 = templateSelector.SelectTemplate(-2, null);

        Assert.That(templateA1, Is.SameAs(templateA2));
        Assert.That(templateB1, Is.SameAs(templateB2));
        Assert.That(templateA1, Is.Not.SameAs(templateB1));
    }

    [Test]
    public async Task TemplateContentChangesBasedOnBindingContext() {
        var template = await RenderTemplate<int>(i =>
    @<Label>@i - @(i == 1 ? "one" : "many")</Label>);

        var templateRoot = CreateTemplateRoot(template, 1);
        var label = templateRoot.GetTemplateContent<MC.Label>();

        Assert.That(label.Text, Is.EqualTo("1 - one"));

        templateRoot.BindingContext = 2;
        StateHasChanged();

        Assert.That(label.Text, Is.EqualTo("2 - many"));
    }

    private async Task<MC.DataTemplateSelector> RenderTemplate<T>(RenderFragment<T> templateFragment) {
        var collectionView = await Render<MC.CollectionView>(@<CollectionView T="T" ItemTemplateSelector="templateFragment" />);
        return (MC.DataTemplateSelector)collectionView.ItemTemplate;
    }

    private MC.BindableObject CreateTemplateRoot(MC.DataTemplateSelector templateSelector, object item) {
        var template = templateSelector.SelectTemplate(item, null);
        var content = (MC.BindableObject)template.CreateContent(item, null);
        content.BindingContext = item;
        return content;
    }

    private T CreateContent<T>(MC.DataTemplateSelector templateSelector, object value) where T : MC.View {
        var templateRoot = CreateTemplateRoot(templateSelector, value);
        return templateRoot.GetTemplateContent<T>();
    }
}
