@using System.Collections.ObjectModel;
@using System.Collections.Specialized;

@inherits ElementTestBase

@code {
    [Test]
    public async Task AddItemToTheEnd_Int()
    {
        List<int> source = new() { 1, 2, 3 };

        var changes = await GetChanges(source, x => x.Add(4));

        var change = changes.Single();
        Assert.That(change.Action, Is.EqualTo(NotifyCollectionChangedAction.Add));
        Assert.That(change.NewStartingIndex, Is.EqualTo(3));
        Assert.That(change.NewItems, Is.EqualTo(new[] { 4 }));
    }

    [Test]
    public async Task InsertInTheMiddle_String()
    {
        List<string> source = new() { "A", "B", "C" };

        var changes = await GetChanges(source, x => x.Insert(2, "D"));

        var change = changes.Single();
        Assert.That(change.Action, Is.EqualTo(NotifyCollectionChangedAction.Add));
        Assert.That(change.NewStartingIndex, Is.EqualTo(2));
        Assert.That(change.NewItems, Is.EqualTo(new[] { "D" }));
    }

    [Test]
    public async Task RemoveFromStart_ValueTuple()
    {
        var source = new[] { (1, "A"), (2, "B"), (3, "C") }.ToList();

        var changes = await GetChanges(source, x => x.RemoveAt(0));

        var change = changes.Single();
        Assert.That(change.Action, Is.EqualTo(NotifyCollectionChangedAction.Remove));
        Assert.That(change.OldStartingIndex, Is.EqualTo(0));
        Assert.That(change.OldItems, Is.EqualTo(new[] { (1, "A") }));
    }

    [Test]
    public async Task RemoveTheMiddle_Class()
    {
        var source = new TestClass[]
        {
            new(){Value = 1},
            new(){Value = 2},
            new(){Value = 3}
        }.ToList();

        var valueToRemove = source[1];
        var changes = await GetChanges(source, x => x.RemoveAt(1));

        var change = changes.Single();
        Assert.That(change.Action, Is.EqualTo(NotifyCollectionChangedAction.Remove));
        Assert.That(change.OldStartingIndex, Is.EqualTo(1));
        Assert.That(change.OldItems, Is.EqualTo(new[] { valueToRemove }));
    }

    [Test]
    public async Task AddWithDuplicateItems_1()
    {
        var source = new[] { 9, 9, 9, 1, 2, 3 }.ToList();

        var changes = await GetChanges(source, x => x.Insert(3, 4));

        // Lots of changes here, that's expected with duplicates. Collection result is already verified in GetChanges.
        Assert.That(changes, Is.Not.Empty);
    }

    [Test]
    public async Task AddWithDuplicateItems_2()
    {
        var source = new[] { 9, 1, 2, 3, 4, 5 }.ToList();

        var changes = await GetChanges(source, x => x.Insert(3, 9));

        // Lots of changes here, that's expected with duplicates. Collection result is already verified in GetChanges.
        Assert.That(changes, Is.Not.Empty);
    }

    [Test]
    public async Task RemoveWithDuplicateItems_1()
    {
        var source = new[] { 9, 1, 2, 9, 3, 4, 9 }.ToList();

        var changes = await GetChanges(source, x => x.RemoveAt(3));

        // Lots of changes here, that's expected with duplicates. Collection result is already verified in GetChanges.
        Assert.That(changes, Is.Not.Empty);
    }

    [Test]
    public async Task RemoveWithDuplicateItems_2()
    {
        var source = new[] { 1, 9, 9, 1, 9, 9, 1 }.ToList();

        var changes = await GetChanges(source, x => x.RemoveAt(3));

        // Lots of changes here, that's expected with duplicates. Collection result is already verified in GetChanges.
        Assert.That(changes, Is.Not.Empty);
    }

    [Test]
    public async Task RemoveWithDuplicateItems_3()
    {
        var source = new[] { 9, 9, 9, 9, 1, 2, 3, 4 }.ToList();

        var changes = await GetChanges(source, x => x.RemoveAt(4));

        // Lots of changes here, that's expected with duplicates. Collection result is already verified in GetChanges.
        Assert.That(changes, Is.Not.Empty);
    }

    [Test]
    public async Task ReplaceWithDuplicateItems_1()
    {
        var source = new[] { 1, 9, 9, 1, 9, 9, 1 }.ToList();

        var changes = await GetChanges(source, x => x[4] = 10);

        // Lots of changes here, that's expected with duplicates. Collection result is already verified in GetChanges.
        Assert.That(changes, Is.Not.Empty);
    }

    [Test]
    public async Task ReplaceWithDuplicateItems_2()
    {
        var source = new[] { 1, 9, 9, 4, 9, 9, 1 }.ToList();

        var changes = await GetChanges(source, x => x[3] = 10);

        // Lots of changes here, that's expected with duplicates. Collection result is already verified in GetChanges.
        Assert.That(changes, Is.Not.Empty);
    }

    [Test]
    public async Task RemoveNull()
    {
        var source = new[] { "A", "B", null, "C", null }.ToList();

        var changes = await GetChanges(source, x => x.RemoveAt(2));

        var change = changes.Single();
        Assert.That(change.Action, Is.EqualTo(NotifyCollectionChangedAction.Remove));
        Assert.That(change.OldStartingIndex, Is.EqualTo(2));
        Assert.That(change.OldItems, Is.EqualTo(new string[] { null }));
    }

    [Test]
    public async Task RemoveAllItems()
    {
        var source = new[] { "A", "B", null, "C", null }.ToList();

        var changes = await GetChanges(source, x => x.Clear());

        Assert.That(changes.SelectMany(c => c.OldItems.Cast<string>()), Is.EqualTo(new[] { "A", "B", null, "C", null }));
    }

    [Test]
    public async Task ReplaceAllItems()
    {
        var source = new[] { 1, 2, 3, 4 }.ToList();

        var changes = await GetChanges(source, x =>
        {
            x.Clear();
            x.AddRange(new[] { 5, 6, 7, 8 });
        });

        var removedItems = changes.Where(c => c.OldItems != null).SelectMany(c => c.OldItems.Cast<int>());
        Assert.That(removedItems, Is.EqualTo(new[] { 1, 2, 3, 4 }));

        var addedItems = changes.Where(c => c.NewItems != null).SelectMany(c => c.NewItems.Cast<int>());
        Assert.That(addedItems, Is.EqualTo(new[] { 5, 6, 7, 8 }));
    }

    class TestClass
    {
        public int Value { get; set; }
    }

    private async Task<ObservableCollection<T>> CreateObservableCollection<T>(IEnumerable<T> source)
    {
        var collectionView = await Render<MC.CollectionView>(@<CollectionView ItemsSource="source" />);
        var observableCollection = (ObservableCollection<T>)collectionView.ItemsSource;

        Assert.That(observableCollection, Is.EqualTo(source));

        return observableCollection;
    }

    private async Task<List<NotifyCollectionChangedEventArgs>> GetChanges<T>(List<T> source, Action<List<T>> changeAction)
    {
        var observableCollection = await CreateObservableCollection(source);

        List<NotifyCollectionChangedEventArgs> changes = new();
        observableCollection.CollectionChanged += (_, e) => changes.Add(e);

        changeAction(source);
        StateHasChanged();

        Assert.That(observableCollection, Is.EqualTo(source));

        return changes;
    }
}