// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using System;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// Provides base class and capabilities for all Microsoft.Maui.Controls cells. Cells are elements meant to be added to <see cref="T:Microsoft.Maui.Controls.ListView" /> or <see cref="T:Microsoft.Maui.Controls.TableView" />.
    /// </summary>
    public abstract partial class Cell : Element
    {
        static Cell()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the height of the Cell.
        /// </summary>
        /// <value>
        /// A double that represents the height of the cell.
        /// </value>
        [Parameter] public double? Height { get; set; }
        [Parameter] public bool? IsContextActionsLegacyModeEnabled { get; set; }
        /// <summary>
        /// Gets or sets the IsEnabled state of the Cell.
        /// </summary>
        /// <value>
        /// A bool. Default is <see langword="true" />.
        /// </value>
        [Parameter] public bool? IsEnabled { get; set; }
        /// <summary>
        /// Gets a list of menu items to display when the user performs the device-specific context gesture on the Cell.
        /// </summary>
        /// <value>
        /// The list of menu items that will be displayed when the user performs the device-specific context gesture on the Cell.
        /// </value>
        [Parameter] public RenderFragment ContextActions { get; set; }
        [Parameter] public EventCallback OnAppearing { get; set; }
        [Parameter] public EventCallback OnDisappearing { get; set; }
        [Parameter] public EventCallback OnTapped { get; set; }

        public new MC.Cell NativeControl => (MC.Cell)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Height):
                    if (!Equals(Height, value))
                    {
                        Height = (double?)value;
                        NativeControl.Height = Height ?? default;
                    }
                    break;
                case nameof(IsContextActionsLegacyModeEnabled):
                    if (!Equals(IsContextActionsLegacyModeEnabled, value))
                    {
                        IsContextActionsLegacyModeEnabled = (bool?)value;
                        NativeControl.IsContextActionsLegacyModeEnabled = IsContextActionsLegacyModeEnabled ?? default;
                    }
                    break;
                case nameof(IsEnabled):
                    if (!Equals(IsEnabled, value))
                    {
                        IsEnabled = (bool?)value;
                        NativeControl.IsEnabled = IsEnabled ?? (bool)MC.Cell.IsEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(ContextActions):
                    ContextActions = (RenderFragment)value;
                    break;
                case nameof(OnAppearing):
                    if (!Equals(OnAppearing, value))
                    {
                        void NativeControlAppearing(object sender, EventArgs e) => InvokeEventCallback(OnAppearing);

                        OnAppearing = (EventCallback)value;
                        NativeControl.Appearing -= NativeControlAppearing;
                        NativeControl.Appearing += NativeControlAppearing;
                    }
                    break;
                case nameof(OnDisappearing):
                    if (!Equals(OnDisappearing, value))
                    {
                        void NativeControlDisappearing(object sender, EventArgs e) => InvokeEventCallback(OnDisappearing);

                        OnDisappearing = (EventCallback)value;
                        NativeControl.Disappearing -= NativeControlDisappearing;
                        NativeControl.Disappearing += NativeControlDisappearing;
                    }
                    break;
                case nameof(OnTapped):
                    if (!Equals(OnTapped, value))
                    {
                        void NativeControlTapped(object sender, EventArgs e) => InvokeEventCallback(OnTapped);

                        OnTapped = (EventCallback)value;
                        NativeControl.Tapped -= NativeControlTapped;
                        NativeControl.Tapped += NativeControlTapped;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddListContentProperty<MC.Cell, MC.MenuItem>(builder, sequence++, ContextActions, x => x.ContextActions);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
