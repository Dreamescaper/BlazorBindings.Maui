// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// An element containing a single child, with some framing options.
    /// </summary>
    public partial class Frame : ContentView
    {
        static Frame()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the border color for the frame.
        /// </summary>
        /// <value>
        /// The border color for the frame.
        /// </value>
        [Parameter] public Color BorderColor { get; set; }
        /// <summary>
        /// Gets or sets the corner radius of the frame.
        /// </summary>
        [Parameter] public float? CornerRadius { get; set; }
        /// <summary>
        /// Gets or sets a flag indicating if the Frame has a shadow displayed.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Boolean" /> indicating whether or not the Frame has a shadow. Default is <see langword="true" />.
        /// </value>
        [Parameter] public bool? HasShadow { get; set; }

        public new MC.Frame NativeControl => (MC.Frame)((BindableObject)this).NativeControl;

        protected override MC.Frame CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BorderColor):
                    if (!Equals(BorderColor, value))
                    {
                        BorderColor = (Color)value;
                        NativeControl.BorderColor = BorderColor;
                    }
                    break;
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (float?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (float)MC.Frame.CornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(HasShadow):
                    if (!Equals(HasShadow, value))
                    {
                        HasShadow = (bool?)value;
                        NativeControl.HasShadow = HasShadow ?? (bool)MC.Frame.HasShadowProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
