// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using System;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    public partial class Entry : InputView
    {
        static Entry()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Determines the behavior of the clear text button on this entry.
        /// </summary>
        [Parameter] public ClearButtonVisibility? ClearButtonVisibility { get; set; }
        /// <summary>
        /// Gets or sets the position of the cursor. The value must be more than or equal to 0 and less or equal to the length of <see cref="P:Microsoft.Maui.Controls.InputView.Text" />.
        /// </summary>
        [Parameter] public int? CursorPosition { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the font for the text of this entry is bold, italic, or neither.
        /// </summary>
        [Parameter] public MC.FontAttributes? FontAttributes { get; set; }
        /// <summary>
        /// Determines whether or not the font of this entry should scale automatically according to the operating system settings. Default value is <see langword="true" />.
        /// </summary>
        [Parameter] public bool? FontAutoScalingEnabled { get; set; }
        /// <summary>
        /// Gets or sets the font family for the text of this entry.
        /// </summary>
        [Parameter] public string FontFamily { get; set; }
        /// <summary>
        /// Gets or sets the size of the font for the text of this entry.
        /// </summary>
        [Parameter] public double? FontSize { get; set; }
        /// <summary>
        /// Gets or sets the horizontal text alignment.
        /// </summary>
        [Parameter] public TextAlignment? HorizontalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates if the entry should visually obscure typed text. Value is <see langword="true" /> if the element is a password box; otherwise, <see langword="false" />. Default value is <see langword="false" />.
        /// </summary>
        [Parameter] public bool? IsPassword { get; set; }
        /// <summary>
        /// Determines whether text prediction and automatic text correction is enabled. Default value is <see langword="true" />.
        /// </summary>
        [Parameter] public bool? IsTextPredictionEnabled { get; set; }
        /// <summary>
        /// Determines what the return key on the on-screen keyboard should look like.
        /// </summary>
        [Parameter] public ReturnType? ReturnType { get; set; }
        /// <summary>
        /// Gets or sets the length of the selection. The selection will start at <see cref="P:Microsoft.Maui.Controls.Entry.CursorPosition" />.
        /// </summary>
        [Parameter] public int? SelectionLength { get; set; }
        /// <summary>
        /// Gets or sets the vertical text alignment.
        /// </summary>
        [Parameter] public TextAlignment? VerticalTextAlignment { get; set; }
        [Parameter] public EventCallback OnCompleted { get; set; }

        public new MC.Entry NativeControl => (MC.Entry)((BindableObject)this).NativeControl;

        protected override MC.Entry CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(ClearButtonVisibility):
                    if (!Equals(ClearButtonVisibility, value))
                    {
                        ClearButtonVisibility = (ClearButtonVisibility?)value;
                        NativeControl.ClearButtonVisibility = ClearButtonVisibility ?? (ClearButtonVisibility)MC.Entry.ClearButtonVisibilityProperty.DefaultValue;
                    }
                    break;
                case nameof(CursorPosition):
                    if (!Equals(CursorPosition, value))
                    {
                        CursorPosition = (int?)value;
                        NativeControl.CursorPosition = CursorPosition ?? (int)MC.Entry.CursorPositionProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAttributes):
                    if (!Equals(FontAttributes, value))
                    {
                        FontAttributes = (MC.FontAttributes?)value;
                        NativeControl.FontAttributes = FontAttributes ?? (MC.FontAttributes)MC.Entry.FontAttributesProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAutoScalingEnabled):
                    if (!Equals(FontAutoScalingEnabled, value))
                    {
                        FontAutoScalingEnabled = (bool?)value;
                        NativeControl.FontAutoScalingEnabled = FontAutoScalingEnabled ?? (bool)MC.Entry.FontAutoScalingEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(FontFamily):
                    if (!Equals(FontFamily, value))
                    {
                        FontFamily = (string)value;
                        NativeControl.FontFamily = FontFamily;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (double?)value;
                        NativeControl.FontSize = FontSize ?? (double)MC.Entry.FontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalTextAlignment):
                    if (!Equals(HorizontalTextAlignment, value))
                    {
                        HorizontalTextAlignment = (TextAlignment?)value;
                        NativeControl.HorizontalTextAlignment = HorizontalTextAlignment ?? (TextAlignment)MC.Entry.HorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(IsPassword):
                    if (!Equals(IsPassword, value))
                    {
                        IsPassword = (bool?)value;
                        NativeControl.IsPassword = IsPassword ?? (bool)MC.Entry.IsPasswordProperty.DefaultValue;
                    }
                    break;
                case nameof(IsTextPredictionEnabled):
                    if (!Equals(IsTextPredictionEnabled, value))
                    {
                        IsTextPredictionEnabled = (bool?)value;
                        NativeControl.IsTextPredictionEnabled = IsTextPredictionEnabled ?? (bool)MC.Entry.IsTextPredictionEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(ReturnType):
                    if (!Equals(ReturnType, value))
                    {
                        ReturnType = (ReturnType?)value;
                        NativeControl.ReturnType = ReturnType ?? (ReturnType)MC.Entry.ReturnTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectionLength):
                    if (!Equals(SelectionLength, value))
                    {
                        SelectionLength = (int?)value;
                        NativeControl.SelectionLength = SelectionLength ?? (int)MC.Entry.SelectionLengthProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalTextAlignment):
                    if (!Equals(VerticalTextAlignment, value))
                    {
                        VerticalTextAlignment = (TextAlignment?)value;
                        NativeControl.VerticalTextAlignment = VerticalTextAlignment ?? (TextAlignment)MC.Entry.VerticalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(OnCompleted):
                    if (!Equals(OnCompleted, value))
                    {
                        void NativeControlCompleted(object sender, EventArgs e) => InvokeEventCallback(OnCompleted);

                        OnCompleted = (EventCallback)value;
                        NativeControl.Completed -= NativeControlCompleted;
                        NativeControl.Completed += NativeControlCompleted;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
