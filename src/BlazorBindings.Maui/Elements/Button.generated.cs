// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using System;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    public partial class Button : View
    {
        static Button()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a color that describes the border stroke color of the button.
        /// </summary>
        [Parameter] public Color BorderColor { get; set; }
        /// <summary>
        /// Gets or sets the width of the border, in device-independent units.
        /// </summary>
        [Parameter] public double? BorderWidth { get; set; }
        /// <summary>
        /// Gets or sets the spacing between each of the characters of <see cref="P:Microsoft.Maui.Controls.Button.Text" /> when displayed on the button.
        /// </summary>
        [Parameter] public double? CharacterSpacing { get; set; }
        /// <summary>
        /// Gets or sets the corner radius for the button, in device-independent units.
        /// </summary>
        [Parameter] public int? CornerRadius { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether the font for the text of this button is bold, italic, or neither.
        /// </summary>
        [Parameter] public MC.FontAttributes? FontAttributes { get; set; }
        /// <summary>
        /// Determines whether or not the font of this entry should scale automatically according to the operating system settings. Default value is <see langword="true" />.
        /// </summary>
        [Parameter] public bool? FontAutoScalingEnabled { get; set; }
        /// <summary>
        /// Gets or sets the font family for the text of this entry.
        /// </summary>
        [Parameter] public string FontFamily { get; set; }
        /// <summary>
        /// Gets or sets the size of the font for the text of this entry.
        /// </summary>
        [Parameter] public double? FontSize { get; set; }
        /// <summary>
        /// Allows you to display a bitmap image on the Button.
        /// </summary>
        [Parameter] public MC.ImageSource ImageSource { get; set; }
        /// <summary>
        /// Determines how <see cref="P:Microsoft.Maui.Controls.Button.Text" /> is shown when the length is overflowing the size of this button.
        /// </summary>
        [Parameter] public LineBreakMode? LineBreakMode { get; set; }
        /// <summary>
        /// Gets or sets the padding for the button.
        /// </summary>
        [Parameter] public Thickness? Padding { get; set; }
        /// <summary>
        /// Gets or sets the text displayed as the content of the button. The default value is <see langword="null" />.
        /// </summary>
        [Parameter] public string Text { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Microsoft.Maui.Graphics.Color" /> for the text of the button.
        /// </summary>
        [Parameter] public Color TextColor { get; set; }
        /// <summary>
        /// Applies text transformation to the <see cref="P:Microsoft.Maui.Controls.Button.Text" /> displayed on this button.
        /// </summary>
        [Parameter] public TextTransform? TextTransform { get; set; }
        [Parameter] public EventCallback OnClick { get; set; }
        [Parameter] public EventCallback OnPress { get; set; }
        [Parameter] public EventCallback OnRelease { get; set; }

        public new MC.Button NativeControl => (MC.Button)((BindableObject)this).NativeControl;

        protected override MC.Button CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BorderColor):
                    if (!Equals(BorderColor, value))
                    {
                        BorderColor = (Color)value;
                        NativeControl.BorderColor = BorderColor;
                    }
                    break;
                case nameof(BorderWidth):
                    if (!Equals(BorderWidth, value))
                    {
                        BorderWidth = (double?)value;
                        NativeControl.BorderWidth = BorderWidth ?? (double)MC.Button.BorderWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(CharacterSpacing):
                    if (!Equals(CharacterSpacing, value))
                    {
                        CharacterSpacing = (double?)value;
                        NativeControl.CharacterSpacing = CharacterSpacing ?? (double)MC.Button.CharacterSpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(CornerRadius):
                    if (!Equals(CornerRadius, value))
                    {
                        CornerRadius = (int?)value;
                        NativeControl.CornerRadius = CornerRadius ?? (int)MC.Button.CornerRadiusProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAttributes):
                    if (!Equals(FontAttributes, value))
                    {
                        FontAttributes = (MC.FontAttributes?)value;
                        NativeControl.FontAttributes = FontAttributes ?? (MC.FontAttributes)MC.Button.FontAttributesProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAutoScalingEnabled):
                    if (!Equals(FontAutoScalingEnabled, value))
                    {
                        FontAutoScalingEnabled = (bool?)value;
                        NativeControl.FontAutoScalingEnabled = FontAutoScalingEnabled ?? (bool)MC.Button.FontAutoScalingEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(FontFamily):
                    if (!Equals(FontFamily, value))
                    {
                        FontFamily = (string)value;
                        NativeControl.FontFamily = FontFamily;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (double?)value;
                        NativeControl.FontSize = FontSize ?? (double)MC.Button.FontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(ImageSource):
                    if (!Equals(ImageSource, value))
                    {
                        ImageSource = (MC.ImageSource)value;
                        NativeControl.ImageSource = ImageSource;
                    }
                    break;
                case nameof(LineBreakMode):
                    if (!Equals(LineBreakMode, value))
                    {
                        LineBreakMode = (LineBreakMode?)value;
                        NativeControl.LineBreakMode = LineBreakMode ?? (LineBreakMode)MC.Button.LineBreakModeProperty.DefaultValue;
                    }
                    break;
                case nameof(Padding):
                    if (!Equals(Padding, value))
                    {
                        Padding = (Thickness?)value;
                        NativeControl.Padding = Padding ?? (Thickness)MC.Button.PaddingProperty.DefaultValue;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(TextColor):
                    if (!Equals(TextColor, value))
                    {
                        TextColor = (Color)value;
                        NativeControl.TextColor = TextColor;
                    }
                    break;
                case nameof(TextTransform):
                    if (!Equals(TextTransform, value))
                    {
                        TextTransform = (TextTransform?)value;
                        NativeControl.TextTransform = TextTransform ?? (TextTransform)MC.Button.TextTransformProperty.DefaultValue;
                    }
                    break;
                case nameof(OnClick):
                    if (!Equals(OnClick, value))
                    {
                        void NativeControlClicked(object sender, EventArgs e) => InvokeEventCallback(OnClick);

                        OnClick = (EventCallback)value;
                        NativeControl.Clicked -= NativeControlClicked;
                        NativeControl.Clicked += NativeControlClicked;
                    }
                    break;
                case nameof(OnPress):
                    if (!Equals(OnPress, value))
                    {
                        void NativeControlPressed(object sender, EventArgs e) => InvokeEventCallback(OnPress);

                        OnPress = (EventCallback)value;
                        NativeControl.Pressed -= NativeControlPressed;
                        NativeControl.Pressed += NativeControlPressed;
                    }
                    break;
                case nameof(OnRelease):
                    if (!Equals(OnRelease, value))
                    {
                        void NativeControlReleased(object sender, EventArgs e) => InvokeEventCallback(OnRelease);

                        OnRelease = (EventCallback)value;
                        NativeControl.Released -= NativeControlReleased;
                        NativeControl.Released += NativeControlReleased;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
