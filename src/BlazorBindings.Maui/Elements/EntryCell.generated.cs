// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using System;
using System.ComponentModel;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// A <see cref="T:Microsoft.Maui.Controls.Cell" /> with a label and a single line text entry field.
    /// </summary>
    public partial class EntryCell : Cell
    {
        static EntryCell()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the horizontal alignement of the Text property.
        /// </summary>
        [Parameter] public TextAlignment? HorizontalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets the Keyboard to display while editing the EntryCell.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Keyboard" /> representing the keyboard kind. Default is <see cref="P:Microsoft.Maui.Keyboard.Default" />.
        /// </value>
        [Parameter] public Keyboard Keyboard { get; set; }
        /// <summary>
        /// Gets or sets the fixed text presented next to the Entry in the EntryCell.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.String" />.
        /// </value>
        [Parameter] public string Label { get; set; }
        /// <summary>
        /// Gets or sets the Color used for rendering the Label property.
        /// </summary>
        /// <value>
        /// Default is Color.Default.
        /// </value>
        [Parameter] public Color LabelColor { get; set; }
        /// <summary>
        /// Gets or sets the placeholder text displayed in the Entry when the Text is null or empty.
        /// </summary>
        [Parameter] public string Placeholder { get; set; }
        /// <summary>
        /// Gets or sets the content of the Entry of the EntryCell.
        /// </summary>
        [Parameter] public string Text { get; set; }
        [Parameter] public TextAlignment? VerticalTextAlignment { get; set; }
        [Parameter] public EventCallback<string> TextChanged { get; set; }
        [Parameter] public EventCallback OnCompleted { get; set; }

        public new MC.EntryCell NativeControl => (MC.EntryCell)((BindableObject)this).NativeControl;

        protected override MC.EntryCell CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(HorizontalTextAlignment):
                    if (!Equals(HorizontalTextAlignment, value))
                    {
                        HorizontalTextAlignment = (TextAlignment?)value;
                        NativeControl.HorizontalTextAlignment = HorizontalTextAlignment ?? (TextAlignment)MC.EntryCell.HorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(Keyboard):
                    if (!Equals(Keyboard, value))
                    {
                        Keyboard = (Keyboard)value;
                        NativeControl.Keyboard = Keyboard;
                    }
                    break;
                case nameof(Label):
                    if (!Equals(Label, value))
                    {
                        Label = (string)value;
                        NativeControl.Label = Label;
                    }
                    break;
                case nameof(LabelColor):
                    if (!Equals(LabelColor, value))
                    {
                        LabelColor = (Color)value;
                        NativeControl.LabelColor = LabelColor;
                    }
                    break;
                case nameof(Placeholder):
                    if (!Equals(Placeholder, value))
                    {
                        Placeholder = (string)value;
                        NativeControl.Placeholder = Placeholder;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(VerticalTextAlignment):
                    if (!Equals(VerticalTextAlignment, value))
                    {
                        VerticalTextAlignment = (TextAlignment?)value;
                        NativeControl.VerticalTextAlignment = VerticalTextAlignment ?? (TextAlignment)MC.EntryCell.VerticalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(TextChanged):
                    if (!Equals(TextChanged, value))
                    {
                        void NativeControlPropertyChanged(object sender, PropertyChangedEventArgs e)
                        {
                            if (e.PropertyName == nameof(NativeControl.Text))
                            {
                                var value = NativeControl.Text;
                                Text = value;
                                InvokeEventCallback(TextChanged, value);
                            }
                        }

                        TextChanged = (EventCallback<string>)value;
                        NativeControl.PropertyChanged -= NativeControlPropertyChanged;
                        NativeControl.PropertyChanged += NativeControlPropertyChanged;
                    }
                    break;
                case nameof(OnCompleted):
                    if (!Equals(OnCompleted, value))
                    {
                        void NativeControlCompleted(object sender, EventArgs e) => InvokeEventCallback(OnCompleted);

                        OnCompleted = (EventCallback)value;
                        NativeControl.Completed -= NativeControlCompleted;
                        NativeControl.Completed += NativeControlCompleted;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
