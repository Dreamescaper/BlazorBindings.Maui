// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// Provides drag gesture recognition and defines the associated events for dragging and dropping.
    /// </summary>
    public partial class DragGestureRecognizer : GestureRecognizer
    {
        static DragGestureRecognizer()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the value which indicates whether the element the gesture recognizer is attached to can be a drag source.
        /// </summary>
        [Parameter] public bool? CanDrag { get; set; }
        [Parameter] public EventCallback<MC.DropCompletedEventArgs> OnDropCompleted { get; set; }
        [Parameter] public EventCallback<MC.DragStartingEventArgs> OnDragStarting { get; set; }

        public new MC.DragGestureRecognizer NativeControl => (MC.DragGestureRecognizer)((BindableObject)this).NativeControl;

        protected override MC.DragGestureRecognizer CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CanDrag):
                    if (!Equals(CanDrag, value))
                    {
                        CanDrag = (bool?)value;
                        NativeControl.CanDrag = CanDrag ?? (bool)MC.DragGestureRecognizer.CanDragProperty.DefaultValue;
                    }
                    break;
                case nameof(OnDropCompleted):
                    if (!Equals(OnDropCompleted, value))
                    {
                        void NativeControlDropCompleted(object sender, MC.DropCompletedEventArgs e) => InvokeEventCallback(OnDropCompleted, e);

                        OnDropCompleted = (EventCallback<MC.DropCompletedEventArgs>)value;
                        NativeControl.DropCompleted -= NativeControlDropCompleted;
                        NativeControl.DropCompleted += NativeControlDropCompleted;
                    }
                    break;
                case nameof(OnDragStarting):
                    if (!Equals(OnDragStarting, value))
                    {
                        void NativeControlDragStarting(object sender, MC.DragStartingEventArgs e) => InvokeEventCallback(OnDragStarting, e);

                        OnDragStarting = (EventCallback<MC.DragStartingEventArgs>)value;
                        NativeControl.DragStarting -= NativeControlDragStarting;
                        NativeControl.DragStarting += NativeControlDragStarting;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
