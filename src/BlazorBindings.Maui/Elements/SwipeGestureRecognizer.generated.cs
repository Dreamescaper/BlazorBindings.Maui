// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// Recognizer for swipe gestures.
    /// </summary>
    public partial class SwipeGestureRecognizer : GestureRecognizer
    {
        static SwipeGestureRecognizer()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the direction of swipes to recognize.
        /// </summary>
        /// <value>
        /// The direction of swipes to recognize.
        /// </value>
        [Parameter] public SwipeDirection? Direction { get; set; }
        /// <summary>
        /// Gets or sets the minimum swipe distance that will cause the gesture to be recognized.
        /// </summary>
        /// <value>
        /// The minimum swipe distance that will cause the gesture to be recognized.
        /// </value>
        [Parameter] public uint? Threshold { get; set; }
        [Parameter] public EventCallback<MC.SwipedEventArgs> OnSwiped { get; set; }

        public new MC.SwipeGestureRecognizer NativeControl => (MC.SwipeGestureRecognizer)((BindableObject)this).NativeControl;

        protected override MC.SwipeGestureRecognizer CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Direction):
                    if (!Equals(Direction, value))
                    {
                        Direction = (SwipeDirection?)value;
                        NativeControl.Direction = Direction ?? (SwipeDirection)MC.SwipeGestureRecognizer.DirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(Threshold):
                    if (!Equals(Threshold, value))
                    {
                        Threshold = (uint?)value;
                        NativeControl.Threshold = Threshold ?? (uint)MC.SwipeGestureRecognizer.ThresholdProperty.DefaultValue;
                    }
                    break;
                case nameof(OnSwiped):
                    if (!Equals(OnSwiped, value))
                    {
                        void NativeControlSwiped(object sender, MC.SwipedEventArgs e) => InvokeEventCallback(OnSwiped, e);

                        OnSwiped = (EventCallback<MC.SwipedEventArgs>)value;
                        NativeControl.Swiped -= NativeControlSwiped;
                        NativeControl.Swiped += NativeControlSwiped;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
