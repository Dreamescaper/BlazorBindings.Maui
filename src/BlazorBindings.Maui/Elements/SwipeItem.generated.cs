// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Graphics;
using System;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    public partial class SwipeItem : MenuItem
    {
        static SwipeItem()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public Color BackgroundColor { get; set; }
        [Parameter] public bool? IsVisible { get; set; }
        [Parameter] public EventCallback OnInvoked { get; set; }

        public new MC.SwipeItem NativeControl => (MC.SwipeItem)((BindableObject)this).NativeControl;

        protected override MC.SwipeItem CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BackgroundColor):
                    if (!Equals(BackgroundColor, value))
                    {
                        BackgroundColor = (Color)value;
                        NativeControl.BackgroundColor = BackgroundColor;
                    }
                    break;
                case nameof(IsVisible):
                    if (!Equals(IsVisible, value))
                    {
                        IsVisible = (bool?)value;
                        NativeControl.IsVisible = IsVisible ?? (bool)MC.SwipeItem.IsVisibleProperty.DefaultValue;
                    }
                    break;
                case nameof(OnInvoked):
                    if (!Equals(OnInvoked, value))
                    {
                        void NativeControlInvoked(object sender, EventArgs e) => InvokeEventCallback(OnInvoked);

                        OnInvoked = (EventCallback)value;
                        NativeControl.Invoked -= NativeControlInvoked;
                        NativeControl.Invoked += NativeControlInvoked;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
