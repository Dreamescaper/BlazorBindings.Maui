// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// Provides pointer gesture recognition and events.
    /// </summary>
    public partial class PointerGestureRecognizer : GestureRecognizer
    {
        static PointerGestureRecognizer()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Raised when the pointer enters the view.
        /// </summary>
        [Parameter] public EventCallback<MC.PointerEventArgs> OnPointerEntered { get; set; }
        /// <summary>
        /// Raised when the pointer exits the view.
        /// </summary>
        [Parameter] public EventCallback<MC.PointerEventArgs> OnPointerExited { get; set; }
        /// <summary>
        /// Raised when the pointer moves within the view.
        /// </summary>
        [Parameter] public EventCallback<MC.PointerEventArgs> OnPointerMoved { get; set; }
        /// <summary>
        /// Raised when the pointer initiates a press within the view.
        /// </summary>
        [Parameter] public EventCallback<MC.PointerEventArgs> OnPointerPressed { get; set; }
        /// <summary>
        /// Raised when the pointer that has previous initiated a press is released within the view.
        /// </summary>
        [Parameter] public EventCallback<MC.PointerEventArgs> OnPointerReleased { get; set; }

        public new MC.PointerGestureRecognizer NativeControl => (MC.PointerGestureRecognizer)((BindableObject)this).NativeControl;

        protected override MC.PointerGestureRecognizer CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(OnPointerEntered):
                    if (!Equals(OnPointerEntered, value))
                    {
                        void NativeControlPointerEntered(object sender, MC.PointerEventArgs e) => InvokeEventCallback(OnPointerEntered, e);

                        OnPointerEntered = (EventCallback<MC.PointerEventArgs>)value;
                        NativeControl.PointerEntered -= NativeControlPointerEntered;
                        NativeControl.PointerEntered += NativeControlPointerEntered;
                    }
                    break;
                case nameof(OnPointerExited):
                    if (!Equals(OnPointerExited, value))
                    {
                        void NativeControlPointerExited(object sender, MC.PointerEventArgs e) => InvokeEventCallback(OnPointerExited, e);

                        OnPointerExited = (EventCallback<MC.PointerEventArgs>)value;
                        NativeControl.PointerExited -= NativeControlPointerExited;
                        NativeControl.PointerExited += NativeControlPointerExited;
                    }
                    break;
                case nameof(OnPointerMoved):
                    if (!Equals(OnPointerMoved, value))
                    {
                        void NativeControlPointerMoved(object sender, MC.PointerEventArgs e) => InvokeEventCallback(OnPointerMoved, e);

                        OnPointerMoved = (EventCallback<MC.PointerEventArgs>)value;
                        NativeControl.PointerMoved -= NativeControlPointerMoved;
                        NativeControl.PointerMoved += NativeControlPointerMoved;
                    }
                    break;
                case nameof(OnPointerPressed):
                    if (!Equals(OnPointerPressed, value))
                    {
                        void NativeControlPointerPressed(object sender, MC.PointerEventArgs e) => InvokeEventCallback(OnPointerPressed, e);

                        OnPointerPressed = (EventCallback<MC.PointerEventArgs>)value;
                        NativeControl.PointerPressed -= NativeControlPointerPressed;
                        NativeControl.PointerPressed += NativeControlPointerPressed;
                    }
                    break;
                case nameof(OnPointerReleased):
                    if (!Equals(OnPointerReleased, value))
                    {
                        void NativeControlPointerReleased(object sender, MC.PointerEventArgs e) => InvokeEventCallback(OnPointerReleased, e);

                        OnPointerReleased = (EventCallback<MC.PointerEventArgs>)value;
                        NativeControl.PointerReleased -= NativeControlPointerReleased;
                        NativeControl.PointerReleased += NativeControlPointerReleased;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
