// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements.Handlers;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using System.ComponentModel;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    public partial class IndicatorView : TemplatedView
    {
        static IndicatorView()
        {
            ElementHandlerRegistry.RegisterPropertyContentHandler<IndicatorView>(nameof(IndicatorTemplate),
                (renderer, parent, component) => new DataTemplatePropertyHandler<MC.IndicatorView>(component,
                    (x, dataTemplate) => x.IndicatorTemplate = dataTemplate));
            RegisterAdditionalHandlers();
        }

        [Parameter] public int? Count { get; set; }
        [Parameter] public bool? HideSingle { get; set; }
        [Parameter] public Color IndicatorColor { get; set; }
        [Parameter] public double? IndicatorSize { get; set; }
        [Parameter] public MC.IndicatorShape? IndicatorsShape { get; set; }
        [Parameter] public int? MaximumVisible { get; set; }
        [Parameter] public int? Position { get; set; }
        [Parameter] public Color SelectedIndicatorColor { get; set; }
        [Parameter] public RenderFragment IndicatorTemplate { get; set; }
        [Parameter] public EventCallback<int> PositionChanged { get; set; }

        public new MC.IndicatorView NativeControl => (MC.IndicatorView)((BindableObject)this).NativeControl;

        protected override MC.IndicatorView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Count):
                    if (!Equals(Count, value))
                    {
                        Count = (int?)value;
                        NativeControl.Count = Count ?? (int)MC.IndicatorView.CountProperty.DefaultValue;
                    }
                    break;
                case nameof(HideSingle):
                    if (!Equals(HideSingle, value))
                    {
                        HideSingle = (bool?)value;
                        NativeControl.HideSingle = HideSingle ?? (bool)MC.IndicatorView.HideSingleProperty.DefaultValue;
                    }
                    break;
                case nameof(IndicatorColor):
                    if (!Equals(IndicatorColor, value))
                    {
                        IndicatorColor = (Color)value;
                        NativeControl.IndicatorColor = IndicatorColor;
                    }
                    break;
                case nameof(IndicatorSize):
                    if (!Equals(IndicatorSize, value))
                    {
                        IndicatorSize = (double?)value;
                        NativeControl.IndicatorSize = IndicatorSize ?? (double)MC.IndicatorView.IndicatorSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(IndicatorsShape):
                    if (!Equals(IndicatorsShape, value))
                    {
                        IndicatorsShape = (MC.IndicatorShape?)value;
                        NativeControl.IndicatorsShape = IndicatorsShape ?? (MC.IndicatorShape)MC.IndicatorView.IndicatorsShapeProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumVisible):
                    if (!Equals(MaximumVisible, value))
                    {
                        MaximumVisible = (int?)value;
                        NativeControl.MaximumVisible = MaximumVisible ?? (int)MC.IndicatorView.MaximumVisibleProperty.DefaultValue;
                    }
                    break;
                case nameof(Position):
                    if (!Equals(Position, value))
                    {
                        Position = (int?)value;
                        NativeControl.Position = Position ?? (int)MC.IndicatorView.PositionProperty.DefaultValue;
                    }
                    break;
                case nameof(SelectedIndicatorColor):
                    if (!Equals(SelectedIndicatorColor, value))
                    {
                        SelectedIndicatorColor = (Color)value;
                        NativeControl.SelectedIndicatorColor = SelectedIndicatorColor;
                    }
                    break;
                case nameof(IndicatorTemplate):
                    IndicatorTemplate = (RenderFragment)value;
                    break;
                case nameof(PositionChanged):
                    if (!Equals(PositionChanged, value))
                    {
                        void NativeControlPropertyChanged(object sender, PropertyChangedEventArgs e)
                        {
                            if (e.PropertyName == nameof(NativeControl.Position))
                            {
                                var value = NativeControl.Position;
                                Position = value;
                                InvokeEventCallback(PositionChanged, value);
                            }
                        }

                        PositionChanged = (EventCallback<int>)value;
                        NativeControl.PropertyChanged -= NativeControlPropertyChanged;
                        NativeControl.PropertyChanged += NativeControlPropertyChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddDataTemplateProperty(builder, sequence++, typeof(IndicatorView), IndicatorTemplate);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
