// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    public abstract partial class Element : BindableObject
    {
        static Element()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public string AutomationId { get; set; }
        [Parameter] public string ClassId { get; set; }
        [Parameter] public string StyleId { get; set; }

        public new MC.Element NativeControl => (MC.Element)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AutomationId):
                    if (!Equals(AutomationId, value))
                    {
                        AutomationId = (string)value;
                        NativeControl.AutomationId = AutomationId;
                    }
                    break;
                case nameof(ClassId):
                    if (!Equals(ClassId, value))
                    {
                        ClassId = (string)value;
                        NativeControl.ClassId = ClassId;
                    }
                    break;
                case nameof(StyleId):
                    if (!Equals(StyleId, value))
                    {
                        StyleId = (string)value;
                        NativeControl.StyleId = StyleId;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
