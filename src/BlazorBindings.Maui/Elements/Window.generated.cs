// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements
{
    public partial class Window : NavigableElement
    {
        static Window()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public FlowDirection? FlowDirection { get; set; }
        [Parameter] public double? Height { get; set; }
        [Parameter] public double? MaximumHeight { get; set; }
        [Parameter] public double? MaximumWidth { get; set; }
        [Parameter] public double? MinimumHeight { get; set; }
        [Parameter] public double? MinimumWidth { get; set; }
        [Parameter] public string Title { get; set; }
        [Parameter] public double? Width { get; set; }
        [Parameter] public double? X { get; set; }
        [Parameter] public double? Y { get; set; }
        [Parameter] public RenderFragment ChildContent { get; set; }
        [Parameter] public EventCallback OnSizeChanged { get; set; }
        [Parameter] public EventCallback<MC.ModalPoppedEventArgs> OnModalPopped { get; set; }
        [Parameter] public EventCallback<MC.ModalPoppingEventArgs> OnModalPopping { get; set; }
        [Parameter] public EventCallback<MC.ModalPushedEventArgs> OnModalPushed { get; set; }
        [Parameter] public EventCallback<MC.ModalPushingEventArgs> OnModalPushing { get; set; }
        [Parameter] public EventCallback OnPopCanceled { get; set; }
        [Parameter] public EventCallback OnCreated { get; set; }
        [Parameter] public EventCallback OnResumed { get; set; }
        [Parameter] public EventCallback OnActivated { get; set; }
        [Parameter] public EventCallback OnDeactivated { get; set; }
        [Parameter] public EventCallback OnStopped { get; set; }
        [Parameter] public EventCallback OnDestroying { get; set; }
        [Parameter] public EventCallback<MC.BackgroundingEventArgs> OnBackgrounding { get; set; }
        [Parameter] public EventCallback<MC.DisplayDensityChangedEventArgs> OnDisplayDensityChanged { get; set; }

        public new MC.Window NativeControl => (MC.Window)((BindableObject)this).NativeControl;

        protected override MC.Window CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(FlowDirection):
                    if (!Equals(FlowDirection, value))
                    {
                        FlowDirection = (FlowDirection?)value;
                        NativeControl.FlowDirection = FlowDirection ?? (FlowDirection)MC.Window.FlowDirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(Height):
                    if (!Equals(Height, value))
                    {
                        Height = (double?)value;
                        NativeControl.Height = Height ?? (double)MC.Window.HeightProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumHeight):
                    if (!Equals(MaximumHeight, value))
                    {
                        MaximumHeight = (double?)value;
                        NativeControl.MaximumHeight = MaximumHeight ?? (double)MC.Window.MaximumHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumWidth):
                    if (!Equals(MaximumWidth, value))
                    {
                        MaximumWidth = (double?)value;
                        NativeControl.MaximumWidth = MaximumWidth ?? (double)MC.Window.MaximumWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(MinimumHeight):
                    if (!Equals(MinimumHeight, value))
                    {
                        MinimumHeight = (double?)value;
                        NativeControl.MinimumHeight = MinimumHeight ?? (double)MC.Window.MinimumHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(MinimumWidth):
                    if (!Equals(MinimumWidth, value))
                    {
                        MinimumWidth = (double?)value;
                        NativeControl.MinimumWidth = MinimumWidth ?? (double)MC.Window.MinimumWidthProperty.DefaultValue;
                    }
                    break;
                case nameof(Title):
                    if (!Equals(Title, value))
                    {
                        Title = (string)value;
                        NativeControl.Title = Title;
                    }
                    break;
                case nameof(Width):
                    if (!Equals(Width, value))
                    {
                        Width = (double?)value;
                        NativeControl.Width = Width ?? (double)MC.Window.WidthProperty.DefaultValue;
                    }
                    break;
                case nameof(X):
                    if (!Equals(X, value))
                    {
                        X = (double?)value;
                        NativeControl.X = X ?? (double)MC.Window.XProperty.DefaultValue;
                    }
                    break;
                case nameof(Y):
                    if (!Equals(Y, value))
                    {
                        Y = (double?)value;
                        NativeControl.Y = Y ?? (double)MC.Window.YProperty.DefaultValue;
                    }
                    break;
                case nameof(ChildContent):
                    ChildContent = (RenderFragment)value;
                    break;
                case nameof(OnSizeChanged):
                    if (!Equals(OnSizeChanged, value))
                    {
                        void NativeControlSizeChanged(object sender, EventArgs e) => InvokeEventCallback(OnSizeChanged);

                        OnSizeChanged = (EventCallback)value;
                        NativeControl.SizeChanged -= NativeControlSizeChanged;
                        NativeControl.SizeChanged += NativeControlSizeChanged;
                    }
                    break;
                case nameof(OnModalPopped):
                    if (!Equals(OnModalPopped, value))
                    {
                        void NativeControlModalPopped(object sender, MC.ModalPoppedEventArgs e) => InvokeEventCallback(OnModalPopped, e);

                        OnModalPopped = (EventCallback<MC.ModalPoppedEventArgs>)value;
                        NativeControl.ModalPopped -= NativeControlModalPopped;
                        NativeControl.ModalPopped += NativeControlModalPopped;
                    }
                    break;
                case nameof(OnModalPopping):
                    if (!Equals(OnModalPopping, value))
                    {
                        void NativeControlModalPopping(object sender, MC.ModalPoppingEventArgs e) => InvokeEventCallback(OnModalPopping, e);

                        OnModalPopping = (EventCallback<MC.ModalPoppingEventArgs>)value;
                        NativeControl.ModalPopping -= NativeControlModalPopping;
                        NativeControl.ModalPopping += NativeControlModalPopping;
                    }
                    break;
                case nameof(OnModalPushed):
                    if (!Equals(OnModalPushed, value))
                    {
                        void NativeControlModalPushed(object sender, MC.ModalPushedEventArgs e) => InvokeEventCallback(OnModalPushed, e);

                        OnModalPushed = (EventCallback<MC.ModalPushedEventArgs>)value;
                        NativeControl.ModalPushed -= NativeControlModalPushed;
                        NativeControl.ModalPushed += NativeControlModalPushed;
                    }
                    break;
                case nameof(OnModalPushing):
                    if (!Equals(OnModalPushing, value))
                    {
                        void NativeControlModalPushing(object sender, MC.ModalPushingEventArgs e) => InvokeEventCallback(OnModalPushing, e);

                        OnModalPushing = (EventCallback<MC.ModalPushingEventArgs>)value;
                        NativeControl.ModalPushing -= NativeControlModalPushing;
                        NativeControl.ModalPushing += NativeControlModalPushing;
                    }
                    break;
                case nameof(OnPopCanceled):
                    if (!Equals(OnPopCanceled, value))
                    {
                        void NativeControlPopCanceled(object sender, EventArgs e) => InvokeEventCallback(OnPopCanceled);

                        OnPopCanceled = (EventCallback)value;
                        NativeControl.PopCanceled -= NativeControlPopCanceled;
                        NativeControl.PopCanceled += NativeControlPopCanceled;
                    }
                    break;
                case nameof(OnCreated):
                    if (!Equals(OnCreated, value))
                    {
                        void NativeControlCreated(object sender, EventArgs e) => InvokeEventCallback(OnCreated);

                        OnCreated = (EventCallback)value;
                        NativeControl.Created -= NativeControlCreated;
                        NativeControl.Created += NativeControlCreated;
                    }
                    break;
                case nameof(OnResumed):
                    if (!Equals(OnResumed, value))
                    {
                        void NativeControlResumed(object sender, EventArgs e) => InvokeEventCallback(OnResumed);

                        OnResumed = (EventCallback)value;
                        NativeControl.Resumed -= NativeControlResumed;
                        NativeControl.Resumed += NativeControlResumed;
                    }
                    break;
                case nameof(OnActivated):
                    if (!Equals(OnActivated, value))
                    {
                        void NativeControlActivated(object sender, EventArgs e) => InvokeEventCallback(OnActivated);

                        OnActivated = (EventCallback)value;
                        NativeControl.Activated -= NativeControlActivated;
                        NativeControl.Activated += NativeControlActivated;
                    }
                    break;
                case nameof(OnDeactivated):
                    if (!Equals(OnDeactivated, value))
                    {
                        void NativeControlDeactivated(object sender, EventArgs e) => InvokeEventCallback(OnDeactivated);

                        OnDeactivated = (EventCallback)value;
                        NativeControl.Deactivated -= NativeControlDeactivated;
                        NativeControl.Deactivated += NativeControlDeactivated;
                    }
                    break;
                case nameof(OnStopped):
                    if (!Equals(OnStopped, value))
                    {
                        void NativeControlStopped(object sender, EventArgs e) => InvokeEventCallback(OnStopped);

                        OnStopped = (EventCallback)value;
                        NativeControl.Stopped -= NativeControlStopped;
                        NativeControl.Stopped += NativeControlStopped;
                    }
                    break;
                case nameof(OnDestroying):
                    if (!Equals(OnDestroying, value))
                    {
                        void NativeControlDestroying(object sender, EventArgs e) => InvokeEventCallback(OnDestroying);

                        OnDestroying = (EventCallback)value;
                        NativeControl.Destroying -= NativeControlDestroying;
                        NativeControl.Destroying += NativeControlDestroying;
                    }
                    break;
                case nameof(OnBackgrounding):
                    if (!Equals(OnBackgrounding, value))
                    {
                        void NativeControlBackgrounding(object sender, MC.BackgroundingEventArgs e) => InvokeEventCallback(OnBackgrounding, e);

                        OnBackgrounding = (EventCallback<MC.BackgroundingEventArgs>)value;
                        NativeControl.Backgrounding -= NativeControlBackgrounding;
                        NativeControl.Backgrounding += NativeControlBackgrounding;
                    }
                    break;
                case nameof(OnDisplayDensityChanged):
                    if (!Equals(OnDisplayDensityChanged, value))
                    {
                        void NativeControlDisplayDensityChanged(object sender, MC.DisplayDensityChangedEventArgs e) => InvokeEventCallback(OnDisplayDensityChanged, e);

                        OnDisplayDensityChanged = (EventCallback<MC.DisplayDensityChangedEventArgs>)value;
                        NativeControl.DisplayDensityChanged -= NativeControlDisplayDensityChanged;
                        NativeControl.DisplayDensityChanged += NativeControlDisplayDensityChanged;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<MC.Window>(builder, sequence++, ChildContent, (x, value) => x.Page = (MC.Page)value);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
