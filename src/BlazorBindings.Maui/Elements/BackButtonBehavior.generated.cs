// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    public partial class BackButtonBehavior : BindableObject
    {
        static BackButtonBehavior()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public MC.ImageSource IconOverride { get; set; }
        [Parameter] public bool? IsEnabled { get; set; }
        [Parameter] public bool? IsVisible { get; set; }
        [Parameter] public string TextOverride { get; set; }

        public new MC.BackButtonBehavior NativeControl => (MC.BackButtonBehavior)((BindableObject)this).NativeControl;

        protected override MC.BackButtonBehavior CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(IconOverride):
                    if (!Equals(IconOverride, value))
                    {
                        IconOverride = (MC.ImageSource)value;
                        NativeControl.IconOverride = IconOverride;
                    }
                    break;
                case nameof(IsEnabled):
                    if (!Equals(IsEnabled, value))
                    {
                        IsEnabled = (bool?)value;
                        NativeControl.IsEnabled = IsEnabled ?? (bool)MC.BackButtonBehavior.IsEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(IsVisible):
                    if (!Equals(IsVisible, value))
                    {
                        IsVisible = (bool?)value;
                        NativeControl.IsVisible = IsVisible ?? (bool)MC.BackButtonBehavior.IsVisibleProperty.DefaultValue;
                    }
                    break;
                case nameof(TextOverride):
                    if (!Equals(TextOverride, value))
                    {
                        TextOverride = (string)value;
                        NativeControl.TextOverride = TextOverride;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
