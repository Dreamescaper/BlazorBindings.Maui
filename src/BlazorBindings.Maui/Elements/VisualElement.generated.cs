// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui;
using Microsoft.Maui.Controls.Shapes;
using Microsoft.Maui.Graphics;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// An <see cref="T:Microsoft.Maui.Controls.Element" /> that occupies an area on the screen, has a visual appearance, and can obtain touch input.
    /// </summary>
    public abstract partial class VisualElement : NavigableElement
    {
        static VisualElement()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the X component of the center point for any transform operation, relative to the bounds of the element.
        /// </summary>
        [Parameter] public double? AnchorX { get; set; }
        /// <summary>
        /// Gets or sets the Y component of the center point for any transform operation, relative to the bounds of the element.
        /// </summary>
        [Parameter] public double? AnchorY { get; set; }
        /// <summary>
        /// Gets or sets the layout flow direction.
        /// </summary>
        [Parameter] public FlowDirection? FlowDirection { get; set; }
        /// <summary>
        /// Gets or sets the frame this element resides in on screen.
        /// </summary>
        [Parameter] public Rect? Frame { get; set; }
        /// <summary>
        /// Gets or sets the desired height override of this element.
        /// </summary>
        [Parameter] public double? HeightRequest { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether this element responds to hit testing during user interaction.
        /// </summary>
        [Parameter] public bool? InputTransparent { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether this element is enabled in the user interface.
        /// </summary>
        [Parameter] public bool? IsEnabled { get; set; }
        /// <summary>
        /// Gets or sets a value that determines whether this element will be visible on screen and take up space in layouts.
        /// </summary>
        [Parameter] public bool? IsVisible { get; set; }
        /// <summary>
        /// Gets or sets the maximum height the element will request during layout.
        /// </summary>
        [Parameter] public double? MaximumHeightRequest { get; set; }
        /// <summary>
        /// Gets or sets the maximum width the element will request during layout.
        /// </summary>
        [Parameter] public double? MaximumWidthRequest { get; set; }
        /// <summary>
        /// Gets or sets the minimum height the element will request during layout.
        /// </summary>
        [Parameter] public double? MinimumHeightRequest { get; set; }
        /// <summary>
        /// Gets or sets the minimum width the element will request during layout.
        /// </summary>
        [Parameter] public double? MinimumWidthRequest { get; set; }
        /// <summary>
        /// Gets or sets the opacity value applied to the element when it is rendered. The range of this value is 0 to 1; values outside this range will be set to the nearest valid value.
        /// </summary>
        [Parameter] public double? Opacity { get; set; }
        /// <summary>
        /// Gets or sets the local resource dictionary.
        /// </summary>
        [Parameter] public MC.ResourceDictionary Resources { get; set; }
        /// <summary>
        /// Gets or sets the rotation (in degrees) about the Z-axis (affine rotation) when the element is rendered.
        /// </summary>
        [Parameter] public double? Rotation { get; set; }
        /// <summary>
        /// Gets or sets the rotation (in degrees) about the X-axis (perspective rotation) when the element is rendered.
        /// </summary>
        [Parameter] public double? RotationX { get; set; }
        /// <summary>
        /// Gets or sets the rotation (in degrees) about the Y-axis (perspective rotation) when the element is rendered.
        /// </summary>
        [Parameter] public double? RotationY { get; set; }
        /// <summary>
        /// Gets or sets the scale factor applied to the element.
        /// </summary>
        [Parameter] public double? Scale { get; set; }
        /// <summary>
        /// Gets or sets a scale value to apply to the X direction.
        /// </summary>
        [Parameter] public double? ScaleX { get; set; }
        /// <summary>
        /// Gets or sets a scale value to apply to the Y direction.
        /// </summary>
        [Parameter] public double? ScaleY { get; set; }
        /// <summary>
        /// Gets or sets the X translation delta of the element.
        /// </summary>
        [Parameter] public double? TranslationX { get; set; }
        /// <summary>
        /// Gets or sets the Y translation delta of the element.
        /// </summary>
        [Parameter] public double? TranslationY { get; set; }
        /// <summary>
        /// Gets or sets the desired width override of this element.
        /// </summary>
        [Parameter] public double? WidthRequest { get; set; }
        /// <summary>
        /// Gets or sets the front-to-back z-index of an element within a layout.
        /// </summary>
        [Parameter] public int? ZIndex { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Microsoft.Maui.Controls.Brush" /> which will be used to fill the background of an element.
        /// </summary>
        [Parameter] public RenderFragment Background { get; set; }
        /// <summary>
        /// Gets the list of <see cref="T:Microsoft.Maui.Controls.Behavior" /> objects associated to this element. This is a read-only bindable property.
        /// </summary>
        [Parameter] public RenderFragment Behaviors { get; set; }
        /// <summary>
        /// Specifies the clipping region for an element.
        /// </summary>
        [Parameter] public RenderFragment Clip { get; set; }
        /// <summary>
        /// Gets or sets the shadow effect cast by the element.
        /// </summary>
        [Parameter] public RenderFragment Shadow { get; set; }
        /// <summary>
        /// Gets the list of <see cref="T:Microsoft.Maui.Controls.TriggerBase" /> objects associated to this element. This is a read-only bindable property.
        /// </summary>
        [Parameter] public RenderFragment Triggers { get; set; }
        [Parameter] public EventCallback OnChildrenReordered { get; set; }
        [Parameter] public EventCallback<MC.FocusEventArgs> OnFocused { get; set; }
        [Parameter] public EventCallback OnMeasureInvalidated { get; set; }
        [Parameter] public EventCallback OnSizeChanged { get; set; }
        [Parameter] public EventCallback<MC.FocusEventArgs> OnUnfocused { get; set; }
        [Parameter] public EventCallback OnLoaded { get; set; }
        [Parameter] public EventCallback OnUnloaded { get; set; }

        public new MC.VisualElement NativeControl => (MC.VisualElement)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(AnchorX):
                    if (!Equals(AnchorX, value))
                    {
                        AnchorX = (double?)value;
                        NativeControl.AnchorX = AnchorX ?? (double)MC.VisualElement.AnchorXProperty.DefaultValue;
                    }
                    break;
                case nameof(AnchorY):
                    if (!Equals(AnchorY, value))
                    {
                        AnchorY = (double?)value;
                        NativeControl.AnchorY = AnchorY ?? (double)MC.VisualElement.AnchorYProperty.DefaultValue;
                    }
                    break;
                case nameof(FlowDirection):
                    if (!Equals(FlowDirection, value))
                    {
                        FlowDirection = (FlowDirection?)value;
                        NativeControl.FlowDirection = FlowDirection ?? (FlowDirection)MC.VisualElement.FlowDirectionProperty.DefaultValue;
                    }
                    break;
                case nameof(Frame):
                    if (!Equals(Frame, value))
                    {
                        Frame = (Rect?)value;
                        NativeControl.Frame = Frame ?? default;
                    }
                    break;
                case nameof(HeightRequest):
                    if (!Equals(HeightRequest, value))
                    {
                        HeightRequest = (double?)value;
                        NativeControl.HeightRequest = HeightRequest ?? (double)MC.VisualElement.HeightRequestProperty.DefaultValue;
                    }
                    break;
                case nameof(InputTransparent):
                    if (!Equals(InputTransparent, value))
                    {
                        InputTransparent = (bool?)value;
                        NativeControl.InputTransparent = InputTransparent ?? (bool)MC.VisualElement.InputTransparentProperty.DefaultValue;
                    }
                    break;
                case nameof(IsEnabled):
                    if (!Equals(IsEnabled, value))
                    {
                        IsEnabled = (bool?)value;
                        NativeControl.IsEnabled = IsEnabled ?? (bool)MC.VisualElement.IsEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(IsVisible):
                    if (!Equals(IsVisible, value))
                    {
                        IsVisible = (bool?)value;
                        NativeControl.IsVisible = IsVisible ?? (bool)MC.VisualElement.IsVisibleProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumHeightRequest):
                    if (!Equals(MaximumHeightRequest, value))
                    {
                        MaximumHeightRequest = (double?)value;
                        NativeControl.MaximumHeightRequest = MaximumHeightRequest ?? (double)MC.VisualElement.MaximumHeightRequestProperty.DefaultValue;
                    }
                    break;
                case nameof(MaximumWidthRequest):
                    if (!Equals(MaximumWidthRequest, value))
                    {
                        MaximumWidthRequest = (double?)value;
                        NativeControl.MaximumWidthRequest = MaximumWidthRequest ?? (double)MC.VisualElement.MaximumWidthRequestProperty.DefaultValue;
                    }
                    break;
                case nameof(MinimumHeightRequest):
                    if (!Equals(MinimumHeightRequest, value))
                    {
                        MinimumHeightRequest = (double?)value;
                        NativeControl.MinimumHeightRequest = MinimumHeightRequest ?? (double)MC.VisualElement.MinimumHeightRequestProperty.DefaultValue;
                    }
                    break;
                case nameof(MinimumWidthRequest):
                    if (!Equals(MinimumWidthRequest, value))
                    {
                        MinimumWidthRequest = (double?)value;
                        NativeControl.MinimumWidthRequest = MinimumWidthRequest ?? (double)MC.VisualElement.MinimumWidthRequestProperty.DefaultValue;
                    }
                    break;
                case nameof(Opacity):
                    if (!Equals(Opacity, value))
                    {
                        Opacity = (double?)value;
                        NativeControl.Opacity = Opacity ?? (double)MC.VisualElement.OpacityProperty.DefaultValue;
                    }
                    break;
                case nameof(Resources):
                    if (!Equals(Resources, value))
                    {
                        Resources = (MC.ResourceDictionary)value;
                        NativeControl.Resources = Resources;
                    }
                    break;
                case nameof(Rotation):
                    if (!Equals(Rotation, value))
                    {
                        Rotation = (double?)value;
                        NativeControl.Rotation = Rotation ?? (double)MC.VisualElement.RotationProperty.DefaultValue;
                    }
                    break;
                case nameof(RotationX):
                    if (!Equals(RotationX, value))
                    {
                        RotationX = (double?)value;
                        NativeControl.RotationX = RotationX ?? (double)MC.VisualElement.RotationXProperty.DefaultValue;
                    }
                    break;
                case nameof(RotationY):
                    if (!Equals(RotationY, value))
                    {
                        RotationY = (double?)value;
                        NativeControl.RotationY = RotationY ?? (double)MC.VisualElement.RotationYProperty.DefaultValue;
                    }
                    break;
                case nameof(Scale):
                    if (!Equals(Scale, value))
                    {
                        Scale = (double?)value;
                        NativeControl.Scale = Scale ?? (double)MC.VisualElement.ScaleProperty.DefaultValue;
                    }
                    break;
                case nameof(ScaleX):
                    if (!Equals(ScaleX, value))
                    {
                        ScaleX = (double?)value;
                        NativeControl.ScaleX = ScaleX ?? (double)MC.VisualElement.ScaleXProperty.DefaultValue;
                    }
                    break;
                case nameof(ScaleY):
                    if (!Equals(ScaleY, value))
                    {
                        ScaleY = (double?)value;
                        NativeControl.ScaleY = ScaleY ?? (double)MC.VisualElement.ScaleYProperty.DefaultValue;
                    }
                    break;
                case nameof(TranslationX):
                    if (!Equals(TranslationX, value))
                    {
                        TranslationX = (double?)value;
                        NativeControl.TranslationX = TranslationX ?? (double)MC.VisualElement.TranslationXProperty.DefaultValue;
                    }
                    break;
                case nameof(TranslationY):
                    if (!Equals(TranslationY, value))
                    {
                        TranslationY = (double?)value;
                        NativeControl.TranslationY = TranslationY ?? (double)MC.VisualElement.TranslationYProperty.DefaultValue;
                    }
                    break;
                case nameof(WidthRequest):
                    if (!Equals(WidthRequest, value))
                    {
                        WidthRequest = (double?)value;
                        NativeControl.WidthRequest = WidthRequest ?? (double)MC.VisualElement.WidthRequestProperty.DefaultValue;
                    }
                    break;
                case nameof(ZIndex):
                    if (!Equals(ZIndex, value))
                    {
                        ZIndex = (int?)value;
                        NativeControl.ZIndex = ZIndex ?? (int)MC.VisualElement.ZIndexProperty.DefaultValue;
                    }
                    break;
                case nameof(Background):
                    Background = (RenderFragment)value;
                    break;
                case nameof(Behaviors):
                    Behaviors = (RenderFragment)value;
                    break;
                case nameof(Clip):
                    Clip = (RenderFragment)value;
                    break;
                case nameof(Shadow):
                    Shadow = (RenderFragment)value;
                    break;
                case nameof(Triggers):
                    Triggers = (RenderFragment)value;
                    break;
                case nameof(OnChildrenReordered):
                    if (!Equals(OnChildrenReordered, value))
                    {
                        void NativeControlChildrenReordered(object sender, EventArgs e) => InvokeEventCallback(OnChildrenReordered);

                        OnChildrenReordered = (EventCallback)value;
                        NativeControl.ChildrenReordered -= NativeControlChildrenReordered;
                        NativeControl.ChildrenReordered += NativeControlChildrenReordered;
                    }
                    break;
                case nameof(OnFocused):
                    if (!Equals(OnFocused, value))
                    {
                        void NativeControlFocused(object sender, MC.FocusEventArgs e) => InvokeEventCallback(OnFocused, e);

                        OnFocused = (EventCallback<MC.FocusEventArgs>)value;
                        NativeControl.Focused -= NativeControlFocused;
                        NativeControl.Focused += NativeControlFocused;
                    }
                    break;
                case nameof(OnMeasureInvalidated):
                    if (!Equals(OnMeasureInvalidated, value))
                    {
                        void NativeControlMeasureInvalidated(object sender, EventArgs e) => InvokeEventCallback(OnMeasureInvalidated);

                        OnMeasureInvalidated = (EventCallback)value;
                        NativeControl.MeasureInvalidated -= NativeControlMeasureInvalidated;
                        NativeControl.MeasureInvalidated += NativeControlMeasureInvalidated;
                    }
                    break;
                case nameof(OnSizeChanged):
                    if (!Equals(OnSizeChanged, value))
                    {
                        void NativeControlSizeChanged(object sender, EventArgs e) => InvokeEventCallback(OnSizeChanged);

                        OnSizeChanged = (EventCallback)value;
                        NativeControl.SizeChanged -= NativeControlSizeChanged;
                        NativeControl.SizeChanged += NativeControlSizeChanged;
                    }
                    break;
                case nameof(OnUnfocused):
                    if (!Equals(OnUnfocused, value))
                    {
                        void NativeControlUnfocused(object sender, MC.FocusEventArgs e) => InvokeEventCallback(OnUnfocused, e);

                        OnUnfocused = (EventCallback<MC.FocusEventArgs>)value;
                        NativeControl.Unfocused -= NativeControlUnfocused;
                        NativeControl.Unfocused += NativeControlUnfocused;
                    }
                    break;
                case nameof(OnLoaded):
                    if (!Equals(OnLoaded, value))
                    {
                        void NativeControlLoaded(object sender, EventArgs e) => InvokeEventCallback(OnLoaded);

                        OnLoaded = (EventCallback)value;
                        NativeControl.Loaded -= NativeControlLoaded;
                        NativeControl.Loaded += NativeControlLoaded;
                    }
                    break;
                case nameof(OnUnloaded):
                    if (!Equals(OnUnloaded, value))
                    {
                        void NativeControlUnloaded(object sender, EventArgs e) => InvokeEventCallback(OnUnloaded);

                        OnUnloaded = (EventCallback)value;
                        NativeControl.Unloaded -= NativeControlUnloaded;
                        NativeControl.Unloaded += NativeControlUnloaded;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty<MC.VisualElement>(builder, sequence++, Background, (x, value) => x.Background = (MC.Brush)value);
            RenderTreeBuilderHelper.AddListContentProperty<MC.VisualElement, MC.Behavior>(builder, sequence++, Behaviors, x => x.Behaviors);
            RenderTreeBuilderHelper.AddContentProperty<MC.VisualElement>(builder, sequence++, Clip, (x, value) => x.Clip = (Geometry)value);
            RenderTreeBuilderHelper.AddContentProperty<MC.VisualElement>(builder, sequence++, Shadow, (x, value) => x.Shadow = (MC.Shadow)value);
            RenderTreeBuilderHelper.AddListContentProperty<MC.VisualElement, MC.TriggerBase>(builder, sequence++, Triggers, x => x.Triggers);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
