// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements;
using MC = Microsoft.Maui.Controls;
using MCC = Microsoft.Maui.Controls.Compatibility;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements.Compatibility
{
    /// <summary>
    /// Base class for layouts that allow you to arrange and group UI controls in your application.
    /// </summary>
    public abstract partial class Layout : BlazorBindings.Maui.Elements.View
    {
        static Layout()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that controls whether child elements inherit the input transparency of this layout when the tranparency is <see langword="true" />.
        /// </summary>
        /// <value>
        /// <see langword="true" /> to cause child elements to inherit the input transparency of this layout, when this layout's <see cref="P:Microsoft.Maui.Controls.VisualElement.InputTransparent" /> property is <see langword="true" />. <see langword="false" /> to cause child elements to ignore the input tranparency of this layout.
        /// </value>
        [Parameter] public bool? CascadeInputTransparent { get; set; }
        /// <summary>
        /// Gets or sets a value which determines if the layout should clip its children to its bounds. The default value is <see langword="false" />.
        /// </summary>
        [Parameter] public bool? IsClippedToBounds { get; set; }
        /// <summary>
        /// Gets or sets the inner padding of the layout. The default value is a <see cref="T:Microsoft.Maui.Thickness" /> with all values set to 0.
        /// </summary>
        [Parameter] public Thickness? Padding { get; set; }

        public new MCC.Layout NativeControl => (MCC.Layout)((BindableObject)this).NativeControl;


        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CascadeInputTransparent):
                    if (!Equals(CascadeInputTransparent, value))
                    {
                        CascadeInputTransparent = (bool?)value;
                        NativeControl.CascadeInputTransparent = CascadeInputTransparent ?? (bool)MCC.Layout.CascadeInputTransparentProperty.DefaultValue;
                    }
                    break;
                case nameof(IsClippedToBounds):
                    if (!Equals(IsClippedToBounds, value))
                    {
                        IsClippedToBounds = (bool?)value;
                        NativeControl.IsClippedToBounds = IsClippedToBounds ?? (bool)MCC.Layout.IsClippedToBoundsProperty.DefaultValue;
                    }
                    break;
                case nameof(Padding):
                    if (!Equals(Padding, value))
                    {
                        Padding = (Thickness?)value;
                        NativeControl.Padding = Padding ?? (Thickness)MCC.Layout.PaddingProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
