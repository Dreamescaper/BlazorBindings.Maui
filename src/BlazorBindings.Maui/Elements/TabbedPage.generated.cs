// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using BlazorBindings.Maui.Elements.Handlers;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    public partial class TabbedPage : Page
    {
        static TabbedPage()
        {
            ElementHandlerRegistry.RegisterPropertyContentHandler<TabbedPage>(nameof(BarBackground),
                (renderer, parent, component) => new ContentPropertyHandler<MC.TabbedPage>((x, value) => x.BarBackground = (MC.Brush)value));
            RegisterAdditionalHandlers();
        }

        [Parameter] public Color BarBackgroundColor { get; set; }
        [Parameter] public Color BarTextColor { get; set; }
        [Parameter] public Color SelectedTabColor { get; set; }
        [Parameter] public Color UnselectedTabColor { get; set; }
        [Parameter] public RenderFragment BarBackground { get; set; }

        public new MC.TabbedPage NativeControl => (MC.TabbedPage)((BindableObject)this).NativeControl;

        protected override MC.TabbedPage CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(BarBackgroundColor):
                    if (!Equals(BarBackgroundColor, value))
                    {
                        BarBackgroundColor = (Color)value;
                        NativeControl.BarBackgroundColor = BarBackgroundColor;
                    }
                    break;
                case nameof(BarTextColor):
                    if (!Equals(BarTextColor, value))
                    {
                        BarTextColor = (Color)value;
                        NativeControl.BarTextColor = BarTextColor;
                    }
                    break;
                case nameof(SelectedTabColor):
                    if (!Equals(SelectedTabColor, value))
                    {
                        SelectedTabColor = (Color)value;
                        NativeControl.SelectedTabColor = SelectedTabColor;
                    }
                    break;
                case nameof(UnselectedTabColor):
                    if (!Equals(UnselectedTabColor, value))
                    {
                        UnselectedTabColor = (Color)value;
                        NativeControl.UnselectedTabColor = UnselectedTabColor;
                    }
                    break;
                case nameof(BarBackground):
                    BarBackground = (RenderFragment)value;
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        protected override void RenderAdditionalElementContent(RenderTreeBuilder builder, ref int sequence)
        {
            base.RenderAdditionalElementContent(builder, ref sequence);
            RenderTreeBuilderHelper.AddContentProperty(builder, sequence++, typeof(TabbedPage), BarBackground);
        }

        static partial void RegisterAdditionalHandlers();
    }
}
