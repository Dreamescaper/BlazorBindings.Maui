// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// Represents a shortcut key for a <see cref="T:Microsoft.Maui.Controls.MenuFlyoutItem" />.
    /// </summary>
    public partial class KeyboardAccelerator : BindableObject
    {
        static KeyboardAccelerator()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Identifies the key for the keyboard accelerator.
        /// </summary>
        [Parameter] public string Key { get; set; }
        /// <summary>
        /// Identifies the modifiers for the keyboard accelerator.
        /// </summary>
        [Parameter] public KeyboardAcceleratorModifiers? Modifiers { get; set; }

        public new MC.KeyboardAccelerator NativeControl => (MC.KeyboardAccelerator)((BindableObject)this).NativeControl;

        protected override MC.KeyboardAccelerator CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Key):
                    if (!Equals(Key, value))
                    {
                        Key = (string)value;
                        NativeControl.Key = Key;
                    }
                    break;
                case nameof(Modifiers):
                    if (!Equals(Modifiers, value))
                    {
                        Modifiers = (KeyboardAcceleratorModifiers?)value;
                        NativeControl.Modifiers = Modifiers ?? (KeyboardAcceleratorModifiers)MC.KeyboardAccelerator.ModifiersProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
