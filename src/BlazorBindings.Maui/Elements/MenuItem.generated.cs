// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using System;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// Class that presents a menu item and associates it with a command.
    /// </summary>
    public partial class MenuItem : BaseMenuItem
    {
        static MenuItem()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public string @class { get; set; }
        [Parameter] public MC.ImageSource IconImageSource { get; set; }
        /// <summary>
        /// Gets or sets a value that indicates whether or not the menu item removes its associated UI element.
        /// </summary>
        /// <value>
        /// False
        /// </value>
        [Parameter] public bool? IsDestructive { get; set; }
        /// <summary>
        /// For internal use by the Microsoft.Maui.Controls platform.
        /// </summary>
        [Parameter] public bool? IsEnabled { get; set; }
        /// <summary>
        /// Sets the StyleClass of the generated <see cref="T:Microsoft.Maui.Controls.FlyoutItem" /> when used with <see cref="T:Microsoft.Maui.Controls.Shell" />
        /// </summary>
        [Parameter] public string StyleClass { get; set; }
        /// <summary>
        /// The text of the menu item.
        /// </summary>
        [Parameter] public string Text { get; set; }
        [Parameter] public EventCallback OnClick { get; set; }

        public new MC.MenuItem NativeControl => (MC.MenuItem)((BindableObject)this).NativeControl;

        protected override MC.MenuItem CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(@class):
                    if (!Equals(@class, value))
                    {
                        @class = (string)value;
                        NativeControl.@class = AttributeHelper.GetStringList(@class);
                    }
                    break;
                case nameof(IconImageSource):
                    if (!Equals(IconImageSource, value))
                    {
                        IconImageSource = (MC.ImageSource)value;
                        NativeControl.IconImageSource = IconImageSource;
                    }
                    break;
                case nameof(IsDestructive):
                    if (!Equals(IsDestructive, value))
                    {
                        IsDestructive = (bool?)value;
                        NativeControl.IsDestructive = IsDestructive ?? (bool)MC.MenuItem.IsDestructiveProperty.DefaultValue;
                    }
                    break;
                case nameof(IsEnabled):
                    if (!Equals(IsEnabled, value))
                    {
                        IsEnabled = (bool?)value;
                        NativeControl.IsEnabled = IsEnabled ?? (bool)MC.MenuItem.IsEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(StyleClass):
                    if (!Equals(StyleClass, value))
                    {
                        StyleClass = (string)value;
                        NativeControl.StyleClass = AttributeHelper.GetStringList(StyleClass);
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(OnClick):
                    if (!Equals(OnClick, value))
                    {
                        void NativeControlClicked(object sender, EventArgs e) => InvokeEventCallback(OnClick);

                        OnClick = (EventCallback)value;
                        NativeControl.Clicked -= NativeControlClicked;
                        NativeControl.Clicked += NativeControlClicked;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
