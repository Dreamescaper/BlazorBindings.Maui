// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    public partial class Label : View
    {
        static Label()
        {
            RegisterAdditionalHandlers();
        }

        [Parameter] public double? CharacterSpacing { get; set; }
        /// <summary>
        /// Gets a value that indicates whether the font for the label is bold, italic, or neither.
        /// </summary>
        [Parameter] public MC.FontAttributes? FontAttributes { get; set; }
        [Parameter] public bool? FontAutoScalingEnabled { get; set; }
        /// <summary>
        /// Gets or sets the font family to which the font for the label belongs.
        /// </summary>
        /// <value>
        /// The font family, or null for the platform default font family.
        /// </value>
        [Parameter] public string FontFamily { get; set; }
        /// <summary>
        /// Gets the size of the font for the label.
        /// </summary>
        [Parameter] public double? FontSize { get; set; }
        /// <summary>
        /// Gets or sets the horizontal alignment of the Text property.
        /// </summary>
        [Parameter] public TextAlignment? HorizontalTextAlignment { get; set; }
        /// <summary>
        /// Gets or sets the LineBreakMode for the Label.
        /// </summary>
        /// <value>
        /// The <see cref="T:Microsoft.Maui.LineBreakMode" /> value for the Label. The default is <see cref="F:Microsoft.Maui.LineBreakMode.WordWrap" />
        /// </value>
        [Parameter] public LineBreakMode? LineBreakMode { get; set; }
        /// <summary>
        /// Gets or sets the multiplier to apply to the default line height when displaying text.
        /// </summary>
        /// <value>
        /// The multiplier to apply to the default line height when displaying text.
        /// </value>
        [Parameter] public double? LineHeight { get; set; }
        /// <summary>
        /// Gets or sets the maximum number of lines allowed in the <see cref="T:Microsoft.Maui.Controls.Label" />.
        /// </summary>
        [Parameter] public int? MaxLines { get; set; }
        [Parameter] public Thickness? Padding { get; set; }
        /// <summary>
        /// Gets or sets the text for the Label.
        /// </summary>
        /// <value>
        /// The <see cref="T:System.String" /> value to be displayed inside of the Label.
        /// </value>
        [Parameter] public string Text { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Microsoft.Maui.Graphics.Color" /> for the text of this Label.
        /// </summary>
        /// <value>
        /// The <see cref="T:Microsoft.Maui.Graphics.Color" /> value.
        /// </value>
        [Parameter] public Color TextColor { get; set; }
        /// <summary>
        /// Gets or sets the <see cref="T:Microsoft.Maui.TextDecorations" /> applied to <see cref="P:Microsoft.Maui.Controls.Label.Text" />.
        /// </summary>
        [Parameter] public TextDecorations? TextDecorations { get; set; }
        [Parameter] public TextTransform? TextTransform { get; set; }
        /// <summary>
        /// Determines whether the Label should display plain text or HTML text.
        /// </summary>
        [Parameter] public TextType? TextType { get; set; }
        /// <summary>
        /// Gets or sets the vertical alignement of the Text property.
        /// </summary>
        [Parameter] public TextAlignment? VerticalTextAlignment { get; set; }

        public new MC.Label NativeControl => (MC.Label)((BindableObject)this).NativeControl;

        protected override MC.Label CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CharacterSpacing):
                    if (!Equals(CharacterSpacing, value))
                    {
                        CharacterSpacing = (double?)value;
                        NativeControl.CharacterSpacing = CharacterSpacing ?? (double)MC.Label.CharacterSpacingProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAttributes):
                    if (!Equals(FontAttributes, value))
                    {
                        FontAttributes = (MC.FontAttributes?)value;
                        NativeControl.FontAttributes = FontAttributes ?? (MC.FontAttributes)MC.Label.FontAttributesProperty.DefaultValue;
                    }
                    break;
                case nameof(FontAutoScalingEnabled):
                    if (!Equals(FontAutoScalingEnabled, value))
                    {
                        FontAutoScalingEnabled = (bool?)value;
                        NativeControl.FontAutoScalingEnabled = FontAutoScalingEnabled ?? (bool)MC.Label.FontAutoScalingEnabledProperty.DefaultValue;
                    }
                    break;
                case nameof(FontFamily):
                    if (!Equals(FontFamily, value))
                    {
                        FontFamily = (string)value;
                        NativeControl.FontFamily = FontFamily;
                    }
                    break;
                case nameof(FontSize):
                    if (!Equals(FontSize, value))
                    {
                        FontSize = (double?)value;
                        NativeControl.FontSize = FontSize ?? (double)MC.Label.FontSizeProperty.DefaultValue;
                    }
                    break;
                case nameof(HorizontalTextAlignment):
                    if (!Equals(HorizontalTextAlignment, value))
                    {
                        HorizontalTextAlignment = (TextAlignment?)value;
                        NativeControl.HorizontalTextAlignment = HorizontalTextAlignment ?? (TextAlignment)MC.Label.HorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(LineBreakMode):
                    if (!Equals(LineBreakMode, value))
                    {
                        LineBreakMode = (LineBreakMode?)value;
                        NativeControl.LineBreakMode = LineBreakMode ?? (LineBreakMode)MC.Label.LineBreakModeProperty.DefaultValue;
                    }
                    break;
                case nameof(LineHeight):
                    if (!Equals(LineHeight, value))
                    {
                        LineHeight = (double?)value;
                        NativeControl.LineHeight = LineHeight ?? (double)MC.Label.LineHeightProperty.DefaultValue;
                    }
                    break;
                case nameof(MaxLines):
                    if (!Equals(MaxLines, value))
                    {
                        MaxLines = (int?)value;
                        NativeControl.MaxLines = MaxLines ?? (int)MC.Label.MaxLinesProperty.DefaultValue;
                    }
                    break;
                case nameof(Padding):
                    if (!Equals(Padding, value))
                    {
                        Padding = (Thickness?)value;
                        NativeControl.Padding = Padding ?? (Thickness)MC.Label.PaddingProperty.DefaultValue;
                    }
                    break;
                case nameof(Text):
                    if (!Equals(Text, value))
                    {
                        Text = (string)value;
                        NativeControl.Text = Text;
                    }
                    break;
                case nameof(TextColor):
                    if (!Equals(TextColor, value))
                    {
                        TextColor = (Color)value;
                        NativeControl.TextColor = TextColor;
                    }
                    break;
                case nameof(TextDecorations):
                    if (!Equals(TextDecorations, value))
                    {
                        TextDecorations = (TextDecorations?)value;
                        NativeControl.TextDecorations = TextDecorations ?? (TextDecorations)MC.Label.TextDecorationsProperty.DefaultValue;
                    }
                    break;
                case nameof(TextTransform):
                    if (!Equals(TextTransform, value))
                    {
                        TextTransform = (TextTransform?)value;
                        NativeControl.TextTransform = TextTransform ?? (TextTransform)MC.Label.TextTransformProperty.DefaultValue;
                    }
                    break;
                case nameof(TextType):
                    if (!Equals(TextType, value))
                    {
                        TextType = (TextType?)value;
                        NativeControl.TextType = TextType ?? (TextType)MC.Label.TextTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(VerticalTextAlignment):
                    if (!Equals(VerticalTextAlignment, value))
                    {
                        VerticalTextAlignment = (TextAlignment?)value;
                        NativeControl.VerticalTextAlignment = VerticalTextAlignment ?? (TextAlignment)MC.Label.VerticalTextAlignmentProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
