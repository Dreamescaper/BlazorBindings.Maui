// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// A <see cref="T:Microsoft.Maui.Controls.View" /> that holds rows of <see cref="T:Microsoft.Maui.Controls.Cell" /> elements.
    /// </summary>
    public partial class TableView : View
    {
        static TableView()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets a value that indicates whether the rows that are contained in this <see cref="T:Microsoft.Maui.Controls.TableView" /> can have uneven rows.
        /// </summary>
        [Parameter] public bool? HasUnevenRows { get; set; }
        /// <summary>
        /// Gets or sets the intent of the table.
        /// </summary>
        [Parameter] public MC.TableIntent? Intent { get; set; }
        /// <summary>
        /// An integer that describes the height of the items in the list. This is ignored if HasUnevenRows is true.
        /// </summary>
        [Parameter] public int? RowHeight { get; set; }

        public new MC.TableView NativeControl => (MC.TableView)((BindableObject)this).NativeControl;

        protected override MC.TableView CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(HasUnevenRows):
                    if (!Equals(HasUnevenRows, value))
                    {
                        HasUnevenRows = (bool?)value;
                        NativeControl.HasUnevenRows = HasUnevenRows ?? (bool)MC.TableView.HasUnevenRowsProperty.DefaultValue;
                    }
                    break;
                case nameof(Intent):
                    if (!Equals(Intent, value))
                    {
                        Intent = (MC.TableIntent?)value;
                        NativeControl.Intent = Intent ?? default;
                    }
                    break;
                case nameof(RowHeight):
                    if (!Equals(RowHeight, value))
                    {
                        RowHeight = (int?)value;
                        NativeControl.RowHeight = RowHeight ?? (int)MC.TableView.RowHeightProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
