// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui.Graphics;
using System.Threading.Tasks;

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// A visual control used to indicate that something is ongoing.
    /// </summary>
    public partial class ActivityIndicator : View
    {
        static ActivityIndicator()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the <see cref="T:Microsoft.Maui.Graphics.Color" /> of the ActivityIndicator.
        /// </summary>
        /// <value>
        /// A <see cref="T:Microsoft.Maui.Graphics.Color" /> used to display the ActivityIndicator.
        /// </value>
        [Parameter] public Color Color { get; set; }
        /// <summary>
        /// Gets or sets the value indicating if the ActivityIndicator is running.
        /// </summary>
        /// <value>
        /// A <see cref="T:System.Boolean" /> indicating if the ActivityIndicator is running.
        /// </value>
        [Parameter] public bool? IsRunning { get; set; }

        public new MC.ActivityIndicator NativeControl => (MC.ActivityIndicator)((BindableObject)this).NativeControl;

        protected override MC.ActivityIndicator CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(Color):
                    if (!Equals(Color, value))
                    {
                        Color = (Color)value;
                        NativeControl.Color = Color;
                    }
                    break;
                case nameof(IsRunning):
                    if (!Equals(IsRunning, value))
                    {
                        IsRunning = (bool?)value;
                        NativeControl.IsRunning = IsRunning ?? (bool)MC.ActivityIndicator.IsRunningProperty.DefaultValue;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
