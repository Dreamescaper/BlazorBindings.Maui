// <auto-generated>
//     This code was generated by a BlazorBindings.Maui component generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using BlazorBindings.Core;
using MC = Microsoft.Maui.Controls;
using Microsoft.AspNetCore.Components;
using Microsoft.Maui;
using Microsoft.Maui.Graphics;
using System;
using System.Threading.Tasks;

#pragma warning disable MBB001

namespace BlazorBindings.Maui.Elements
{
    /// <summary>
    /// A <see cref="T:Microsoft.Maui.Controls.View" /> control that provides a search box.
    /// </summary>
    public partial class SearchBar : InputView
    {
        static SearchBar()
        {
            RegisterAdditionalHandlers();
        }

        /// <summary>
        /// Gets or sets the color of the cancel button.
        /// </summary>
        [Parameter] public Color CancelButtonColor { get; set; }
        /// <summary>
        /// Gets or sets the horizontal text alignment.
        /// </summary>
        [Parameter] public TextAlignment? HorizontalTextAlignment { get; set; }
        /// <summary>
        /// Determines what the return key on the on-screen keyboard should look like.
        /// </summary>
        [Parameter] public ReturnType? ReturnType { get; set; }
        /// <summary>
        /// Gets or sets the color of the search icon in the <see cref="T:Microsoft.Maui.Controls.SearchBar" />.
        /// </summary>
        [Parameter] public Color SearchIconColor { get; set; }
        [Parameter] public TextAlignment? VerticalTextAlignment { get; set; }
        [Parameter] public EventCallback OnSearchButtonPressed { get; set; }

        public new MC.SearchBar NativeControl => (MC.SearchBar)((BindableObject)this).NativeControl;

        protected override MC.SearchBar CreateNativeElement() => new();

        protected override void HandleParameter(string name, object value)
        {
            switch (name)
            {
                case nameof(CancelButtonColor):
                    if (!Equals(CancelButtonColor, value))
                    {
                        CancelButtonColor = (Color)value;
                        NativeControl.CancelButtonColor = CancelButtonColor;
                    }
                    break;
                case nameof(HorizontalTextAlignment):
                    if (!Equals(HorizontalTextAlignment, value))
                    {
                        HorizontalTextAlignment = (TextAlignment?)value;
                        NativeControl.HorizontalTextAlignment = HorizontalTextAlignment ?? (TextAlignment)MC.SearchBar.HorizontalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(ReturnType):
                    if (!Equals(ReturnType, value))
                    {
                        ReturnType = (ReturnType?)value;
                        NativeControl.ReturnType = ReturnType ?? (ReturnType)MC.SearchBar.ReturnTypeProperty.DefaultValue;
                    }
                    break;
                case nameof(SearchIconColor):
                    if (!Equals(SearchIconColor, value))
                    {
                        SearchIconColor = (Color)value;
                        NativeControl.SearchIconColor = SearchIconColor;
                    }
                    break;
                case nameof(VerticalTextAlignment):
                    if (!Equals(VerticalTextAlignment, value))
                    {
                        VerticalTextAlignment = (TextAlignment?)value;
                        NativeControl.VerticalTextAlignment = VerticalTextAlignment ?? (TextAlignment)MC.SearchBar.VerticalTextAlignmentProperty.DefaultValue;
                    }
                    break;
                case nameof(OnSearchButtonPressed):
                    if (!Equals(OnSearchButtonPressed, value))
                    {
                        void NativeControlSearchButtonPressed(object sender, EventArgs e) => InvokeEventCallback(OnSearchButtonPressed);

                        OnSearchButtonPressed = (EventCallback)value;
                        NativeControl.SearchButtonPressed -= NativeControlSearchButtonPressed;
                        NativeControl.SearchButtonPressed += NativeControlSearchButtonPressed;
                    }
                    break;

                default:
                    base.HandleParameter(name, value);
                    break;
            }
        }

        static partial void RegisterAdditionalHandlers();
    }
}
